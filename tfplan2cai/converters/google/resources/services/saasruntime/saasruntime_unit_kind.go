// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/UnitKind.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package saasruntime

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SaasRuntimeUnitKindAssetType string = "saasservicemgmt.googleapis.com/UnitKind"

func ResourceConverterSaasRuntimeUnitKind() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SaasRuntimeUnitKindAssetType,
		Convert:   GetSaasRuntimeUnitKindCaiObject,
	}
}

func GetSaasRuntimeUnitKindCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//saasservicemgmt.googleapis.com/projects/{{project}}/locations/{{location}}/unitKinds/{{unit_kind_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSaasRuntimeUnitKindApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SaasRuntimeUnitKindAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/saasservicemgmt/v1beta1/rest",
				DiscoveryName:        "UnitKind",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSaasRuntimeUnitKindApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	dependenciesProp, err := expandSaasRuntimeUnitKindDependencies(d.Get("dependencies"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("dependencies"); !tpgresource.IsEmptyValue(reflect.ValueOf(dependenciesProp)) && (ok || !reflect.DeepEqual(v, dependenciesProp)) {
		obj["dependencies"] = dependenciesProp
	}
	inputVariableMappingsProp, err := expandSaasRuntimeUnitKindInputVariableMappings(d.Get("input_variable_mappings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("input_variable_mappings"); !tpgresource.IsEmptyValue(reflect.ValueOf(inputVariableMappingsProp)) && (ok || !reflect.DeepEqual(v, inputVariableMappingsProp)) {
		obj["inputVariableMappings"] = inputVariableMappingsProp
	}
	outputVariableMappingsProp, err := expandSaasRuntimeUnitKindOutputVariableMappings(d.Get("output_variable_mappings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("output_variable_mappings"); !tpgresource.IsEmptyValue(reflect.ValueOf(outputVariableMappingsProp)) && (ok || !reflect.DeepEqual(v, outputVariableMappingsProp)) {
		obj["outputVariableMappings"] = outputVariableMappingsProp
	}
	saasProp, err := expandSaasRuntimeUnitKindSaas(d.Get("saas"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("saas"); !tpgresource.IsEmptyValue(reflect.ValueOf(saasProp)) && (ok || !reflect.DeepEqual(v, saasProp)) {
		obj["saas"] = saasProp
	}
	effectiveAnnotationsProp, err := expandSaasRuntimeUnitKindEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveAnnotationsProp)) && (ok || !reflect.DeepEqual(v, effectiveAnnotationsProp)) {
		obj["annotations"] = effectiveAnnotationsProp
	}
	effectiveLabelsProp, err := expandSaasRuntimeUnitKindEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandSaasRuntimeUnitKindDependencies(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAlias, err := expandSaasRuntimeUnitKindDependenciesAlias(original["alias"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAlias); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["alias"] = transformedAlias
		}

		transformedUnitKind, err := expandSaasRuntimeUnitKindDependenciesUnitKind(original["unit_kind"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUnitKind); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["unitKind"] = transformedUnitKind
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandSaasRuntimeUnitKindDependenciesAlias(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindDependenciesUnitKind(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindInputVariableMappings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFrom, err := expandSaasRuntimeUnitKindInputVariableMappingsFrom(original["from"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFrom); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["from"] = transformedFrom
		}

		transformedTo, err := expandSaasRuntimeUnitKindInputVariableMappingsTo(original["to"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["to"] = transformedTo
		}

		transformedVariable, err := expandSaasRuntimeUnitKindInputVariableMappingsVariable(original["variable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["variable"] = transformedVariable
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsFrom(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDependency, err := expandSaasRuntimeUnitKindInputVariableMappingsFromDependency(original["dependency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDependency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dependency"] = transformedDependency
	}

	transformedOutputVariable, err := expandSaasRuntimeUnitKindInputVariableMappingsFromOutputVariable(original["output_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOutputVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["outputVariable"] = transformedOutputVariable
	}

	return transformed, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsFromDependency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsFromOutputVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsTo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDependency, err := expandSaasRuntimeUnitKindInputVariableMappingsToDependency(original["dependency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDependency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dependency"] = transformedDependency
	}

	transformedIgnoreForLookup, err := expandSaasRuntimeUnitKindInputVariableMappingsToIgnoreForLookup(original["ignore_for_lookup"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreForLookup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreForLookup"] = transformedIgnoreForLookup
	}

	transformedInputVariable, err := expandSaasRuntimeUnitKindInputVariableMappingsToInputVariable(original["input_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInputVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inputVariable"] = transformedInputVariable
	}

	return transformed, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsToDependency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsToIgnoreForLookup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsToInputVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindInputVariableMappingsVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFrom, err := expandSaasRuntimeUnitKindOutputVariableMappingsFrom(original["from"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFrom); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["from"] = transformedFrom
		}

		transformedTo, err := expandSaasRuntimeUnitKindOutputVariableMappingsTo(original["to"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["to"] = transformedTo
		}

		transformedVariable, err := expandSaasRuntimeUnitKindOutputVariableMappingsVariable(original["variable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["variable"] = transformedVariable
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsFrom(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDependency, err := expandSaasRuntimeUnitKindOutputVariableMappingsFromDependency(original["dependency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDependency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dependency"] = transformedDependency
	}

	transformedOutputVariable, err := expandSaasRuntimeUnitKindOutputVariableMappingsFromOutputVariable(original["output_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOutputVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["outputVariable"] = transformedOutputVariable
	}

	return transformed, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsFromDependency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsFromOutputVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsTo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDependency, err := expandSaasRuntimeUnitKindOutputVariableMappingsToDependency(original["dependency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDependency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dependency"] = transformedDependency
	}

	transformedIgnoreForLookup, err := expandSaasRuntimeUnitKindOutputVariableMappingsToIgnoreForLookup(original["ignore_for_lookup"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreForLookup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreForLookup"] = transformedIgnoreForLookup
	}

	transformedInputVariable, err := expandSaasRuntimeUnitKindOutputVariableMappingsToInputVariable(original["input_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInputVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inputVariable"] = transformedInputVariable
	}

	return transformed, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsToDependency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsToIgnoreForLookup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsToInputVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindOutputVariableMappingsVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindSaas(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitKindEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandSaasRuntimeUnitKindEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
