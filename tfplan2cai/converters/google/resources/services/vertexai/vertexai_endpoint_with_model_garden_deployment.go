// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/vertexai/EndpointWithModelGardenDeployment.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const VertexAIEndpointWithModelGardenDeploymentAssetType string = "aiplatform.googleapis.com/EndpointWithModelGardenDeployment"

func ResourceConverterVertexAIEndpointWithModelGardenDeployment() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: VertexAIEndpointWithModelGardenDeploymentAssetType,
		Convert:   GetVertexAIEndpointWithModelGardenDeploymentCaiObject,
	}
}

func GetVertexAIEndpointWithModelGardenDeploymentCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//aiplatform.googleapis.com/projects/{{project}}/locations/{{location}}/endpoints/{{endpoint}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetVertexAIEndpointWithModelGardenDeploymentApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: VertexAIEndpointWithModelGardenDeploymentAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/aiplatform/v1beta1/rest",
				DiscoveryName:        "EndpointWithModelGardenDeployment",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetVertexAIEndpointWithModelGardenDeploymentApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	publisherModelNameProp, err := expandVertexAIEndpointWithModelGardenDeploymentPublisherModelName(d.Get("publisher_model_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("publisher_model_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(publisherModelNameProp)) && (ok || !reflect.DeepEqual(v, publisherModelNameProp)) {
		obj["publisherModelName"] = publisherModelNameProp
	}
	huggingFaceModelIdProp, err := expandVertexAIEndpointWithModelGardenDeploymentHuggingFaceModelId(d.Get("hugging_face_model_id"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("hugging_face_model_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(huggingFaceModelIdProp)) && (ok || !reflect.DeepEqual(v, huggingFaceModelIdProp)) {
		obj["huggingFaceModelId"] = huggingFaceModelIdProp
	}
	modelConfigProp, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfig(d.Get("model_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("model_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(modelConfigProp)) && (ok || !reflect.DeepEqual(v, modelConfigProp)) {
		obj["modelConfig"] = modelConfigProp
	}
	endpointConfigProp, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfig(d.Get("endpoint_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("endpoint_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(endpointConfigProp)) && (ok || !reflect.DeepEqual(v, endpointConfigProp)) {
		obj["endpointConfig"] = endpointConfigProp
	}
	deployConfigProp, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfig(d.Get("deploy_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("deploy_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(deployConfigProp)) && (ok || !reflect.DeepEqual(v, deployConfigProp)) {
		obj["deployConfig"] = deployConfigProp
	}

	return obj, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentPublisherModelName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentHuggingFaceModelId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHuggingFaceCacheEnabled, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigHuggingFaceCacheEnabled(original["hugging_face_cache_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHuggingFaceCacheEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["huggingFaceCacheEnabled"] = transformedHuggingFaceCacheEnabled
	}

	transformedModelDisplayName, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigModelDisplayName(original["model_display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["modelDisplayName"] = transformedModelDisplayName
	}

	transformedContainerSpec, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpec(original["container_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContainerSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["containerSpec"] = transformedContainerSpec
	}

	transformedAcceptEula, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigAcceptEula(original["accept_eula"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceptEula); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["acceptEula"] = transformedAcceptEula
	}

	transformedHuggingFaceAccessToken, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigHuggingFaceAccessToken(original["hugging_face_access_token"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHuggingFaceAccessToken); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["huggingFaceAccessToken"] = transformedHuggingFaceAccessToken
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigHuggingFaceCacheEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigModelDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPorts, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecPorts(original["ports"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPorts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ports"] = transformedPorts
	}

	transformedPredictRoute, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecPredictRoute(original["predict_route"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPredictRoute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["predictRoute"] = transformedPredictRoute
	}

	transformedHealthRoute, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthRoute(original["health_route"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHealthRoute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["healthRoute"] = transformedHealthRoute
	}

	transformedDeploymentTimeout, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecDeploymentTimeout(original["deployment_timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeploymentTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deploymentTimeout"] = transformedDeploymentTimeout
	}

	transformedStartupProbe, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbe(original["startup_probe"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStartupProbe); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["startupProbe"] = transformedStartupProbe
	}

	transformedHealthProbe, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe(original["health_probe"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHealthProbe); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["healthProbe"] = transformedHealthProbe
	}

	transformedImageUri, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	transformedCommand, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecCommand(original["command"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommand); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["command"] = transformedCommand
	}

	transformedArgs, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs(original["args"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedArgs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["args"] = transformedArgs
	}

	transformedGrpcPorts, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPorts(original["grpc_ports"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrpcPorts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grpcPorts"] = transformedGrpcPorts
	}

	transformedSharedMemorySizeMb, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecSharedMemorySizeMb(original["shared_memory_size_mb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSharedMemorySizeMb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sharedMemorySizeMb"] = transformedSharedMemorySizeMb
	}

	transformedLivenessProbe, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbe(original["liveness_probe"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLivenessProbe); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["livenessProbe"] = transformedLivenessProbe
	}

	transformedEnv, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecEnv(original["env"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnv); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["env"] = transformedEnv
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecPorts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedContainerPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecPortsContainerPort(original["container_port"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContainerPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["containerPort"] = transformedContainerPort
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecPortsContainerPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecPredictRoute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthRoute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecDeploymentTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbe(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExec, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExec(original["exec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exec"] = transformedExec
	}

	transformedHttpGet, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGet(original["http_get"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpGet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpGet"] = transformedHttpGet
	}

	transformedGrpc, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpc(original["grpc"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrpc); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grpc"] = transformedGrpc
	}

	transformedTcpSocket, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocket(original["tcp_socket"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTcpSocket); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tcpSocket"] = transformedTcpSocket
	}

	transformedTimeoutSeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTimeoutSeconds(original["timeout_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeoutSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeoutSeconds"] = transformedTimeoutSeconds
	}

	transformedSuccessThreshold, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeSuccessThreshold(original["success_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSuccessThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["successThreshold"] = transformedSuccessThreshold
	}

	transformedInitialDelaySeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeInitialDelaySeconds(original["initial_delay_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInitialDelaySeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["initialDelaySeconds"] = transformedInitialDelaySeconds
	}

	transformedPeriodSeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbePeriodSeconds(original["period_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPeriodSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["periodSeconds"] = transformedPeriodSeconds
	}

	transformedFailureThreshold, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeFailureThreshold(original["failure_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailureThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failureThreshold"] = transformedFailureThreshold
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCommand, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecCommand(original["command"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommand); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["command"] = transformedCommand
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecCommand(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPath, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedHost, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	transformedScheme, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetScheme(original["scheme"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScheme); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scheme"] = transformedScheme
	}

	transformedHttpHeaders, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaders(original["http_headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpHeaders"] = transformedHttpHeaders
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetScheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedValue, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeadersValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedName, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeadersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeadersValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeadersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpc(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedService, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcService(original["service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["service"] = transformedService
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocket(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedHost, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTimeoutSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeSuccessThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeInitialDelaySeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbePeriodSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeFailureThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExec, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec(original["exec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exec"] = transformedExec
	}

	transformedHttpGet, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet(original["http_get"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpGet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpGet"] = transformedHttpGet
	}

	transformedGrpc, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc(original["grpc"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrpc); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grpc"] = transformedGrpc
	}

	transformedTcpSocket, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket(original["tcp_socket"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTcpSocket); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tcpSocket"] = transformedTcpSocket
	}

	transformedTimeoutSeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTimeoutSeconds(original["timeout_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeoutSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeoutSeconds"] = transformedTimeoutSeconds
	}

	transformedSuccessThreshold, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeSuccessThreshold(original["success_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSuccessThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["successThreshold"] = transformedSuccessThreshold
	}

	transformedInitialDelaySeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeInitialDelaySeconds(original["initial_delay_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInitialDelaySeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["initialDelaySeconds"] = transformedInitialDelaySeconds
	}

	transformedPeriodSeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbePeriodSeconds(original["period_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPeriodSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["periodSeconds"] = transformedPeriodSeconds
	}

	transformedFailureThreshold, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeFailureThreshold(original["failure_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailureThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failureThreshold"] = transformedFailureThreshold
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCommand, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecCommand(original["command"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommand); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["command"] = transformedCommand
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecCommand(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPath, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedHost, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	transformedScheme, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetScheme(original["scheme"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScheme); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scheme"] = transformedScheme
	}

	transformedHttpHeaders, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaders(original["http_headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpHeaders"] = transformedHttpHeaders
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetScheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeadersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeadersValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeadersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeadersValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedService, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcService(original["service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["service"] = transformedService
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedHost, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTimeoutSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeSuccessThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeInitialDelaySeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbePeriodSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeFailureThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecImageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecCommand(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPorts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedContainerPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortsContainerPort(original["container_port"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContainerPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["containerPort"] = transformedContainerPort
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortsContainerPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecSharedMemorySizeMb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbe(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExec, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExec(original["exec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exec"] = transformedExec
	}

	transformedHttpGet, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGet(original["http_get"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpGet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpGet"] = transformedHttpGet
	}

	transformedGrpc, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpc(original["grpc"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrpc); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grpc"] = transformedGrpc
	}

	transformedTcpSocket, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocket(original["tcp_socket"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTcpSocket); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tcpSocket"] = transformedTcpSocket
	}

	transformedTimeoutSeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTimeoutSeconds(original["timeout_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeoutSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeoutSeconds"] = transformedTimeoutSeconds
	}

	transformedSuccessThreshold, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeSuccessThreshold(original["success_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSuccessThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["successThreshold"] = transformedSuccessThreshold
	}

	transformedInitialDelaySeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeInitialDelaySeconds(original["initial_delay_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInitialDelaySeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["initialDelaySeconds"] = transformedInitialDelaySeconds
	}

	transformedPeriodSeconds, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbePeriodSeconds(original["period_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPeriodSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["periodSeconds"] = transformedPeriodSeconds
	}

	transformedFailureThreshold, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeFailureThreshold(original["failure_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailureThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failureThreshold"] = transformedFailureThreshold
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCommand, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecCommand(original["command"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommand); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["command"] = transformedCommand
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecCommand(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPath, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetPath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedHost, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	transformedScheme, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetScheme(original["scheme"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScheme); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scheme"] = transformedScheme
	}

	transformedHttpHeaders, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaders(original["http_headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpHeaders"] = transformedHttpHeaders
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetScheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeadersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeadersValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeadersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeadersValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpc(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedService, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcService(original["service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["service"] = transformedService
	}

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocket(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPort, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketPort(original["port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["port"] = transformedPort
	}

	transformedHost, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketHost(original["host"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["host"] = transformedHost
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTimeoutSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeSuccessThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeInitialDelaySeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbePeriodSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeFailureThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecEnv(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigAcceptEula(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentModelConfigHuggingFaceAccessToken(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEndpointDisplayName, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigEndpointDisplayName(original["endpoint_display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndpointDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endpointDisplayName"] = transformedEndpointDisplayName
	}

	transformedDedicatedEndpointEnabled, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigDedicatedEndpointEnabled(original["dedicated_endpoint_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDedicatedEndpointEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dedicatedEndpointEnabled"] = transformedDedicatedEndpointEnabled
	}

	transformedPrivateServiceConnectConfig, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfig(original["private_service_connect_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateServiceConnectConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateServiceConnectConfig"] = transformedPrivateServiceConnectConfig
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigEndpointDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigDedicatedEndpointEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnablePrivateServiceConnect, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigEnablePrivateServiceConnect(original["enable_private_service_connect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnablePrivateServiceConnect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enablePrivateServiceConnect"] = transformedEnablePrivateServiceConnect
	}

	transformedProjectAllowlist, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigProjectAllowlist(original["project_allowlist"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectAllowlist); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectAllowlist"] = transformedProjectAllowlist
	}

	transformedPscAutomationConfigs, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigs(original["psc_automation_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPscAutomationConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pscAutomationConfigs"] = transformedPscAutomationConfigs
	}

	transformedServiceAttachment, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigServiceAttachment(original["service_attachment"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAttachment"] = transformedServiceAttachment
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigEnablePrivateServiceConnect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigProjectAllowlist(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedNetwork, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedIpAddress, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsIpAddress(original["ip_address"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpAddress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipAddress"] = transformedIpAddress
	}

	transformedForwardingRule, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsForwardingRule(original["forwarding_rule"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedForwardingRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["forwardingRule"] = transformedForwardingRule
	}

	transformedState, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedErrorMessage, err := expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsErrorMessage(original["error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["errorMessage"] = transformedErrorMessage
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsIpAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsForwardingRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigPscAutomationConfigsErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentEndpointConfigPrivateServiceConnectConfigServiceAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSystemLabels, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigSystemLabels(original["system_labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSystemLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["systemLabels"] = transformedSystemLabels
	}

	transformedDedicatedResources, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResources(original["dedicated_resources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDedicatedResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dedicatedResources"] = transformedDedicatedResources
	}

	transformedFastTryoutEnabled, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigFastTryoutEnabled(original["fast_tryout_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFastTryoutEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fastTryoutEnabled"] = transformedFastTryoutEnabled
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigSystemLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMachineSpec, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpec(original["machine_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineSpec"] = transformedMachineSpec
	}

	transformedMinReplicaCount, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMinReplicaCount(original["min_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinReplicaCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minReplicaCount"] = transformedMinReplicaCount
	}

	transformedMaxReplicaCount, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMaxReplicaCount(original["max_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxReplicaCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxReplicaCount"] = transformedMaxReplicaCount
	}

	transformedRequiredReplicaCount, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesRequiredReplicaCount(original["required_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequiredReplicaCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requiredReplicaCount"] = transformedRequiredReplicaCount
	}

	transformedAutoscalingMetricSpecs, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecs(original["autoscaling_metric_specs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoscalingMetricSpecs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoscalingMetricSpecs"] = transformedAutoscalingMetricSpecs
	}

	transformedSpot, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesSpot(original["spot"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpot); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["spot"] = transformedSpot
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedReservationAffinity, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinity(original["reservation_affinity"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReservationAffinity); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["reservationAffinity"] = transformedReservationAffinity
	}

	transformedMachineType, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecMachineType(original["machine_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineType"] = transformedMachineType
	}

	transformedAcceleratorType, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecAcceleratorType(original["accelerator_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["acceleratorType"] = transformedAcceleratorType
	}

	transformedAcceleratorCount, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecAcceleratorCount(original["accelerator_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["acceleratorCount"] = transformedAcceleratorCount
	}

	transformedTpuTopology, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecTpuTopology(original["tpu_topology"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTpuTopology); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tpuTopology"] = transformedTpuTopology
	}

	transformedMultihostGpuNodeCount, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecMultihostGpuNodeCount(original["multihost_gpu_node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMultihostGpuNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["multihostGpuNodeCount"] = transformedMultihostGpuNodeCount
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedReservationAffinityType, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityReservationAffinityType(original["reservation_affinity_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReservationAffinityType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["reservationAffinityType"] = transformedReservationAffinityType
	}

	transformedKey, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityKey(original["key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["key"] = transformedKey
	}

	transformedValues, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityReservationAffinityType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecMachineType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecAcceleratorType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecAcceleratorCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecTpuTopology(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecMultihostGpuNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMinReplicaCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMaxReplicaCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesRequiredReplicaCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedMetricName, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecsMetricName(original["metric_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMetricName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["metricName"] = transformedMetricName
		}

		transformedTarget, err := expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecsTarget(original["target"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTarget); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["target"] = transformedTarget
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecsMetricName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecsTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesSpot(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointWithModelGardenDeploymentDeployConfigFastTryoutEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
