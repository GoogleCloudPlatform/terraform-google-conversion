// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apphub/Service.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apphub

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

const ApphubServiceAssetType string = "apphub.googleapis.com/Service"

const ApphubServiceSchemaName string = "google_apphub_service"

func ResourceApphubService() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"application_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Part of 'parent'.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}`,
			},
			"discovered_service": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
				Description:      `Immutable. The resource name of the original discovered service.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Part of 'parent'.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}`,
			},
			"service_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The Service identifier.`,
			},
			"attributes": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Consumer provided attributes.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"business_owners": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Business team that ensures user needs are met and value is delivered`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"email": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Required. Email address of the contacts.`,
									},
									"display_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Contact's name.`,
									},
								},
							},
						},
						"criticality": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Criticality of the Application, Service, or Workload`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"MISSION_CRITICAL", "HIGH", "MEDIUM", "LOW"}),
										Description:  `Criticality type. Possible values: ["MISSION_CRITICAL", "HIGH", "MEDIUM", "LOW"]`,
									},
								},
							},
						},
						"developer_owners": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Developer team that owns development and coding.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"email": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Required. Email address of the contacts.`,
									},
									"display_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Contact's name.`,
									},
								},
							},
						},
						"environment": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Environment of the Application, Service, or Workload`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"PRODUCTION", "STAGING", "TEST", "DEVELOPMENT"}),
										Description:  `Environment type. Possible values: ["PRODUCTION", "STAGING", "TEST", "DEVELOPMENT"]`,
									},
								},
							},
						},
						"operator_owners": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Operator team that ensures runtime and operations.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"email": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Required. Email address of the contacts.`,
									},
									"display_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Contact's name.`,
									},
								},
							},
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-defined description of a Service.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-defined name for the Service.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Create time.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The resource name of a Service. Format:
"projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"`,
			},
			"service_properties": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Properties of an underlying cloud resource that can comprise a Service.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},
			"service_reference": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Reference to an underlying networking resource that can comprise a Service.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED`,
			},
			"uid": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Output only. A universally unique identifier (UUID) for the 'Service' in the UUID4
format.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Update time.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
