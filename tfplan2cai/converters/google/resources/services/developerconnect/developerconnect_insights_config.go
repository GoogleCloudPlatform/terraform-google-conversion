// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/developerconnect/InsightsConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package developerconnect

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DeveloperConnectInsightsConfigAssetType string = "developerconnect.googleapis.com/InsightsConfig"

func ResourceConverterDeveloperConnectInsightsConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DeveloperConnectInsightsConfigAssetType,
		Convert:   GetDeveloperConnectInsightsConfigCaiObject,
	}
}

func GetDeveloperConnectInsightsConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//developerconnect.googleapis.com/projects/{{project}}/locations/{{location}}/insightsConfigs/{{insights_config_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDeveloperConnectInsightsConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DeveloperConnectInsightsConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/developerconnect/v1/rest",
				DiscoveryName:        "InsightsConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDeveloperConnectInsightsConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	appHubApplicationProp, err := expandDeveloperConnectInsightsConfigAppHubApplication(d.Get("app_hub_application"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("app_hub_application"); !tpgresource.IsEmptyValue(reflect.ValueOf(appHubApplicationProp)) && (ok || !reflect.DeepEqual(v, appHubApplicationProp)) {
		obj["appHubApplication"] = appHubApplicationProp
	}
	artifactConfigsProp, err := expandDeveloperConnectInsightsConfigArtifactConfigs(d.Get("artifact_configs"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("artifact_configs"); !tpgresource.IsEmptyValue(reflect.ValueOf(artifactConfigsProp)) && (ok || !reflect.DeepEqual(v, artifactConfigsProp)) {
		obj["artifactConfigs"] = artifactConfigsProp
	}
	effectiveAnnotationsProp, err := expandDeveloperConnectInsightsConfigEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveAnnotationsProp)) && (ok || !reflect.DeepEqual(v, effectiveAnnotationsProp)) {
		obj["annotations"] = effectiveAnnotationsProp
	}
	effectiveLabelsProp, err := expandDeveloperConnectInsightsConfigEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandDeveloperConnectInsightsConfigAppHubApplication(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedGoogleArtifactRegistry, err := expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactRegistry(original["google_artifact_registry"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGoogleArtifactRegistry); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["googleArtifactRegistry"] = transformedGoogleArtifactRegistry
		}

		transformedGoogleArtifactAnalysis, err := expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactAnalysis(original["google_artifact_analysis"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGoogleArtifactAnalysis); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["googleArtifactAnalysis"] = transformedGoogleArtifactAnalysis
		}

		transformedUri, err := expandDeveloperConnectInsightsConfigArtifactConfigsUri(original["uri"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["uri"] = transformedUri
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactRegistry(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactRegistryProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedArtifactRegistryPackage, err := expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactRegistryArtifactRegistryPackage(original["artifact_registry_package"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedArtifactRegistryPackage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["artifactRegistryPackage"] = transformedArtifactRegistryPackage
	}

	return transformed, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactRegistryProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactRegistryArtifactRegistryPackage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactAnalysis(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactAnalysisProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigsGoogleArtifactAnalysisProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectInsightsConfigArtifactConfigsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDeveloperConnectInsightsConfigEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDeveloperConnectInsightsConfigEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
