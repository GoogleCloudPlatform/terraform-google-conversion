// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkconnectivity

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkConnectivityRegionalEndpointAssetType string = "networkconnectivity.googleapis.com/RegionalEndpoint"

func ResourceConverterNetworkConnectivityRegionalEndpoint() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: NetworkConnectivityRegionalEndpointAssetType,
		Convert:   GetNetworkConnectivityRegionalEndpointCaiObject,
	}
}

func GetNetworkConnectivityRegionalEndpointCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//networkconnectivity.googleapis.com/projects/{{project}}/locations/{{location}}/regionalEndpoints/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetNetworkConnectivityRegionalEndpointApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: NetworkConnectivityRegionalEndpointAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/networkconnectivity/v1/rest",
				DiscoveryName:        "RegionalEndpoint",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetNetworkConnectivityRegionalEndpointApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkConnectivityRegionalEndpointDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	targetGoogleApiProp, err := expandNetworkConnectivityRegionalEndpointTargetGoogleApi(d.Get("target_google_api"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("target_google_api"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetGoogleApiProp)) && (ok || !reflect.DeepEqual(v, targetGoogleApiProp)) {
		obj["targetGoogleApi"] = targetGoogleApiProp
	}
	networkProp, err := expandNetworkConnectivityRegionalEndpointNetwork(d.Get("network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	subnetworkProp, err := expandNetworkConnectivityRegionalEndpointSubnetwork(d.Get("subnetwork"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("subnetwork"); !tpgresource.IsEmptyValue(reflect.ValueOf(subnetworkProp)) && (ok || !reflect.DeepEqual(v, subnetworkProp)) {
		obj["subnetwork"] = subnetworkProp
	}
	accessTypeProp, err := expandNetworkConnectivityRegionalEndpointAccessType(d.Get("access_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("access_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(accessTypeProp)) && (ok || !reflect.DeepEqual(v, accessTypeProp)) {
		obj["accessType"] = accessTypeProp
	}
	addressProp, err := expandNetworkConnectivityRegionalEndpointAddress(d.Get("address"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("address"); !tpgresource.IsEmptyValue(reflect.ValueOf(addressProp)) && (ok || !reflect.DeepEqual(v, addressProp)) {
		obj["address"] = addressProp
	}
	labelsProp, err := expandNetworkConnectivityRegionalEndpointEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandNetworkConnectivityRegionalEndpointDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityRegionalEndpointTargetGoogleApi(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityRegionalEndpointNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityRegionalEndpointSubnetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityRegionalEndpointAccessType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityRegionalEndpointAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityRegionalEndpointEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
