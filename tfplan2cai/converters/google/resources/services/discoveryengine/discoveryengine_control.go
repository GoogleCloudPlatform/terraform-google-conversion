// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/Control.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const DiscoveryEngineControlAssetType string = "{{location}}-discoveryengine.googleapis.com/Control"

func ResourceConverterDiscoveryEngineControl() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DiscoveryEngineControlAssetType,
		Convert:   GetDiscoveryEngineControlCaiObject,
	}
}

func GetDiscoveryEngineControlCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-discoveryengine.googleapis.com/projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/controls/{{control_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDiscoveryEngineControlApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DiscoveryEngineControlAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-discoveryengine/v1/rest",
				DiscoveryName:        "Control",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDiscoveryEngineControlApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineControlDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	solutionTypeProp, err := expandDiscoveryEngineControlSolutionType(d.Get("solution_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("solution_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(solutionTypeProp)) && (ok || !reflect.DeepEqual(v, solutionTypeProp)) {
		obj["solutionType"] = solutionTypeProp
	}
	useCasesProp, err := expandDiscoveryEngineControlUseCases(d.Get("use_cases"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("use_cases"); !tpgresource.IsEmptyValue(reflect.ValueOf(useCasesProp)) && (ok || !reflect.DeepEqual(v, useCasesProp)) {
		obj["useCases"] = useCasesProp
	}
	conditionsProp, err := expandDiscoveryEngineControlConditions(d.Get("conditions"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("conditions"); !tpgresource.IsEmptyValue(reflect.ValueOf(conditionsProp)) && (ok || !reflect.DeepEqual(v, conditionsProp)) {
		obj["conditions"] = conditionsProp
	}
	boostActionProp, err := expandDiscoveryEngineControlBoostAction(d.Get("boost_action"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("boost_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(boostActionProp)) && (ok || !reflect.DeepEqual(v, boostActionProp)) {
		obj["boostAction"] = boostActionProp
	}
	filterActionProp, err := expandDiscoveryEngineControlFilterAction(d.Get("filter_action"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterActionProp)) && (ok || !reflect.DeepEqual(v, filterActionProp)) {
		obj["filterAction"] = filterActionProp
	}
	redirectActionProp, err := expandDiscoveryEngineControlRedirectAction(d.Get("redirect_action"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("redirect_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(redirectActionProp)) && (ok || !reflect.DeepEqual(v, redirectActionProp)) {
		obj["redirectAction"] = redirectActionProp
	}
	synonymsActionProp, err := expandDiscoveryEngineControlSynonymsAction(d.Get("synonyms_action"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("synonyms_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(synonymsActionProp)) && (ok || !reflect.DeepEqual(v, synonymsActionProp)) {
		obj["synonymsAction"] = synonymsActionProp
	}
	promoteActionProp, err := expandDiscoveryEngineControlPromoteAction(d.Get("promote_action"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("promote_action"); !tpgresource.IsEmptyValue(reflect.ValueOf(promoteActionProp)) && (ok || !reflect.DeepEqual(v, promoteActionProp)) {
		obj["promoteAction"] = promoteActionProp
	}

	return obj, nil
}

func expandDiscoveryEngineControlDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlSolutionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlUseCases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedQueryTerms, err := expandDiscoveryEngineControlConditionsQueryTerms(original["query_terms"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryTerms); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryTerms"] = transformedQueryTerms
		}

		transformedActiveTimeRange, err := expandDiscoveryEngineControlConditionsActiveTimeRange(original["active_time_range"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedActiveTimeRange); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["activeTimeRange"] = transformedActiveTimeRange
		}

		transformedQueryRegex, err := expandDiscoveryEngineControlConditionsQueryRegex(original["query_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryRegex"] = transformedQueryRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineControlConditionsQueryTerms(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedValue, err := expandDiscoveryEngineControlConditionsQueryTermsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedFullMatch, err := expandDiscoveryEngineControlConditionsQueryTermsFullMatch(original["full_match"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFullMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fullMatch"] = transformedFullMatch
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineControlConditionsQueryTermsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsQueryTermsFullMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsActiveTimeRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedStartTime, err := expandDiscoveryEngineControlConditionsActiveTimeRangeStartTime(original["start_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTime"] = transformedStartTime
		}

		transformedEndTime, err := expandDiscoveryEngineControlConditionsActiveTimeRangeEndTime(original["end_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["endTime"] = transformedEndTime
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineControlConditionsActiveTimeRangeStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsActiveTimeRangeEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlConditionsQueryRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDiscoveryEngineControlBoostActionFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedDataStore, err := expandDiscoveryEngineControlBoostActionDataStore(original["data_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStore"] = transformedDataStore
	}

	transformedFixedBoost, err := expandDiscoveryEngineControlBoostActionFixedBoost(original["fixed_boost"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFixedBoost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fixedBoost"] = transformedFixedBoost
	}

	transformedInterpolationBoostSpec, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpec(original["interpolation_boost_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterpolationBoostSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interpolationBoostSpec"] = transformedInterpolationBoostSpec
	}

	return transformed, nil
}

func expandDiscoveryEngineControlBoostActionFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionFixedBoost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFieldName, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecFieldName(original["field_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFieldName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fieldName"] = transformedFieldName
	}

	transformedAttributeType, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecAttributeType(original["attribute_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttributeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attributeType"] = transformedAttributeType
	}

	transformedInterpolationType, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecInterpolationType(original["interpolation_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterpolationType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interpolationType"] = transformedInterpolationType
	}

	transformedControlPoint, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPoint(original["control_point"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPoint"] = transformedControlPoint
	}

	return transformed, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecFieldName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecAttributeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecInterpolationType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAttributeValue, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointAttributeValue(original["attribute_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttributeValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attributeValue"] = transformedAttributeValue
	}

	transformedBoostAmount, err := expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointBoostAmount(original["boost_amount"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBoostAmount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["boostAmount"] = transformedBoostAmount
	}

	return transformed, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointAttributeValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlBoostActionInterpolationBoostSpecControlPointBoostAmount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlFilterAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDiscoveryEngineControlFilterActionFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedDataStore, err := expandDiscoveryEngineControlFilterActionDataStore(original["data_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStore"] = transformedDataStore
	}

	return transformed, nil
}

func expandDiscoveryEngineControlFilterActionFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlFilterActionDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlRedirectAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRedirectUri, err := expandDiscoveryEngineControlRedirectActionRedirectUri(original["redirect_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedirectUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redirectUri"] = transformedRedirectUri
	}

	return transformed, nil
}

func expandDiscoveryEngineControlRedirectActionRedirectUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlSynonymsAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSynonyms, err := expandDiscoveryEngineControlSynonymsActionSynonyms(original["synonyms"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSynonyms); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["synonyms"] = transformedSynonyms
	}

	return transformed, nil
}

func expandDiscoveryEngineControlSynonymsActionSynonyms(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDataStore, err := expandDiscoveryEngineControlPromoteActionDataStore(original["data_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStore"] = transformedDataStore
	}

	transformedSearchLinkPromotion, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotion(original["search_link_promotion"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSearchLinkPromotion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["searchLinkPromotion"] = transformedSearchLinkPromotion
	}

	return transformed, nil
}

func expandDiscoveryEngineControlPromoteActionDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTitle, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionTitle(original["title"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTitle); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["title"] = transformedTitle
	}

	transformedUri, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedDocument, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDocument(original["document"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocument); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["document"] = transformedDocument
	}

	transformedDescription, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedImageUri, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	transformedEnabled, err := expandDiscoveryEngineControlPromoteActionSearchLinkPromotionEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionTitle(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDocument(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionImageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineControlPromoteActionSearchLinkPromotionEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
