// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflowcx/Generator.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dialogflowcx

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const DialogflowCXGeneratorAssetType string = "{{location}}-dialogflow.googleapis.com/Generator"

func ResourceConverterDialogflowCXGenerator() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DialogflowCXGeneratorAssetType,
		Convert:   GetDialogflowCXGeneratorCaiObject,
	}
}

func GetDialogflowCXGeneratorCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-dialogflow.googleapis.com/{{parent}}/generators/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDialogflowCXGeneratorApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DialogflowCXGeneratorAssetType,
			Resource: &cai.AssetResource{
				Version:              "v3",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-dialogflow/v3/rest",
				DiscoveryName:        "Generator",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDialogflowCXGeneratorApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowCXGeneratorDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	llmModelSettingsProp, err := expandDialogflowCXGeneratorLlmModelSettings(d.Get("llm_model_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("llm_model_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(llmModelSettingsProp)) && (ok || !reflect.DeepEqual(v, llmModelSettingsProp)) {
		obj["llmModelSettings"] = llmModelSettingsProp
	}
	modelParameterProp, err := expandDialogflowCXGeneratorModelParameter(d.Get("model_parameter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("model_parameter"); !tpgresource.IsEmptyValue(reflect.ValueOf(modelParameterProp)) && (ok || !reflect.DeepEqual(v, modelParameterProp)) {
		obj["modelParameter"] = modelParameterProp
	}
	placeholdersProp, err := expandDialogflowCXGeneratorPlaceholders(d.Get("placeholders"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("placeholders"); !tpgresource.IsEmptyValue(reflect.ValueOf(placeholdersProp)) && (ok || !reflect.DeepEqual(v, placeholdersProp)) {
		obj["placeholders"] = placeholdersProp
	}
	promptTextProp, err := expandDialogflowCXGeneratorPromptText(d.Get("prompt_text"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("prompt_text"); !tpgresource.IsEmptyValue(reflect.ValueOf(promptTextProp)) && (ok || !reflect.DeepEqual(v, promptTextProp)) {
		obj["promptText"] = promptTextProp
	}

	return obj, nil
}

func expandDialogflowCXGeneratorDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorLlmModelSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowCXGeneratorLlmModelSettingsModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedPromptText, err := expandDialogflowCXGeneratorLlmModelSettingsPromptText(original["prompt_text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPromptText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["promptText"] = transformedPromptText
	}

	return transformed, nil
}

func expandDialogflowCXGeneratorLlmModelSettingsModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorLlmModelSettingsPromptText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorModelParameter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTemperature, err := expandDialogflowCXGeneratorModelParameterTemperature(original["temperature"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTemperature); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["temperature"] = transformedTemperature
	}

	transformedMaxDecodeSteps, err := expandDialogflowCXGeneratorModelParameterMaxDecodeSteps(original["max_decode_steps"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxDecodeSteps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxDecodeSteps"] = transformedMaxDecodeSteps
	}

	transformedTopP, err := expandDialogflowCXGeneratorModelParameterTopP(original["top_p"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopP); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topP"] = transformedTopP
	}

	transformedTopK, err := expandDialogflowCXGeneratorModelParameterTopK(original["top_k"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopK); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topK"] = transformedTopK
	}

	return transformed, nil
}

func expandDialogflowCXGeneratorModelParameterTemperature(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorModelParameterMaxDecodeSteps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorModelParameterTopP(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorModelParameterTopK(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorPlaceholders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandDialogflowCXGeneratorPlaceholdersId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedName, err := expandDialogflowCXGeneratorPlaceholdersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXGeneratorPlaceholdersId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorPlaceholdersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGeneratorPromptText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedText, err := expandDialogflowCXGeneratorPromptTextText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	return transformed, nil
}

func expandDialogflowCXGeneratorPromptTextText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
