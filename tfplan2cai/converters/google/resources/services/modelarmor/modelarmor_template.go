// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/modelarmor/Template.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package modelarmor

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ModelArmorTemplateAssetType string = "modelarmor.googleapis.com/Template"

func ResourceConverterModelArmorTemplate() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ModelArmorTemplateAssetType,
		Convert:   GetModelArmorTemplateCaiObject,
	}
}

func GetModelArmorTemplateCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//modelarmor.googleapis.com/projects/{{project}}/locations/{{location}}/templates/{{template_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetModelArmorTemplateApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ModelArmorTemplateAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/modelarmor/v1beta/rest",
				DiscoveryName:        "Template",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetModelArmorTemplateApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	filterConfigProp, err := expandModelArmorTemplateFilterConfig(d.Get("filter_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter_config"); ok || !reflect.DeepEqual(v, filterConfigProp) {
		obj["filterConfig"] = filterConfigProp
	}
	templateMetadataProp, err := expandModelArmorTemplateTemplateMetadata(d.Get("template_metadata"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("template_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(templateMetadataProp)) && (ok || !reflect.DeepEqual(v, templateMetadataProp)) {
		obj["templateMetadata"] = templateMetadataProp
	}
	labelsProp, err := expandModelArmorTemplateEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandModelArmorTemplateFilterConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaliciousUriFilterSettings, err := expandModelArmorTemplateFilterConfigMaliciousUriFilterSettings(original["malicious_uri_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaliciousUriFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maliciousUriFilterSettings"] = transformedMaliciousUriFilterSettings
	}

	transformedRaiSettings, err := expandModelArmorTemplateFilterConfigRaiSettings(original["rai_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiSettings"] = transformedRaiSettings
	}

	transformedSdpSettings, err := expandModelArmorTemplateFilterConfigSdpSettings(original["sdp_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSdpSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sdpSettings"] = transformedSdpSettings
	}

	transformedPiAndJailbreakFilterSettings, err := expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettings(original["pi_and_jailbreak_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPiAndJailbreakFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["piAndJailbreakFilterSettings"] = transformedPiAndJailbreakFilterSettings
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigMaliciousUriFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorTemplateFilterConfigMaliciousUriFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigMaliciousUriFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigRaiSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRaiFilters, err := expandModelArmorTemplateFilterConfigRaiSettingsRaiFilters(original["rai_filters"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiFilters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiFilters"] = transformedRaiFilters
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigRaiSettingsRaiFilters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFilterType, err := expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersFilterType(original["filter_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFilterType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["filterType"] = transformedFilterType
		}

		transformedConfidenceLevel, err := expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersConfidenceLevel(original["confidence_level"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["confidenceLevel"] = transformedConfidenceLevel
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersFilterType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigRaiSettingsRaiFiltersConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigSdpSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdvancedConfig, err := expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfig(original["advanced_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdvancedConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["advancedConfig"] = transformedAdvancedConfig
	}

	transformedBasicConfig, err := expandModelArmorTemplateFilterConfigSdpSettingsBasicConfig(original["basic_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBasicConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["basicConfig"] = transformedBasicConfig
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInspectTemplate, err := expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigInspectTemplate(original["inspect_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplate"] = transformedInspectTemplate
	}

	transformedDeidentifyTemplate, err := expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(original["deidentify_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeidentifyTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deidentifyTemplate"] = transformedDeidentifyTemplate
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigInspectTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsBasicConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorTemplateFilterConfigSdpSettingsBasicConfigFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigSdpSettingsBasicConfigFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	transformedConfidenceLevel, err := expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(original["confidence_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceLevel"] = transformedConfidenceLevel
	}

	return transformed, nil
}

func expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLogTemplateOperations, err := expandModelArmorTemplateTemplateMetadataLogTemplateOperations(original["log_template_operations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogTemplateOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["logTemplateOperations"] = transformedLogTemplateOperations
	}

	transformedLogSanitizeOperations, err := expandModelArmorTemplateTemplateMetadataLogSanitizeOperations(original["log_sanitize_operations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogSanitizeOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["logSanitizeOperations"] = transformedLogSanitizeOperations
	}

	transformedMultiLanguageDetection, err := expandModelArmorTemplateTemplateMetadataMultiLanguageDetection(original["multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMultiLanguageDetection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["multiLanguageDetection"] = transformedMultiLanguageDetection
	}

	transformedIgnorePartialInvocationFailures, err := expandModelArmorTemplateTemplateMetadataIgnorePartialInvocationFailures(original["ignore_partial_invocation_failures"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnorePartialInvocationFailures); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignorePartialInvocationFailures"] = transformedIgnorePartialInvocationFailures
	}

	transformedCustomPromptSafetyErrorCode, err := expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorCode(original["custom_prompt_safety_error_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomPromptSafetyErrorCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customPromptSafetyErrorCode"] = transformedCustomPromptSafetyErrorCode
	}

	transformedCustomPromptSafetyErrorMessage, err := expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorMessage(original["custom_prompt_safety_error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomPromptSafetyErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customPromptSafetyErrorMessage"] = transformedCustomPromptSafetyErrorMessage
	}

	transformedCustomLlmResponseSafetyErrorCode, err := expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorCode(original["custom_llm_response_safety_error_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomLlmResponseSafetyErrorCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customLlmResponseSafetyErrorCode"] = transformedCustomLlmResponseSafetyErrorCode
	}

	transformedCustomLlmResponseSafetyErrorMessage, err := expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorMessage(original["custom_llm_response_safety_error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomLlmResponseSafetyErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customLlmResponseSafetyErrorMessage"] = transformedCustomLlmResponseSafetyErrorMessage
	}

	transformedEnforcementType, err := expandModelArmorTemplateTemplateMetadataEnforcementType(original["enforcement_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnforcementType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enforcementType"] = transformedEnforcementType
	}

	return transformed, nil
}

func expandModelArmorTemplateTemplateMetadataLogTemplateOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataLogSanitizeOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableMultiLanguageDetection, err := expandModelArmorTemplateTemplateMetadataMultiLanguageDetectionEnableMultiLanguageDetection(original["enable_multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableMultiLanguageDetection"] = transformedEnableMultiLanguageDetection
	}

	return transformed, nil
}

func expandModelArmorTemplateTemplateMetadataMultiLanguageDetectionEnableMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataIgnorePartialInvocationFailures(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomPromptSafetyErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataCustomLlmResponseSafetyErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateTemplateMetadataEnforcementType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorTemplateEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
