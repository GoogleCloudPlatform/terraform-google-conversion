// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Domain.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package firebaseapphosting

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const FirebaseAppHostingDomainAssetType string = "firebaseapphosting.googleapis.com/Domain"

func ResourceConverterFirebaseAppHostingDomain() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: FirebaseAppHostingDomainAssetType,
		Convert:   GetFirebaseAppHostingDomainCaiObject,
	}
}

func GetFirebaseAppHostingDomainCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//firebaseapphosting.googleapis.com/projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetFirebaseAppHostingDomainApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: FirebaseAppHostingDomainAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/firebaseapphosting/v1beta/rest",
				DiscoveryName:        "Domain",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetFirebaseAppHostingDomainApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	serveProp, err := expandFirebaseAppHostingDomainServe(d.Get("serve"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("serve"); !tpgresource.IsEmptyValue(reflect.ValueOf(serveProp)) && (ok || !reflect.DeepEqual(v, serveProp)) {
		obj["serve"] = serveProp
	}

	return obj, nil
}

func expandFirebaseAppHostingDomainServe(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRedirect, err := expandFirebaseAppHostingDomainServeRedirect(original["redirect"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedirect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redirect"] = transformedRedirect
	}

	return transformed, nil
}

func expandFirebaseAppHostingDomainServeRedirect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandFirebaseAppHostingDomainServeRedirectUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedStatus, err := expandFirebaseAppHostingDomainServeRedirectStatus(original["status"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["status"] = transformedStatus
	}

	return transformed, nil
}

func expandFirebaseAppHostingDomainServeRedirectUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingDomainServeRedirectStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
