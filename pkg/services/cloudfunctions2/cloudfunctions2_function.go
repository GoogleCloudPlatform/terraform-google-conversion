// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudfunctions2/Function.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudfunctions2

import (
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

const Cloudfunctions2FunctionAssetType string = "cloudfunctions.googleapis.com/Function"

const Cloudfunctions2functionSchemaName string = "google_cloudfunctions2_function"

// Suppress diffs for the system environment variables
func environmentVariablesDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	if k == "service_config.0.environment_variables.LOG_EXECUTION_ID" && new == "" {
		return true
	}

	// Let diff be determined by environment_variables (above)
	if strings.HasPrefix(k, "service_config.0.environment_variables.%") {
		return true
	}

	// For other keys, don't suppress diff.
	return false
}

func ResourceCloudfunctions2function() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of this cloud function.`,
			},
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `A user-defined name of the function. Function names must
be unique globally and match pattern 'projects/*/locations/*/functions/*'.`,
			},
			"build_config": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Describes the Build step of the function that builds a container
from the given source.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"automatic_update_policy": {
							Type:     schema.TypeList,
							Computed: true,
							Optional: true,
							Description: `Security patches are applied automatically to the runtime without requiring
the function to be redeployed.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							ExactlyOneOf: []string{},
						},
						"docker_repository": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `User managed repository created in Artifact Registry optionally with a customer managed encryption key.`,
						},
						"entry_point": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The name of the function (as defined in source code) that will be executed.
Defaults to the resource name suffix, if not specified. For backward
compatibility, if function with given name is not found, then the system
will try to use function named "function". For Node.js this is name of a
function exported by the module specified in source_location.`,
						},
						"environment_variables": {
							Type:        schema.TypeMap,
							Computed:    true,
							Optional:    true,
							Description: `User-provided build-time environment variables for the function.`,
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"on_deploy_update_policy": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Security patches are only applied when a function is redeployed.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							ExactlyOneOf: []string{},
						},
						"runtime": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The runtime in which to run the function. Required when deploying a new
function, optional when updating an existing function.`,
						},
						"service_account": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `The fully-qualified name of the service account to be used for building the container.`,
						},
						"source": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The location of the function source code.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"repo_source": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `If provided, get the source from this location in a Cloud Source Repository.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"branch_name": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `Regex matching branches to build.`,
													ExactlyOneOf: []string{},
												},
												"commit_sha": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `Regex matching tags to build.`,
													ExactlyOneOf: []string{},
												},
												"dir": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Directory, relative to the source root, in which to run the build.`,
												},
												"invert_regex": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Only trigger a build if the revision regex does
NOT match the revision regex.`,
												},
												"project_id": {
													Type:     schema.TypeString,
													Optional: true,
													ForceNew: true,
													Description: `ID of the project that owns the Cloud Source Repository. If omitted, the
project ID requesting the build is assumed.`,
												},
												"repo_name": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Name of the Cloud Source Repository.`,
												},
												"tag_name": {
													Type:         schema.TypeString,
													Optional:     true,
													Description:  `Regex matching tags to build.`,
													ExactlyOneOf: []string{},
												},
											},
										},
										ExactlyOneOf: []string{},
									},
									"storage_source": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `If provided, get the source from this location in Google Cloud Storage.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"bucket": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Google Cloud Storage bucket containing the source`,
												},
												"generation": {
													Type:     schema.TypeInt,
													Computed: true,
													Optional: true,
													Description: `Google Cloud Storage generation for the object. If the generation
is omitted, the latest generation will be used.`,
												},
												"object": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Google Cloud Storage object containing the source.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
								},
							},
						},
						"worker_pool": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Name of the Cloud Build Custom Worker Pool that should be used to build the function.`,
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-provided description of a function.`,
			},
			"event_trigger": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `An Eventarc trigger managed by Google Cloud Functions that fires events in
response to a condition in another service.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"event_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The type of event to observe.`,
						},
						"event_filters": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: `Criteria used to filter events.`,
							Elem:        cloudfunctions2functionEventTriggerEventFiltersSchema(),
							// Default schema.HashSchema is used.
						},
						"pubsub_topic": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `The name of a Pub/Sub topic in the same project that will be used
as the transport topic for the event delivery.`,
						},
						"retry_policy": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"RETRY_POLICY_UNSPECIFIED", "RETRY_POLICY_DO_NOT_RETRY", "RETRY_POLICY_RETRY", ""}),
							Description: `Describes the retry policy in case of function's execution failure.
Retried execution is charged as any other execution. Possible values: ["RETRY_POLICY_UNSPECIFIED", "RETRY_POLICY_DO_NOT_RETRY", "RETRY_POLICY_RETRY"]`,
						},
						"service_account_email": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `Optional. The email of the trigger's service account. The service account
must have permission to invoke Cloud Run services. If empty, defaults to the
Compute Engine default service account: {project_number}-compute@developer.gserviceaccount.com.`,
						},
						"trigger_region": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `The region that the trigger will be in. The trigger will only receive
events originating in this region. It can be the same
region as the function, a different region or multi-region, or the global
region. If not provided, defaults to the same region as the function.`,
						},
					},
				},
			},
			"kms_key_name": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `A set of key/value label pairs associated with this Cloud Function.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"service_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Describes the Service being deployed.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"all_traffic_on_latest_revision": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether 100% of traffic is routed to the latest revision. Defaults to true.`,
							Default:     true,
						},
						"available_cpu": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `The number of CPUs used in a single container instance. Default value is calculated from available memory.`,
						},
						"available_memory": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `The amount of memory available for a function.
Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
supplied the value is interpreted as bytes.`,
						},
						"binary_authorization_policy": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The binary authorization policy to be checked when deploying the Cloud Run service.`,
						},
						"environment_variables": {
							Type:             schema.TypeMap,
							Computed:         true,
							Optional:         true,
							DiffSuppressFunc: environmentVariablesDiffSuppress,
							Description:      `Environment variables that shall be available during function execution.`,
							Elem:             &schema.Schema{Type: schema.TypeString},
						},
						"ingress_settings": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"ALLOW_ALL", "ALLOW_INTERNAL_ONLY", "ALLOW_INTERNAL_AND_GCLB", ""}),
							Description:  `Available ingress settings. Defaults to "ALLOW_ALL" if unspecified. Default value: "ALLOW_ALL" Possible values: ["ALLOW_ALL", "ALLOW_INTERNAL_ONLY", "ALLOW_INTERNAL_AND_GCLB"]`,
							Default:      "ALLOW_ALL",
						},
						"max_instance_count": {
							Type:     schema.TypeInt,
							Computed: true,
							Optional: true,
							Description: `The limit on the maximum number of function instances that may coexist at a
given time.`,
						},
						"max_instance_request_concurrency": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							Description: `Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.`,
						},
						"min_instance_count": {
							Type:     schema.TypeInt,
							Optional: true,
							Description: `The limit on the minimum number of function instances that may coexist at a
given time.`,
						},
						"secret_environment_variables": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Secret environment variables configuration.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Name of the environment variable.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.`,
									},
									"secret": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Name of the secret in secret manager (not the full resource name).`,
									},
									"version": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.`,
									},
								},
							},
						},
						"secret_volumes": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Secret volumes configuration.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"mount_path": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The path within the container to mount the secret volume. For example, setting the mountPath as /etc/secrets would mount the secret value files under the /etc/secrets directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.`,
									},
									"secret": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Name of the secret in secret manager (not the full resource name).`,
									},
									"versions": {
										Type:        schema.TypeList,
										Computed:    true,
										Optional:    true,
										Description: `List of secret versions to mount for this secret. If empty, the latest version of the secret will be made available in a file named after the secret under the mount point.'`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"path": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as '/etc/secrets' and path as secret_foo would mount the secret value file at /etc/secrets/secret_foo.`,
												},
												"version": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.`,
												},
											},
										},
									},
								},
							},
						},
						"service_account_email": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `The email of the service account for this function.`,
						},
						"timeout_seconds": {
							Type:     schema.TypeInt,
							Computed: true,
							Optional: true,
							Description: `The function execution timeout. Execution is considered failed and
can be terminated if the function is not completed at the end of the
timeout period. Defaults to 60 seconds.`,
						},
						"vpc_connector": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The Serverless VPC Access connector that this cloud function can connect to.`,
						},
						"vpc_connector_egress_settings": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED", "PRIVATE_RANGES_ONLY", "ALL_TRAFFIC", ""}),
							Description:  `Available egress settings. Possible values: ["VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED", "PRIVATE_RANGES_ONLY", "ALL_TRAFFIC"]`,
						},
					},
				},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"environment": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The environment the function is hosted on.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Describes the current state of the function.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The last update timestamp of a Cloud Function.`,
			},
			"url": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The deployed url for the function.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func cloudfunctions2functionEventTriggerEventFiltersSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"attribute": {
				Type:     schema.TypeString,
				Required: true,
				Description: `'Required. The name of a CloudEvents attribute.
Currently, only a subset of attributes are supported for filtering. Use the 'gcloud eventarc providers describe' command to learn more about events and their attributes.
Do not filter for the 'type' attribute here, as this is already achieved by the resource's 'event_type' attribute.`,
			},
			"value": {
				Type:     schema.TypeString,
				Required: true,
				Description: `Required. The value for the attribute.
If the operator field is set as 'match-path-pattern', this value can be a path pattern instead of an exact value.`,
			},
			"operator": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Optional. The operator used for matching the events with the value of
the filter. If not specified, only events that have an exact key-value
pair specified in the filter are matched.
The only allowed value is 'match-path-pattern'.
[See documentation on path patterns here](https://cloud.google.com/eventarc/docs/path-patterns)'`,
			},
		},
	}
}
