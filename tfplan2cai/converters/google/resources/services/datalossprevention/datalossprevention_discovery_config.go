// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package datalossprevention

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DataLossPreventionDiscoveryConfigAssetType string = "dlp.googleapis.com/DiscoveryConfig"

func ResourceConverterDataLossPreventionDiscoveryConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DataLossPreventionDiscoveryConfigAssetType,
		Convert:   GetDataLossPreventionDiscoveryConfigCaiObject,
	}
}

func GetDataLossPreventionDiscoveryConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//dlp.googleapis.com/{{parent}}/discoveryConfigs/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDataLossPreventionDiscoveryConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DataLossPreventionDiscoveryConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v2",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/dlp/v2/rest",
				DiscoveryName:        "DiscoveryConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDataLossPreventionDiscoveryConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDataLossPreventionDiscoveryConfigDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	orgConfigProp, err := expandDataLossPreventionDiscoveryConfigOrgConfig(d.Get("org_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("org_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(orgConfigProp)) && (ok || !reflect.DeepEqual(v, orgConfigProp)) {
		obj["orgConfig"] = orgConfigProp
	}
	inspectTemplatesProp, err := expandDataLossPreventionDiscoveryConfigInspectTemplates(d.Get("inspect_templates"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("inspect_templates"); !tpgresource.IsEmptyValue(reflect.ValueOf(inspectTemplatesProp)) && (ok || !reflect.DeepEqual(v, inspectTemplatesProp)) {
		obj["inspectTemplates"] = inspectTemplatesProp
	}
	actionsProp, err := expandDataLossPreventionDiscoveryConfigActions(d.Get("actions"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionsProp)) && (ok || !reflect.DeepEqual(v, actionsProp)) {
		obj["actions"] = actionsProp
	}
	targetsProp, err := expandDataLossPreventionDiscoveryConfigTargets(d.Get("targets"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("targets"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetsProp)) && (ok || !reflect.DeepEqual(v, targetsProp)) {
		obj["targets"] = targetsProp
	}
	statusProp, err := expandDataLossPreventionDiscoveryConfigStatus(d.Get("status"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("status"); !tpgresource.IsEmptyValue(reflect.ValueOf(statusProp)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}

	return resourceDataLossPreventionDiscoveryConfigEncoder(d, config, obj)
}

func resourceDataLossPreventionDiscoveryConfigEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	newObj := make(map[string]interface{})
	newObj["discoveryConfig"] = obj
	return newObj, nil
}

func expandDataLossPreventionDiscoveryConfigDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionDiscoveryConfigOrgConfigProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedLocation, err := expandDataLossPreventionDiscoveryConfigOrgConfigLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOrganizationId, err := expandDataLossPreventionDiscoveryConfigOrgConfigLocationOrganizationId(original["organization_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrganizationId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["organizationId"] = transformedOrganizationId
	}

	transformedFolderId, err := expandDataLossPreventionDiscoveryConfigOrgConfigLocationFolderId(original["folder_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFolderId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["folderId"] = transformedFolderId
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigLocationOrganizationId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigOrgConfigLocationFolderId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigInspectTemplates(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedExportData, err := expandDataLossPreventionDiscoveryConfigActionsExportData(original["export_data"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExportData); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exportData"] = transformedExportData
		}

		transformedPubSubNotification, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotification(original["pub_sub_notification"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPubSubNotification); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["pubSubNotification"] = transformedPubSubNotification
		}

		transformedTagResources, err := expandDataLossPreventionDiscoveryConfigActionsTagResources(original["tag_resources"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTagResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tagResources"] = transformedTagResources
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportData(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProfileTable, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTable(original["profile_table"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfileTable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profileTable"] = transformedProfileTable
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedDatasetId, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableDatasetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsExportDataProfileTableTableId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotification(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedEvent, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationEvent(original["event"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEvent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["event"] = transformedEvent
	}

	transformedPubsubCondition, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubCondition(original["pubsub_condition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPubsubCondition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pubsubCondition"] = transformedPubsubCondition
	}

	transformedDetailOfMessage, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationDetailOfMessage(original["detail_of_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDetailOfMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["detailOfMessage"] = transformedDetailOfMessage
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationEvent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubCondition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpressions, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressions(original["expressions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpressions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expressions"] = transformedExpressions
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLogicalOperator, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsLogicalOperator(original["logical_operator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogicalOperator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["logicalOperator"] = transformedLogicalOperator
	}

	transformedConditions, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsLogicalOperator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedMinimumRiskScore, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumRiskScore(original["minimum_risk_score"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMinimumRiskScore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["minimumRiskScore"] = transformedMinimumRiskScore
		}

		transformedMinimumSensitivityScore, err := expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumSensitivityScore(original["minimum_sensitivity_score"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMinimumSensitivityScore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["minimumSensitivityScore"] = transformedMinimumSensitivityScore
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumRiskScore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsMinimumSensitivityScore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsPubSubNotificationDetailOfMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTagConditions, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditions(original["tag_conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTagConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tagConditions"] = transformedTagConditions
	}

	transformedProfileGenerationsToTag, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesProfileGenerationsToTag(original["profile_generations_to_tag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfileGenerationsToTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profileGenerationsToTag"] = transformedProfileGenerationsToTag
	}

	transformedLowerDataRiskToLow, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesLowerDataRiskToLow(original["lower_data_risk_to_low"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLowerDataRiskToLow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lowerDataRiskToLow"] = transformedLowerDataRiskToLow
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTag, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTag(original["tag"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTag); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tag"] = transformedTag
		}

		transformedSensitivityScore, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScore(original["sensitivity_score"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSensitivityScore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["sensitivityScore"] = transformedSensitivityScore
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNamespacedValue, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagNamespacedValue(original["namespaced_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespacedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespacedValue"] = transformedNamespacedValue
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagNamespacedValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScore, err := expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreScore(original["score"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["score"] = transformedScore
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreScore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesProfileGenerationsToTag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigActionsTagResourcesLowerDataRiskToLow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBigQueryTarget, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTarget(original["big_query_target"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBigQueryTarget); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bigQueryTarget"] = transformedBigQueryTarget
		}

		transformedCloudSqlTarget, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTarget(original["cloud_sql_target"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCloudSqlTarget); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cloudSqlTarget"] = transformedCloudSqlTarget
		}

		transformedSecretsTarget, err := expandDataLossPreventionDiscoveryConfigTargetsSecretsTarget(original["secrets_target"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["secretsTarget"] = transformedSecretsTarget
		}

		transformedCloudStorageTarget, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTarget(original["cloud_storage_target"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCloudStorageTarget); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cloudStorageTarget"] = transformedCloudStorageTarget
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedConditions, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	transformedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadence(original["cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cadence"] = transformedCadence
	}

	transformedDisabled, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["disabled"] = transformedDisabled
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTables, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTables(original["tables"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTables); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tables"] = transformedTables
	}

	transformedOtherTables, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTables(original["other_tables"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["otherTables"] = transformedOtherTables
	}

	transformedTableReference, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReference(original["table_reference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableReference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tableReference"] = transformedTableReference
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTables(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIncludeRegexes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexes(original["include_regexes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludeRegexes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includeRegexes"] = transformedIncludeRegexes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPatterns, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatterns(original["patterns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPatterns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["patterns"] = transformedPatterns
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatterns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedProjectIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsProjectIdRegex(original["project_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProjectIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["projectIdRegex"] = transformedProjectIdRegex
		}

		transformedDatasetIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsDatasetIdRegex(original["dataset_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDatasetIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["datasetIdRegex"] = transformedDatasetIdRegex
		}

		transformedTableIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsTableIdRegex(original["table_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTableIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tableIdRegex"] = transformedTableIdRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsProjectIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsDatasetIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsTableIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTables(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatasetId, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceDatasetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceTableId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCreatedAfter, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsCreatedAfter(original["created_after"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCreatedAfter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["createdAfter"] = transformedCreatedAfter
	}

	transformedOrConditions, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditions(original["or_conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["orConditions"] = transformedOrConditions
	}

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedTypeCollection, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypeCollection(original["type_collection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypeCollection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["typeCollection"] = transformedTypeCollection
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsCreatedAfter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMinAge, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinAge(original["min_age"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinAge); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minAge"] = transformedMinAge
	}

	transformedMinRowCount, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinRowCount(original["min_row_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinRowCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minRowCount"] = transformedMinRowCount
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinAge(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsMinRowCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypeCollection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSchemaModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadence(original["schema_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSchemaModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["schemaModifiedCadence"] = transformedSchemaModifiedCadence
	}

	transformedTableModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadence(original["table_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tableModifiedCadence"] = transformedTableModifiedCadence
	}

	transformedInspectTemplateModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadence(original["inspect_template_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplateModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplateModifiedCadence"] = transformedInspectTemplateModifiedCadence
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedConditions, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	transformedGenerationCadence, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadence(original["generation_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerationCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generationCadence"] = transformedGenerationCadence
	}

	transformedDisabled, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["disabled"] = transformedDisabled
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCollection, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollection(original["collection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCollection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["collection"] = transformedCollection
	}

	transformedOthers, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthers(original["others"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["others"] = transformedOthers
	}

	transformedDatabaseResourceReference, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReference(original["database_resource_reference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseResourceReference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseResourceReference"] = transformedDatabaseResourceReference
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIncludeRegexes, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexes(original["include_regexes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludeRegexes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includeRegexes"] = transformedIncludeRegexes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPatterns, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatterns(original["patterns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPatterns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["patterns"] = transformedPatterns
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatterns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedProjectIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsProjectIdRegex(original["project_id_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProjectIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["projectIdRegex"] = transformedProjectIdRegex
		}

		transformedInstanceRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsInstanceRegex(original["instance_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInstanceRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["instanceRegex"] = transformedInstanceRegex
		}

		transformedDatabaseRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsDatabaseRegex(original["database_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDatabaseRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["databaseRegex"] = transformedDatabaseRegex
		}

		transformedDatabaseResourceNameRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsDatabaseResourceNameRegex(original["database_resource_name_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDatabaseResourceNameRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["databaseResourceNameRegex"] = transformedDatabaseResourceNameRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsProjectIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsInstanceRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsDatabaseRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsDatabaseResourceNameRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedInstance, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceInstance(original["instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instance"] = transformedInstance
	}

	transformedDatabase, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceDatabase(original["database"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["database"] = transformedDatabase
	}

	transformedDatabaseResource, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceDatabaseResource(original["database_resource"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseResource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseResource"] = transformedDatabaseResource
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceInstance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceDatabaseResource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatabaseEngines, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsDatabaseEngines(original["database_engines"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseEngines); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseEngines"] = transformedDatabaseEngines
	}

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsDatabaseEngines(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSchemaModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadence(original["schema_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSchemaModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["schemaModifiedCadence"] = transformedSchemaModifiedCadence
	}

	transformedRefreshFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceRefreshFrequency(original["refresh_frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRefreshFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["refreshFrequency"] = transformedRefreshFrequency
	}

	transformedInspectTemplateModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadence(original["inspect_template_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplateModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplateModifiedCadence"] = transformedInspectTemplateModifiedCadence
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTypes, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceTypes(original["types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["types"] = transformedTypes
	}

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceRefreshFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsSecretsTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilter, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilter(original["filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filter"] = transformedFilter
	}

	transformedConditions, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	transformedGenerationCadence, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadence(original["generation_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerationCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generationCadence"] = transformedGenerationCadence
	}

	transformedDisabled, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["disabled"] = transformedDisabled
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCollection, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollection(original["collection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCollection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["collection"] = transformedCollection
	}

	transformedCloudStorageResourceReference, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReference(original["cloud_storage_resource_reference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudStorageResourceReference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudStorageResourceReference"] = transformedCloudStorageResourceReference
	}

	transformedOthers, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthers(original["others"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["others"] = transformedOthers
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIncludeRegexes, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexes(original["include_regexes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludeRegexes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includeRegexes"] = transformedIncludeRegexes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPatterns, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatterns(original["patterns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPatterns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["patterns"] = transformedPatterns
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatterns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCloudStorageRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegex(original["cloud_storage_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCloudStorageRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cloudStorageRegex"] = transformedCloudStorageRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectIdRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexProjectIdRegex(original["project_id_regex"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectIdRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectIdRegex"] = transformedProjectIdRegex
	}

	transformedBucketNameRegex, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexBucketNameRegex(original["bucket_name_regex"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBucketNameRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bucketNameRegex"] = transformedBucketNameRegex
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexProjectIdRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexBucketNameRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBucketName, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceBucketName(original["bucket_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBucketName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bucketName"] = transformedBucketName
	}

	transformedProjectId, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceBucketName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCreatedAfter, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCreatedAfter(original["created_after"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCreatedAfter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["createdAfter"] = transformedCreatedAfter
	}

	transformedMinAge, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsMinAge(original["min_age"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinAge); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minAge"] = transformedMinAge
	}

	transformedCloudStorageConditions, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditions(original["cloud_storage_conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudStorageConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudStorageConditions"] = transformedCloudStorageConditions
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCreatedAfter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsMinAge(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIncludedObjectAttributes, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsIncludedObjectAttributes(original["included_object_attributes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedObjectAttributes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedObjectAttributes"] = transformedIncludedObjectAttributes
	}

	transformedIncludedBucketAttributes, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsIncludedBucketAttributes(original["included_bucket_attributes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedBucketAttributes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedBucketAttributes"] = transformedIncludedBucketAttributes
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsIncludedObjectAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsIncludedBucketAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRefreshFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceRefreshFrequency(original["refresh_frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRefreshFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["refreshFrequency"] = transformedRefreshFrequency
	}

	transformedInspectTemplateModifiedCadence, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence(original["inspect_template_modified_cadence"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplateModifiedCadence); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplateModifiedCadence"] = transformedInspectTemplateModifiedCadence
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceRefreshFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadence(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFrequency, err := expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceFrequency(original["frequency"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrequency); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frequency"] = transformedFrequency
	}

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceFrequency(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionDiscoveryConfigStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
