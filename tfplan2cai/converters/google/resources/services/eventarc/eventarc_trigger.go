// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/eventarc/Trigger.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package eventarc

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const EventarcTriggerAssetType string = "eventarc.googleapis.com/Trigger"

func ResourceConverterEventarcTrigger() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: EventarcTriggerAssetType,
		Convert:   GetEventarcTriggerCaiObject,
	}
}

func GetEventarcTriggerCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//eventarc.googleapis.com/projects/{{project}}/locations/{{location}}/triggers/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetEventarcTriggerApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: EventarcTriggerAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/eventarc/v1/rest",
				DiscoveryName:        "Trigger",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetEventarcTriggerApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandEventarcTriggerName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	eventFiltersProp, err := expandEventarcTriggerMatchingCriteria(d.Get("matching_criteria"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("matching_criteria"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventFiltersProp)) && (ok || !reflect.DeepEqual(v, eventFiltersProp)) {
		obj["eventFilters"] = eventFiltersProp
	}
	serviceAccountProp, err := expandEventarcTriggerServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceAccountProp)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}
	destinationProp, err := expandEventarcTriggerDestination(d.Get("destination"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("destination"); !tpgresource.IsEmptyValue(reflect.ValueOf(destinationProp)) && (ok || !reflect.DeepEqual(v, destinationProp)) {
		obj["destination"] = destinationProp
	}
	transportProp, err := expandEventarcTriggerTransport(d.Get("transport"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("transport"); !tpgresource.IsEmptyValue(reflect.ValueOf(transportProp)) && (ok || !reflect.DeepEqual(v, transportProp)) {
		obj["transport"] = transportProp
	}
	channelProp, err := expandEventarcTriggerChannel(d.Get("channel"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("channel"); !tpgresource.IsEmptyValue(reflect.ValueOf(channelProp)) && (ok || !reflect.DeepEqual(v, channelProp)) {
		obj["channel"] = channelProp
	}
	eventDataContentTypeProp, err := expandEventarcTriggerEventDataContentType(d.Get("event_data_content_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("event_data_content_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventDataContentTypeProp)) && (ok || !reflect.DeepEqual(v, eventDataContentTypeProp)) {
		obj["eventDataContentType"] = eventDataContentTypeProp
	}
	labelsProp, err := expandEventarcTriggerEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandEventarcTriggerName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return expandToRegionalLongForm("projects/%s/locations/%s/triggers/%s", v, d, config)
}

func expandEventarcTriggerMatchingCriteria(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAttribute, err := expandEventarcTriggerMatchingCriteriaAttribute(original["attribute"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttribute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attribute"] = transformedAttribute
		}

		transformedValue, err := expandEventarcTriggerMatchingCriteriaValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedOperator, err := expandEventarcTriggerMatchingCriteriaOperator(original["operator"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOperator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["operator"] = transformedOperator
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandEventarcTriggerMatchingCriteriaAttribute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerMatchingCriteriaValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerMatchingCriteriaOperator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCloudRunService, err := expandEventarcTriggerDestinationCloudRunService(original["cloud_run_service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudRunService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudRun"] = transformedCloudRunService
	}

	transformedCloudFunction, err := expandEventarcTriggerDestinationCloudFunction(original["cloud_function"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudFunction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudFunction"] = transformedCloudFunction
	}

	transformedGke, err := expandEventarcTriggerDestinationGke(original["gke"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGke); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gke"] = transformedGke
	}

	transformedWorkflow, err := expandEventarcTriggerDestinationWorkflow(original["workflow"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkflow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["workflow"] = transformedWorkflow
	}

	transformedHttpEndpoint, err := expandEventarcTriggerDestinationHttpEndpoint(original["http_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpEndpoint"] = transformedHttpEndpoint
	}

	transformedNetworkConfig, err := expandEventarcTriggerDestinationNetworkConfig(original["network_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkConfig"] = transformedNetworkConfig
	}

	return transformed, nil
}

func expandEventarcTriggerDestinationCloudRunService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedService, err := expandEventarcTriggerDestinationCloudRunServiceService(original["service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["service"] = transformedService
	}

	transformedPath, err := expandEventarcTriggerDestinationCloudRunServicePath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	transformedRegion, err := expandEventarcTriggerDestinationCloudRunServiceRegion(original["region"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["region"] = transformedRegion
	}

	return transformed, nil
}

func expandEventarcTriggerDestinationCloudRunServiceService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationCloudRunServicePath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationCloudRunServiceRegion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationCloudFunction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationGke(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCluster, err := expandEventarcTriggerDestinationGkeCluster(original["cluster"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCluster); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cluster"] = transformedCluster
	}

	transformedLocation, err := expandEventarcTriggerDestinationGkeLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	transformedNamespace, err := expandEventarcTriggerDestinationGkeNamespace(original["namespace"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespace); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespace"] = transformedNamespace
	}

	transformedService, err := expandEventarcTriggerDestinationGkeService(original["service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["service"] = transformedService
	}

	transformedPath, err := expandEventarcTriggerDestinationGkePath(original["path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["path"] = transformedPath
	}

	return transformed, nil
}

func expandEventarcTriggerDestinationGkeCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationGkeLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationGkeNamespace(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationGkeService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationGkePath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationWorkflow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return expandToRegionalLongForm("projects/%s/locations/%s/workflows/%s", v, d, config)
}

func expandEventarcTriggerDestinationHttpEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandEventarcTriggerDestinationHttpEndpointUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandEventarcTriggerDestinationHttpEndpointUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerDestinationNetworkConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNetworkAttachment, err := expandEventarcTriggerDestinationNetworkConfigNetworkAttachment(original["network_attachment"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkAttachment"] = transformedNetworkAttachment
	}

	return transformed, nil
}

func expandEventarcTriggerDestinationNetworkConfigNetworkAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerTransport(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPubsub, err := expandEventarcTriggerTransportPubsub(original["pubsub"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPubsub); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pubsub"] = transformedPubsub
	}

	return transformed, nil
}

func expandEventarcTriggerTransportPubsub(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandEventarcTriggerTransportPubsubTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedSubscription, err := expandEventarcTriggerTransportPubsubSubscription(original["subscription"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubscription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subscription"] = transformedSubscription
	}

	return transformed, nil
}

func expandEventarcTriggerTransportPubsubTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return expandToLongForm("projects/%s/topics/%s", v, d, config)
}

func expandEventarcTriggerTransportPubsubSubscription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerChannel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerEventDataContentType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandEventarcTriggerEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
