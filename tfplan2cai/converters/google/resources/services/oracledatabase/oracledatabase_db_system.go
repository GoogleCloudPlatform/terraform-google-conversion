// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/oracledatabase/DbSystem.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package oracledatabase

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const OracleDatabaseDbSystemAssetType string = "oracledatabase.googleapis.com/DbSystem"

func ResourceConverterOracleDatabaseDbSystem() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: OracleDatabaseDbSystemAssetType,
		Convert:   GetOracleDatabaseDbSystemCaiObject,
	}
}

func GetOracleDatabaseDbSystemCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//oracledatabase.googleapis.com/projects/{{project}}/locations/{{location}}/dbSystems/{{db_system_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetOracleDatabaseDbSystemApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: OracleDatabaseDbSystemAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/oracledatabase/v1/rest",
				DiscoveryName:        "DbSystem",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetOracleDatabaseDbSystemApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandOracleDatabaseDbSystemDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	gcpOracleZoneProp, err := expandOracleDatabaseDbSystemGcpOracleZone(d.Get("gcp_oracle_zone"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("gcp_oracle_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcpOracleZoneProp)) && (ok || !reflect.DeepEqual(v, gcpOracleZoneProp)) {
		obj["gcpOracleZone"] = gcpOracleZoneProp
	}
	odbNetworkProp, err := expandOracleDatabaseDbSystemOdbNetwork(d.Get("odb_network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("odb_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(odbNetworkProp)) && (ok || !reflect.DeepEqual(v, odbNetworkProp)) {
		obj["odbNetwork"] = odbNetworkProp
	}
	odbSubnetProp, err := expandOracleDatabaseDbSystemOdbSubnet(d.Get("odb_subnet"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("odb_subnet"); !tpgresource.IsEmptyValue(reflect.ValueOf(odbSubnetProp)) && (ok || !reflect.DeepEqual(v, odbSubnetProp)) {
		obj["odbSubnet"] = odbSubnetProp
	}
	propertiesProp, err := expandOracleDatabaseDbSystemProperties(d.Get("properties"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(propertiesProp)) && (ok || !reflect.DeepEqual(v, propertiesProp)) {
		obj["properties"] = propertiesProp
	}
	effectiveLabelsProp, err := expandOracleDatabaseDbSystemEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandOracleDatabaseDbSystemDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemGcpOracleZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemOdbNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemOdbSubnet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedComputeCount, err := expandOracleDatabaseDbSystemPropertiesComputeCount(original["compute_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeCount"] = transformedComputeCount
	}

	transformedComputeModel, err := expandOracleDatabaseDbSystemPropertiesComputeModel(original["compute_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeModel"] = transformedComputeModel
	}

	transformedDataCollectionOptions, err := expandOracleDatabaseDbSystemPropertiesDataCollectionOptions(original["data_collection_options"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataCollectionOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataCollectionOptions"] = transformedDataCollectionOptions
	}

	transformedDataStorageSizeGb, err := expandOracleDatabaseDbSystemPropertiesDataStorageSizeGb(original["data_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeGb"] = transformedDataStorageSizeGb
	}

	transformedDatabaseEdition, err := expandOracleDatabaseDbSystemPropertiesDatabaseEdition(original["database_edition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseEdition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseEdition"] = transformedDatabaseEdition
	}

	transformedDbHome, err := expandOracleDatabaseDbSystemPropertiesDbHome(original["db_home"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbHome); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbHome"] = transformedDbHome
	}

	transformedDbSystemOptions, err := expandOracleDatabaseDbSystemPropertiesDbSystemOptions(original["db_system_options"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbSystemOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbSystemOptions"] = transformedDbSystemOptions
	}

	transformedDomain, err := expandOracleDatabaseDbSystemPropertiesDomain(original["domain"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDomain); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["domain"] = transformedDomain
	}

	transformedHostname, err := expandOracleDatabaseDbSystemPropertiesHostname(original["hostname"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostname); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostname"] = transformedHostname
	}

	transformedHostnamePrefix, err := expandOracleDatabaseDbSystemPropertiesHostnamePrefix(original["hostname_prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostnamePrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostnamePrefix"] = transformedHostnamePrefix
	}

	transformedInitialDataStorageSizeGb, err := expandOracleDatabaseDbSystemPropertiesInitialDataStorageSizeGb(original["initial_data_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInitialDataStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["initialDataStorageSizeGb"] = transformedInitialDataStorageSizeGb
	}

	transformedLicenseModel, err := expandOracleDatabaseDbSystemPropertiesLicenseModel(original["license_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLicenseModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["licenseModel"] = transformedLicenseModel
	}

	transformedLifecycleState, err := expandOracleDatabaseDbSystemPropertiesLifecycleState(original["lifecycle_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLifecycleState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lifecycleState"] = transformedLifecycleState
	}

	transformedMemorySizeGb, err := expandOracleDatabaseDbSystemPropertiesMemorySizeGb(original["memory_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemorySizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memorySizeGb"] = transformedMemorySizeGb
	}

	transformedNodeCount, err := expandOracleDatabaseDbSystemPropertiesNodeCount(original["node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeCount"] = transformedNodeCount
	}

	transformedOcid, err := expandOracleDatabaseDbSystemPropertiesOcid(original["ocid"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOcid); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ocid"] = transformedOcid
	}

	transformedPrivateIp, err := expandOracleDatabaseDbSystemPropertiesPrivateIp(original["private_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateIp"] = transformedPrivateIp
	}

	transformedRecoStorageSizeGb, err := expandOracleDatabaseDbSystemPropertiesRecoStorageSizeGb(original["reco_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecoStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recoStorageSizeGb"] = transformedRecoStorageSizeGb
	}

	transformedShape, err := expandOracleDatabaseDbSystemPropertiesShape(original["shape"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedShape); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["shape"] = transformedShape
	}

	transformedSshPublicKeys, err := expandOracleDatabaseDbSystemPropertiesSshPublicKeys(original["ssh_public_keys"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshPublicKeys); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshPublicKeys"] = transformedSshPublicKeys
	}

	transformedTimeZone, err := expandOracleDatabaseDbSystemPropertiesTimeZone(original["time_zone"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeZone"] = transformedTimeZone
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesComputeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesComputeModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDataCollectionOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIsDiagnosticsEventsEnabled, err := expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsDiagnosticsEventsEnabled(original["is_diagnostics_events_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsDiagnosticsEventsEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isDiagnosticsEventsEnabled"] = transformedIsDiagnosticsEventsEnabled
	}

	transformedIsIncidentLogsEnabled, err := expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsIncidentLogsEnabled(original["is_incident_logs_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsIncidentLogsEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isIncidentLogsEnabled"] = transformedIsIncidentLogsEnabled
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsDiagnosticsEventsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDataCollectionOptionsIsIncidentLogsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDataStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDatabaseEdition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHome(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatabase, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabase(original["database"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["database"] = transformedDatabase
	}

	transformedDbVersion, err := expandOracleDatabaseDbSystemPropertiesDbHomeDbVersion(original["db_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbVersion"] = transformedDbVersion
	}

	transformedDisplayName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDisplayName(original["display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["displayName"] = transformedDisplayName
	}

	transformedIsUnifiedAuditingEnabled, err := expandOracleDatabaseDbSystemPropertiesDbHomeIsUnifiedAuditingEnabled(original["is_unified_auditing_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsUnifiedAuditingEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isUnifiedAuditingEnabled"] = transformedIsUnifiedAuditingEnabled
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdminPassword, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseAdminPassword(original["admin_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminPassword"] = transformedAdminPassword
	}

	transformedCharacterSet, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCharacterSet(original["character_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["characterSet"] = transformedCharacterSet
	}

	transformedCreateTime, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCreateTime(original["create_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCreateTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["createTime"] = transformedCreateTime
	}

	transformedDatabaseId, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDatabaseId(original["database_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseId"] = transformedDatabaseId
	}

	transformedDbHomeName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbHomeName(original["db_home_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbHomeName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbHomeName"] = transformedDbHomeName
	}

	transformedDbName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbName(original["db_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbName"] = transformedDbName
	}

	transformedDbUniqueName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbUniqueName(original["db_unique_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbUniqueName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbUniqueName"] = transformedDbUniqueName
	}

	transformedGcpOracleZone, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseGcpOracleZone(original["gcp_oracle_zone"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcpOracleZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcpOracleZone"] = transformedGcpOracleZone
	}

	transformedName, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedNcharacterSet, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseNcharacterSet(original["ncharacter_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNcharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ncharacterSet"] = transformedNcharacterSet
	}

	transformedOciUrl, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOciUrl(original["oci_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOciUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ociUrl"] = transformedOciUrl
	}

	transformedOpsInsightsStatus, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOpsInsightsStatus(original["ops_insights_status"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOpsInsightsStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["opsInsightsStatus"] = transformedOpsInsightsStatus
	}

	transformedProperties, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseProperties(original["properties"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProperties); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["properties"] = transformedProperties
	}

	transformedTdeWalletPassword, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseTdeWalletPassword(original["tde_wallet_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTdeWalletPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tdeWalletPassword"] = transformedTdeWalletPassword
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseAdminPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseCreateTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDatabaseId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbHomeName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseDbUniqueName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseGcpOracleZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseNcharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOciUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseOpsInsightsStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatabaseManagementConfig, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfig(original["database_management_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseManagementConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseManagementConfig"] = transformedDatabaseManagementConfig
	}

	transformedDbBackupConfig, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfig(original["db_backup_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbBackupConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbBackupConfig"] = transformedDbBackupConfig
	}

	transformedDbVersion, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbVersion(original["db_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbVersion"] = transformedDbVersion
	}

	transformedState, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedManagementState, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementState(original["management_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManagementState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["managementState"] = transformedManagementState
	}

	transformedManagementType, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementType(original["management_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManagementType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["managementType"] = transformedManagementType
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDatabaseManagementConfigManagementType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAutoBackupEnabled, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoBackupEnabled(original["auto_backup_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoBackupEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoBackupEnabled"] = transformedAutoBackupEnabled
	}

	transformedAutoFullBackupDay, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupDay(original["auto_full_backup_day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoFullBackupDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoFullBackupDay"] = transformedAutoFullBackupDay
	}

	transformedAutoFullBackupWindow, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupWindow(original["auto_full_backup_window"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoFullBackupWindow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoFullBackupWindow"] = transformedAutoFullBackupWindow
	}

	transformedAutoIncrementalBackupWindow, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoIncrementalBackupWindow(original["auto_incremental_backup_window"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoIncrementalBackupWindow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoIncrementalBackupWindow"] = transformedAutoIncrementalBackupWindow
	}

	transformedBackupDeletionPolicy, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDeletionPolicy(original["backup_deletion_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupDeletionPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupDeletionPolicy"] = transformedBackupDeletionPolicy
	}

	transformedBackupDestinationDetails, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetails(original["backup_destination_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupDestinationDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupDestinationDetails"] = transformedBackupDestinationDetails
	}

	transformedRetentionPeriodDays, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigRetentionPeriodDays(original["retention_period_days"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRetentionPeriodDays); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["retentionPeriodDays"] = transformedRetentionPeriodDays
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoBackupEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoFullBackupWindow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigAutoIncrementalBackupWindow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDeletionPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetailsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigBackupDestinationDetailsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbBackupConfigRetentionPeriodDays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesDbVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabasePropertiesState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDatabaseTdeWalletPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDbVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbHomeIsUnifiedAuditingEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDbSystemOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStorageManagement, err := expandOracleDatabaseDbSystemPropertiesDbSystemOptionsStorageManagement(original["storage_management"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageManagement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageManagement"] = transformedStorageManagement
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesDbSystemOptionsStorageManagement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesDomain(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesHostname(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesHostnamePrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesInitialDataStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesLicenseModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesLifecycleState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesMemorySizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesOcid(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesPrivateIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesRecoStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesShape(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesSshPublicKeys(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemPropertiesTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedId, err := expandOracleDatabaseDbSystemPropertiesTimeZoneId(original["id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["id"] = transformedId
	}

	return transformed, nil
}

func expandOracleDatabaseDbSystemPropertiesTimeZoneId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseDbSystemEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
