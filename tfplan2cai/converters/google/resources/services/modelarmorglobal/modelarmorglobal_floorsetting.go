// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/modelarmorglobal/Floorsetting.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package modelarmorglobal

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const ModelArmorGlobalFloorsettingAssetType string = "modelarmor.googleapis.com/Floorsetting"

func ResourceConverterModelArmorGlobalFloorsetting() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ModelArmorGlobalFloorsettingAssetType,
		Convert:   GetModelArmorGlobalFloorsettingCaiObject,
	}
}

func GetModelArmorGlobalFloorsettingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//modelarmor.googleapis.com/{{parent}}/locations/{{location}}/floorSetting")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetModelArmorGlobalFloorsettingApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ModelArmorGlobalFloorsettingAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/modelarmor/v1beta/rest",
				DiscoveryName:        "Floorsetting",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetModelArmorGlobalFloorsettingApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	filterConfigProp, err := expandModelArmorGlobalFloorsettingFilterConfig(d.Get("filter_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter_config"); ok || !reflect.DeepEqual(v, filterConfigProp) {
		obj["filterConfig"] = filterConfigProp
	}
	enableFloorSettingEnforcementProp, err := expandModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(d.Get("enable_floor_setting_enforcement"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("enable_floor_setting_enforcement"); ok || !reflect.DeepEqual(v, enableFloorSettingEnforcementProp) {
		obj["enableFloorSettingEnforcement"] = enableFloorSettingEnforcementProp
	}
	integratedServicesProp, err := expandModelArmorGlobalFloorsettingIntegratedServices(d.Get("integrated_services"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("integrated_services"); !tpgresource.IsEmptyValue(reflect.ValueOf(integratedServicesProp)) && (ok || !reflect.DeepEqual(v, integratedServicesProp)) {
		obj["integratedServices"] = integratedServicesProp
	}
	aiPlatformFloorSettingProp, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSetting(d.Get("ai_platform_floor_setting"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("ai_platform_floor_setting"); !tpgresource.IsEmptyValue(reflect.ValueOf(aiPlatformFloorSettingProp)) && (ok || !reflect.DeepEqual(v, aiPlatformFloorSettingProp)) {
		obj["aiPlatformFloorSetting"] = aiPlatformFloorSettingProp
	}
	floorSettingMetadataProp, err := expandModelArmorGlobalFloorsettingFloorSettingMetadata(d.Get("floor_setting_metadata"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("floor_setting_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(floorSettingMetadataProp)) && (ok || !reflect.DeepEqual(v, floorSettingMetadataProp)) {
		obj["floorSettingMetadata"] = floorSettingMetadataProp
	}

	return obj, nil
}

func expandModelArmorGlobalFloorsettingFilterConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaliciousUriFilterSettings, err := expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettings(original["malicious_uri_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaliciousUriFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maliciousUriFilterSettings"] = transformedMaliciousUriFilterSettings
	}

	transformedRaiSettings, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettings(original["rai_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiSettings"] = transformedRaiSettings
	}

	transformedSdpSettings, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettings(original["sdp_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSdpSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sdpSettings"] = transformedSdpSettings
	}

	transformedPiAndJailbreakFilterSettings, err := expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettings(original["pi_and_jailbreak_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPiAndJailbreakFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["piAndJailbreakFilterSettings"] = transformedPiAndJailbreakFilterSettings
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigMaliciousUriFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRaiFilters, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFilters(original["rai_filters"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRaiFilters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["raiFilters"] = transformedRaiFilters
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFilters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFilterType, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersFilterType(original["filter_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFilterType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["filterType"] = transformedFilterType
		}

		transformedConfidenceLevel, err := expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersConfidenceLevel(original["confidence_level"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["confidenceLevel"] = transformedConfidenceLevel
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersFilterType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigRaiSettingsRaiFiltersConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdvancedConfig, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfig(original["advanced_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdvancedConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["advancedConfig"] = transformedAdvancedConfig
	}

	transformedBasicConfig, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfig(original["basic_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBasicConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["basicConfig"] = transformedBasicConfig
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInspectTemplate, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigInspectTemplate(original["inspect_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplate"] = transformedInspectTemplate
	}

	transformedDeidentifyTemplate, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(original["deidentify_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeidentifyTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deidentifyTemplate"] = transformedDeidentifyTemplate
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigInspectTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsAdvancedConfigDeidentifyTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfigFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigSdpSettingsBasicConfigFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFilterEnforcement, err := expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(original["filter_enforcement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFilterEnforcement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["filterEnforcement"] = transformedFilterEnforcement
	}

	transformedConfidenceLevel, err := expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(original["confidence_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceLevel"] = transformedConfidenceLevel
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsFilterEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFilterConfigPiAndJailbreakFilterSettingsConfidenceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingEnableFloorSettingEnforcement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingIntegratedServices(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSetting(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInspectOnly, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectOnly(original["inspect_only"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectOnly"] = transformedInspectOnly
	}

	transformedInspectAndBlock, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectAndBlock(original["inspect_and_block"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectAndBlock); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectAndBlock"] = transformedInspectAndBlock
	}

	transformedEnableCloudLogging, err := expandModelArmorGlobalFloorsettingAiPlatformFloorSettingEnableCloudLogging(original["enable_cloud_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableCloudLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableCloudLogging"] = transformedEnableCloudLogging
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSettingInspectAndBlock(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingAiPlatformFloorSettingEnableCloudLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandModelArmorGlobalFloorsettingFloorSettingMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMultiLanguageDetection, err := expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetection(original["multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMultiLanguageDetection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["multiLanguageDetection"] = transformedMultiLanguageDetection
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableMultiLanguageDetection, err := expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetectionEnableMultiLanguageDetection(original["enable_multi_language_detection"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableMultiLanguageDetection"] = transformedEnableMultiLanguageDetection
	}

	return transformed, nil
}

func expandModelArmorGlobalFloorsettingFloorSettingMetadataMultiLanguageDetectionEnableMultiLanguageDetection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
