// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/InterconnectAttachmentGroup.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ComputeInterconnectAttachmentGroupAssetType string = "compute.googleapis.com/InterconnectAttachmentGroup"

func ResourceConverterComputeInterconnectAttachmentGroup() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ComputeInterconnectAttachmentGroupAssetType,
		Convert:   GetComputeInterconnectAttachmentGroupCaiObject,
	}
}

func GetComputeInterconnectAttachmentGroupCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//compute.googleapis.com/projects/{{project}}/global/interconnectAttachmentGroups/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetComputeInterconnectAttachmentGroupApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ComputeInterconnectAttachmentGroupAssetType,
			Resource: &cai.AssetResource{
				Version:              "beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/compute/beta/rest",
				DiscoveryName:        "InterconnectAttachmentGroup",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetComputeInterconnectAttachmentGroupApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeInterconnectAttachmentGroupDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	nameProp, err := expandComputeInterconnectAttachmentGroupName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	attachmentsProp, err := expandComputeInterconnectAttachmentGroupAttachments(d.Get("attachments"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("attachments"); !tpgresource.IsEmptyValue(reflect.ValueOf(attachmentsProp)) && (ok || !reflect.DeepEqual(v, attachmentsProp)) {
		obj["attachments"] = attachmentsProp
	}
	interconnectGroupProp, err := expandComputeInterconnectAttachmentGroupInterconnectGroup(d.Get("interconnect_group"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("interconnect_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(interconnectGroupProp)) && (ok || !reflect.DeepEqual(v, interconnectGroupProp)) {
		obj["interconnectGroup"] = interconnectGroupProp
	}
	intentProp, err := expandComputeInterconnectAttachmentGroupIntent(d.Get("intent"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("intent"); !tpgresource.IsEmptyValue(reflect.ValueOf(intentProp)) && (ok || !reflect.DeepEqual(v, intentProp)) {
		obj["intent"] = intentProp
	}

	return obj, nil
}

func expandComputeInterconnectAttachmentGroupDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupAttachments(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAttachment, err := expandComputeInterconnectAttachmentGroupAttachmentsAttachment(original["attachment"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attachment"] = transformedAttachment
		}

		transformedName, err := tpgresource.ExpandString(original["name"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedName] = transformed
	}
	return m, nil
}

func expandComputeInterconnectAttachmentGroupAttachmentsAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupInterconnectGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAttachmentGroupIntent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAvailabilitySla, err := expandComputeInterconnectAttachmentGroupIntentAvailabilitySla(original["availability_sla"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAvailabilitySla); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["availabilitySla"] = transformedAvailabilitySla
	}

	return transformed, nil
}

func expandComputeInterconnectAttachmentGroupIntentAvailabilitySla(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
