// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package spanner

import (
	"fmt"
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SpannerBackupScheduleAssetType string = "spanner.googleapis.com/BackupSchedule"

func ResourceConverterSpannerBackupSchedule() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SpannerBackupScheduleAssetType,
		Convert:   GetSpannerBackupScheduleCaiObject,
	}
}

func GetSpannerBackupScheduleCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//spanner.googleapis.com/projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSpannerBackupScheduleApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SpannerBackupScheduleAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/spanner/v1/rest",
				DiscoveryName:        "BackupSchedule",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSpannerBackupScheduleApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandSpannerBackupScheduleName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	retentionDurationProp, err := expandSpannerBackupScheduleRetentionDuration(d.Get("retention_duration"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("retention_duration"); !tpgresource.IsEmptyValue(reflect.ValueOf(retentionDurationProp)) && (ok || !reflect.DeepEqual(v, retentionDurationProp)) {
		obj["retentionDuration"] = retentionDurationProp
	}
	specProp, err := expandSpannerBackupScheduleSpec(d.Get("spec"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("spec"); ok || !reflect.DeepEqual(v, specProp) {
		obj["spec"] = specProp
	}
	fullBackupSpecProp, err := expandSpannerBackupScheduleFullBackupSpec(d.Get("full_backup_spec"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("full_backup_spec"); ok || !reflect.DeepEqual(v, fullBackupSpecProp) {
		obj["fullBackupSpec"] = fullBackupSpecProp
	}
	incrementalBackupSpecProp, err := expandSpannerBackupScheduleIncrementalBackupSpec(d.Get("incremental_backup_spec"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("incremental_backup_spec"); ok || !reflect.DeepEqual(v, incrementalBackupSpecProp) {
		obj["incrementalBackupSpec"] = incrementalBackupSpecProp
	}

	return resourceSpannerBackupScheduleEncoder(d, config, obj)
}

func resourceSpannerBackupScheduleEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	obj["name"] = d.Get("name").(string)
	if obj["name"] == nil || obj["name"] == "" {
		if err := d.Set("name", id.PrefixedUniqueId("tfgen-spanid-")[:30]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	}
	config := meta.(*transport_tpg.Config)
	var err error
	obj["name"], err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}")
	if err != nil {
		return obj, err
	}
	delete(obj, "instance")
	delete(obj, "database")
	return obj, nil
}

func expandSpannerBackupScheduleName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSpannerBackupScheduleRetentionDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSpannerBackupScheduleSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCronSpec, err := expandSpannerBackupScheduleSpecCronSpec(original["cron_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCronSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cronSpec"] = transformedCronSpec
	}

	return transformed, nil
}

func expandSpannerBackupScheduleSpecCronSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedText, err := expandSpannerBackupScheduleSpecCronSpecText(original["text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["text"] = transformedText
	}

	return transformed, nil
}

func expandSpannerBackupScheduleSpecCronSpecText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSpannerBackupScheduleFullBackupSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandSpannerBackupScheduleIncrementalBackupSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}
