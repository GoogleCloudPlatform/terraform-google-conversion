// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/colab/NotebookExecution.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package colab

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ColabNotebookExecutionAssetType string = "aiplatform.googleapis.com/NotebookExecution"

func ResourceConverterColabNotebookExecution() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ColabNotebookExecutionAssetType,
		Convert:   GetColabNotebookExecutionCaiObject,
	}
}

func GetColabNotebookExecutionCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//aiplatform.googleapis.com/projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetColabNotebookExecutionApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ColabNotebookExecutionAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/aiplatform/v1beta1/rest",
				DiscoveryName:        "NotebookExecution",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetColabNotebookExecutionApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandColabNotebookExecutionDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	dataformRepositorySourceProp, err := expandColabNotebookExecutionDataformRepositorySource(d.Get("dataform_repository_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("dataform_repository_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(dataformRepositorySourceProp)) && (ok || !reflect.DeepEqual(v, dataformRepositorySourceProp)) {
		obj["dataformRepositorySource"] = dataformRepositorySourceProp
	}
	gcsNotebookSourceProp, err := expandColabNotebookExecutionGcsNotebookSource(d.Get("gcs_notebook_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("gcs_notebook_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcsNotebookSourceProp)) && (ok || !reflect.DeepEqual(v, gcsNotebookSourceProp)) {
		obj["gcsNotebookSource"] = gcsNotebookSourceProp
	}
	directNotebookSourceProp, err := expandColabNotebookExecutionDirectNotebookSource(d.Get("direct_notebook_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("direct_notebook_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(directNotebookSourceProp)) && (ok || !reflect.DeepEqual(v, directNotebookSourceProp)) {
		obj["directNotebookSource"] = directNotebookSourceProp
	}
	executionTimeoutProp, err := expandColabNotebookExecutionExecutionTimeout(d.Get("execution_timeout"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("execution_timeout"); !tpgresource.IsEmptyValue(reflect.ValueOf(executionTimeoutProp)) && (ok || !reflect.DeepEqual(v, executionTimeoutProp)) {
		obj["executionTimeout"] = executionTimeoutProp
	}
	notebookRuntimeTemplateResourceNameProp, err := expandColabNotebookExecutionNotebookRuntimeTemplateResourceName(d.Get("notebook_runtime_template_resource_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("notebook_runtime_template_resource_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(notebookRuntimeTemplateResourceNameProp)) && (ok || !reflect.DeepEqual(v, notebookRuntimeTemplateResourceNameProp)) {
		obj["notebookRuntimeTemplateResourceName"] = notebookRuntimeTemplateResourceNameProp
	}
	gcsOutputUriProp, err := expandColabNotebookExecutionGcsOutputUri(d.Get("gcs_output_uri"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("gcs_output_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(gcsOutputUriProp)) && (ok || !reflect.DeepEqual(v, gcsOutputUriProp)) {
		obj["gcsOutputUri"] = gcsOutputUriProp
	}
	executionUserProp, err := expandColabNotebookExecutionExecutionUser(d.Get("execution_user"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("execution_user"); !tpgresource.IsEmptyValue(reflect.ValueOf(executionUserProp)) && (ok || !reflect.DeepEqual(v, executionUserProp)) {
		obj["executionUser"] = executionUserProp
	}
	serviceAccountProp, err := expandColabNotebookExecutionServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceAccountProp)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}

	return obj, nil
}

func expandColabNotebookExecutionDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionDataformRepositorySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDataformRepositoryResourceName, err := expandColabNotebookExecutionDataformRepositorySourceDataformRepositoryResourceName(original["dataform_repository_resource_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataformRepositoryResourceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataformRepositoryResourceName"] = transformedDataformRepositoryResourceName
	}

	transformedCommitSha, err := expandColabNotebookExecutionDataformRepositorySourceCommitSha(original["commit_sha"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitSha); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitSha"] = transformedCommitSha
	}

	return transformed, nil
}

func expandColabNotebookExecutionDataformRepositorySourceDataformRepositoryResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionDataformRepositorySourceCommitSha(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionGcsNotebookSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandColabNotebookExecutionGcsNotebookSourceUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedGeneration, err := expandColabNotebookExecutionGcsNotebookSourceGeneration(original["generation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGeneration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generation"] = transformedGeneration
	}

	return transformed, nil
}

func expandColabNotebookExecutionGcsNotebookSourceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionGcsNotebookSourceGeneration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionDirectNotebookSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedContent, err := expandColabNotebookExecutionDirectNotebookSourceContent(original["content"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["content"] = transformedContent
	}

	return transformed, nil
}

func expandColabNotebookExecutionDirectNotebookSourceContent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionExecutionTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionNotebookRuntimeTemplateResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionGcsOutputUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionExecutionUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabNotebookExecutionServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
