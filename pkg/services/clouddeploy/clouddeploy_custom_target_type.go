// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/clouddeploy/CustomTargetType.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package clouddeploy

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = fmt.Sprintf
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = schema.Noop
	_ = validation.All
	_ = tgcresource.RemoveTerraformAttributionLabel
	_ = tpgresource.GetRegion
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
)

const ClouddeployCustomTargetTypeAssetType string = "clouddeploy.googleapis.com/CustomTargetType"

const ClouddeployCustomTargetTypeSchemaName string = "google_clouddeploy_custom_target_type"

func ResourceClouddeployCustomTargetType() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location of the source.`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the 'CustomTargetType'.`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"custom_actions": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configures render and deploy for the 'CustomTargetType' using Skaffold custom actions.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"deploy_action": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The Skaffold custom action responsible for deploy operations.`,
						},
						"include_skaffold_modules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"configs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The Skaffold Config modules to use from the specified source.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"git": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Remote git repository containing the Skaffold Config modules.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"repo": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Git repository the package should be cloned from.`,
												},
												"path": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Relative path from the repository root to the Skaffold file.`,
												},
												"ref": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Git ref the package should be cloned from.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
									"google_cloud_build_repo": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Cloud Build 2nd gen repository containing the Skaffold Config modules.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"repository": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Cloud Build 2nd gen repository in the format of 'projects/<project>/locations/<location>/connections/<connection>/repositories/<repository>'.`,
												},
												"path": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Relative path from the repository root to the Skaffold file.`,
												},
												"ref": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Branch or tag to use when cloning the repository.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
									"google_cloud_storage": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Cloud Storage bucket containing Skaffold Config modules.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"source": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Cloud Storage source paths to copy recursively. For example, providing 'gs://my-bucket/dir/configs/*' will result in Skaffold copying all files within the 'dir/configs' directory in the bucket 'my-bucket'.`,
												},
												"path": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Relative path from the source to the Skaffold file.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
								},
							},
						},
						"render_action": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via 'skaffold render'.`,
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Description of the 'CustomTargetType'. Max length is 255 characters.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the 'CustomTargetType' was created.`,
			},
			"custom_target_type_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Resource id of the 'CustomTargetType'.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The weak etag of the 'CustomTargetType' resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Unique identifier of the 'CustomTargetType'.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time at which the 'CustomTargetType' was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
