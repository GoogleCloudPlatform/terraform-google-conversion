// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudbuildv2/Connection.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudbuildv2

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
)

const Cloudbuildv2ConnectionAssetType string = "cloudbuild.googleapis.com/Connection"

const Cloudbuildv2ConnectionSchemaName string = "google_cloudbuildv2_connection"

func ResourceCloudbuildv2Connection() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location for the resource`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Immutable. The resource name of the connection.`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Allows clients to store small amounts of arbitrary data.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"bitbucket_cloud_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connections to Bitbucket Cloud.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"authorizer_credential": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Required. An access token with the 'webhook', 'repository', 'repository:admin' and 'pullrequest' scope access. It can be either a workspace, project or repository access token. It's recommended to use a system account to generate these credentials.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_token_secret_version": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
						"read_authorizer_credential": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Required. An access token with the 'repository' access. It can be either a workspace, project or repository access token. It's recommended to use a system account to generate the credentials.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_token_secret_version": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
						"webhook_secret_secret_version": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description:      `Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook events, formatted as 'projects/*/secrets/*/versions/*'.`,
						},
						"workspace": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.`,
						},
					},
				},
				ConflictsWith: []string{"github_config", "github_enterprise_config", "gitlab_config", "bitbucket_data_center_config"},
			},
			"bitbucket_data_center_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connections to Bitbucket Data Center.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"authorizer_credential": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Required. A http access token with the 'REPO_ADMIN' scope access.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_token_secret_version": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
						"host_uri": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The URI of the Bitbucket Data Center host this connection is for.`,
						},
						"read_authorizer_credential": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Required. A http access token with the 'REPO_READ' access.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_token_secret_version": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
						"webhook_secret_secret_version": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description:      `Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook events, formatted as 'projects/*/secrets/*/versions/*'.`,
						},
						"service_directory_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for using Service Directory to privately connect to a Bitbucket Data Center. This should only be set if the Bitbucket Data Center is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the Bitbucket Data Center will be made over the public internet.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"service": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.`,
									},
								},
							},
						},
						"ssl_ca": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `SSL certificate to use for requests to the Bitbucket Data Center.`,
						},
					},
				},
				ConflictsWith: []string{"github_config", "github_enterprise_config", "bitbucket_cloud_config", "gitlab_config"},
			},
			"disabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.`,
			},
			"github_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connections to github.com.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"app_installation_id": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `GitHub App installation id.`,
						},
						"authorizer_credential": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"oauth_token_secret_version": {
										Type:             schema.TypeString,
										Optional:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
					},
				},
				ConflictsWith: []string{"github_enterprise_config", "gitlab_config", "bitbucket_cloud_config", "bitbucket_data_center_config"},
			},
			"github_enterprise_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connections to an instance of GitHub Enterprise.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host_uri": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Required. The URI of the GitHub Enterprise host this connection is for.`,
						},
						"app_id": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Id of the GitHub App created from the manifest.`,
						},
						"app_installation_id": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `ID of the installation of the GitHub App.`,
						},
						"app_slug": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The URL-friendly name of the GitHub App.`,
						},
						"private_key_secret_version": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description:      `SecretManager resource containing the private key of the GitHub App, formatted as 'projects/*/secrets/*/versions/*'.`,
						},
						"service_directory_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"service": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.`,
									},
								},
							},
						},
						"ssl_ca": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `SSL certificate to use for requests to GitHub Enterprise.`,
						},
						"webhook_secret_secret_version": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description:      `SecretManager resource containing the webhook secret of the GitHub App, formatted as 'projects/*/secrets/*/versions/*'.`,
						},
					},
				},
				ConflictsWith: []string{"github_config", "gitlab_config", "bitbucket_cloud_config", "bitbucket_data_center_config"},
			},
			"gitlab_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connections to gitlab.com or an instance of GitLab Enterprise.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"authorizer_credential": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Required. A GitLab personal access token with the 'api' scope access.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_token_secret_version": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
						"read_authorizer_credential": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Required. A GitLab personal access token with the minimum 'read_api' scope access.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"user_token_secret_version": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: 'projects/*/secrets/*/versions/*'.`,
									},
								},
							},
						},
						"webhook_secret_secret_version": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description:      `Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as 'projects/*/secrets/*/versions/*'.`,
						},
						"host_uri": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.`,
						},
						"service_directory_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"service": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
										Description:      `Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.`,
									},
								},
							},
						},
						"ssl_ca": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `SSL certificate to use for requests to GitLab Enterprise.`,
						},
					},
				},
				ConflictsWith: []string{"github_config", "github_enterprise_config", "bitbucket_cloud_config", "bitbucket_data_center_config"},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Server assigned timestamp for when the connection was created.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.`,
			},
			"installation_state": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only. Installation state of the Connection.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},
			"reconciling": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Output only. Set to true when the connection is being set up or updated in the background.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Server assigned timestamp for when the connection was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
