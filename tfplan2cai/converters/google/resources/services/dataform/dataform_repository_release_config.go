// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataform

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DataformRepositoryReleaseConfigAssetType string = "dataform.googleapis.com/RepositoryReleaseConfig"

func ResourceConverterDataformRepositoryReleaseConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DataformRepositoryReleaseConfigAssetType,
		Convert:   GetDataformRepositoryReleaseConfigCaiObject,
	}
}

func GetDataformRepositoryReleaseConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//dataform.googleapis.com/projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDataformRepositoryReleaseConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DataformRepositoryReleaseConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/dataform/v1beta1/rest",
				DiscoveryName:        "RepositoryReleaseConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDataformRepositoryReleaseConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandDataformRepositoryReleaseConfigName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	gitCommitishProp, err := expandDataformRepositoryReleaseConfigGitCommitish(d.Get("git_commitish"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("git_commitish"); !tpgresource.IsEmptyValue(reflect.ValueOf(gitCommitishProp)) && (ok || !reflect.DeepEqual(v, gitCommitishProp)) {
		obj["gitCommitish"] = gitCommitishProp
	}
	cronScheduleProp, err := expandDataformRepositoryReleaseConfigCronSchedule(d.Get("cron_schedule"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("cron_schedule"); !tpgresource.IsEmptyValue(reflect.ValueOf(cronScheduleProp)) && (ok || !reflect.DeepEqual(v, cronScheduleProp)) {
		obj["cronSchedule"] = cronScheduleProp
	}
	timeZoneProp, err := expandDataformRepositoryReleaseConfigTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("time_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(timeZoneProp)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	codeCompilationConfigProp, err := expandDataformRepositoryReleaseConfigCodeCompilationConfig(d.Get("code_compilation_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("code_compilation_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(codeCompilationConfigProp)) && (ok || !reflect.DeepEqual(v, codeCompilationConfigProp)) {
		obj["codeCompilationConfig"] = codeCompilationConfigProp
	}

	return obj, nil
}

func expandDataformRepositoryReleaseConfigName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigGitCommitish(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCronSchedule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDefaultDatabase, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(original["default_database"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultDatabase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultDatabase"] = transformedDefaultDatabase
	}

	transformedDefaultSchema, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(original["default_schema"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultSchema); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultSchema"] = transformedDefaultSchema
	}

	transformedDefaultLocation, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(original["default_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultLocation"] = transformedDefaultLocation
	}

	transformedAssertionSchema, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(original["assertion_schema"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAssertionSchema); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["assertionSchema"] = transformedAssertionSchema
	}

	transformedVars, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigVars(original["vars"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVars); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vars"] = transformedVars
	}

	transformedDatabaseSuffix, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(original["database_suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseSuffix"] = transformedDatabaseSuffix
	}

	transformedSchemaSuffix, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(original["schema_suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSchemaSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["schemaSuffix"] = transformedSchemaSuffix
	}

	transformedTablePrefix, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(original["table_prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTablePrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tablePrefix"] = transformedTablePrefix
	}

	return transformed, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigVars(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
