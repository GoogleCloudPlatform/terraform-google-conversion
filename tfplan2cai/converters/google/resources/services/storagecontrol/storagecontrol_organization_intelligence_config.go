// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/storagecontrol/OrganizationIntelligenceConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package storagecontrol

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const StorageControlOrganizationIntelligenceConfigAssetType string = "storage.googleapis.com/OrganizationIntelligenceConfig"

func ResourceConverterStorageControlOrganizationIntelligenceConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: StorageControlOrganizationIntelligenceConfigAssetType,
		Convert:   GetStorageControlOrganizationIntelligenceConfigCaiObject,
	}
}

func GetStorageControlOrganizationIntelligenceConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//storage.googleapis.com/organizations/{{name}}/locations/global/intelligenceConfig")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetStorageControlOrganizationIntelligenceConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: StorageControlOrganizationIntelligenceConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v2",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/storage/v2/rest",
				DiscoveryName:        "OrganizationIntelligenceConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetStorageControlOrganizationIntelligenceConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	editionConfigProp, err := expandStorageControlOrganizationIntelligenceConfigEditionConfig(d.Get("edition_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("edition_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(editionConfigProp)) && (ok || !reflect.DeepEqual(v, editionConfigProp)) {
		obj["editionConfig"] = editionConfigProp
	}
	filterProp, err := expandStorageControlOrganizationIntelligenceConfigFilter(d.Get("filter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterProp)) && (ok || !reflect.DeepEqual(v, filterProp)) {
		obj["filter"] = filterProp
	}

	return obj, nil
}

func expandStorageControlOrganizationIntelligenceConfigEditionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExcludedCloudStorageBuckets, err := expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageBuckets(original["excluded_cloud_storage_buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExcludedCloudStorageBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["excludedCloudStorageBuckets"] = transformedExcludedCloudStorageBuckets
	}

	transformedIncludedCloudStorageBuckets, err := expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageBuckets(original["included_cloud_storage_buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedCloudStorageBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedCloudStorageBuckets"] = transformedIncludedCloudStorageBuckets
	}

	transformedExcludedCloudStorageLocations, err := expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageLocations(original["excluded_cloud_storage_locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExcludedCloudStorageLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["excludedCloudStorageLocations"] = transformedExcludedCloudStorageLocations
	}

	transformedIncludedCloudStorageLocations, err := expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageLocations(original["included_cloud_storage_locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedCloudStorageLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedCloudStorageLocations"] = transformedIncludedCloudStorageLocations
	}

	return transformed, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBucketIdRegexes, err := expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageBucketsBucketIdRegexes(original["bucket_id_regexes"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["bucketIdRegexes"] = transformedBucketIdRegexes
	}

	return transformed, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageBucketsBucketIdRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBucketIdRegexes, err := expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageBucketsBucketIdRegexes(original["bucket_id_regexes"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["bucketIdRegexes"] = transformedBucketIdRegexes
	}

	return transformed, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageBucketsBucketIdRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocations, err := expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageLocationsLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterExcludedCloudStorageLocationsLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocations, err := expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageLocationsLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandStorageControlOrganizationIntelligenceConfigFilterIncludedCloudStorageLocationsLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
