// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/WireGroup.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ComputeWireGroupAssetType string = "compute.googleapis.com/WireGroup"

func ResourceConverterComputeWireGroup() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ComputeWireGroupAssetType,
		Convert:   GetComputeWireGroupCaiObject,
	}
}

func GetComputeWireGroupCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//compute.googleapis.com/projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetComputeWireGroupApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ComputeWireGroupAssetType,
			Resource: &cai.AssetResource{
				Version:              "beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/compute/beta/rest",
				DiscoveryName:        "WireGroup",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetComputeWireGroupApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeWireGroupDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	nameProp, err := expandComputeWireGroupName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	endpointsProp, err := expandComputeWireGroupEndpoints(d.Get("endpoints"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("endpoints"); !tpgresource.IsEmptyValue(reflect.ValueOf(endpointsProp)) && (ok || !reflect.DeepEqual(v, endpointsProp)) {
		obj["endpoints"] = endpointsProp
	}
	adminEnabledProp, err := expandComputeWireGroupAdminEnabled(d.Get("admin_enabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("admin_enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(adminEnabledProp)) && (ok || !reflect.DeepEqual(v, adminEnabledProp)) {
		obj["adminEnabled"] = adminEnabledProp
	}
	wireGroupPropertiesProp, err := expandComputeWireGroupWireGroupProperties(d.Get("wire_group_properties"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("wire_group_properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(wireGroupPropertiesProp)) && (ok || !reflect.DeepEqual(v, wireGroupPropertiesProp)) {
		obj["wireGroupProperties"] = wireGroupPropertiesProp
	}
	wirePropertiesProp, err := expandComputeWireGroupWireProperties(d.Get("wire_properties"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("wire_properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(wirePropertiesProp)) && (ok || !reflect.DeepEqual(v, wirePropertiesProp)) {
		obj["wireProperties"] = wirePropertiesProp
	}

	return obj, nil
}

func expandComputeWireGroupDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupEndpoints(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedInterconnects, err := expandComputeWireGroupEndpointsInterconnects(original["interconnects"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInterconnects); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["interconnects"] = transformedInterconnects
		}

		transformedEndpoint, err := tpgresource.ExpandString(original["endpoint"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedEndpoint] = transformed
	}
	return m, nil
}

func expandComputeWireGroupEndpointsInterconnects(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedInterconnect, err := expandComputeWireGroupEndpointsInterconnectsInterconnect(original["interconnect"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInterconnect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["interconnect"] = transformedInterconnect
		}

		transformedVlanTags, err := expandComputeWireGroupEndpointsInterconnectsVlanTags(original["vlan_tags"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVlanTags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["vlan_tags"] = transformedVlanTags
		}

		transformedInterconnectName, err := tpgresource.ExpandString(original["interconnect_name"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedInterconnectName] = transformed
	}
	return m, nil
}

func expandComputeWireGroupEndpointsInterconnectsInterconnect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupEndpointsInterconnectsVlanTags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupAdminEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupWireGroupProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandComputeWireGroupWireGroupPropertiesType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandComputeWireGroupWireGroupPropertiesType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupWireProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBandwidthUnmetered, err := expandComputeWireGroupWirePropertiesBandwidthUnmetered(original["bandwidth_unmetered"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBandwidthUnmetered); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bandwidthUnmetered"] = transformedBandwidthUnmetered
	}

	transformedFaultResponse, err := expandComputeWireGroupWirePropertiesFaultResponse(original["fault_response"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFaultResponse); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["faultResponse"] = transformedFaultResponse
	}

	transformedBandwidthAllocation, err := expandComputeWireGroupWirePropertiesBandwidthAllocation(original["bandwidth_allocation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBandwidthAllocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bandwidthAllocation"] = transformedBandwidthAllocation
	}

	return transformed, nil
}

func expandComputeWireGroupWirePropertiesBandwidthUnmetered(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupWirePropertiesFaultResponse(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeWireGroupWirePropertiesBandwidthAllocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
