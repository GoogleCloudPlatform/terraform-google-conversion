// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataproc_test

import (
	"testing"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/test"
)

func TestAccDataprocBatch_dataprocBatchSparkExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"batch_id",
			"count",
			"depends_on",
			"environment_config.execution_config.ttl",
			"for_each",
			"lifecycle",
			"location",
			"provider",
			"pyspark_batch.args",
			"spark_batch.args",
			"spark_r_batch.args",
			"spark_sql_batch.query_variables",
		},
	)
}
func TestAccDataprocBatch_dataprocBatchSparkFullExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"batch_id",
			"count",
			"depends_on",
			"environment_config.execution_config.ttl",
			"for_each",
			"lifecycle",
			"location",
			"provider",
			"pyspark_batch.args",
			"spark_batch.args",
			"spark_r_batch.args",
			"spark_sql_batch.query_variables",
		},
	)
}
func TestAccDataprocBatch_dataprocBatchSparksqlExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"batch_id",
			"count",
			"depends_on",
			"environment_config.execution_config.ttl",
			"for_each",
			"lifecycle",
			"location",
			"provider",
			"pyspark_batch.args",
			"spark_batch.args",
			"spark_r_batch.args",
			"spark_sql_batch.query_variables",
		},
	)
}
func TestAccDataprocBatch_dataprocBatchPysparkExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"batch_id",
			"count",
			"depends_on",
			"environment_config.execution_config.ttl",
			"for_each",
			"lifecycle",
			"location",
			"provider",
			"pyspark_batch.args",
			"spark_batch.args",
			"spark_r_batch.args",
			"spark_sql_batch.query_variables",
		},
	)
}
func TestAccDataprocBatch_dataprocBatchSparkrExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"batch_id",
			"count",
			"depends_on",
			"environment_config.execution_config.ttl",
			"for_each",
			"lifecycle",
			"location",
			"provider",
			"pyspark_batch.args",
			"spark_batch.args",
			"spark_r_batch.args",
			"spark_sql_batch.query_variables",
		},
	)
}
func TestAccDataprocBatch_dataprocBatchAutotuningExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"batch_id",
			"count",
			"depends_on",
			"environment_config.execution_config.ttl",
			"for_each",
			"lifecycle",
			"location",
			"provider",
			"pyspark_batch.args",
			"spark_batch.args",
			"spark_r_batch.args",
			"spark_sql_batch.query_variables",
		},
	)
}
