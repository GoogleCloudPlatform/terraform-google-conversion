// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package monitoring

import (
	"fmt"
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceMonitoringMonitoredProjectNameDiffSuppressFunc(k, old, new string, d tpgresource.TerraformResourceDataChange) bool {
	// Don't suppress if values are empty strings
	if old == "" || new == "" {
		return false
	}

	oldShort := tpgresource.GetResourceNameFromSelfLink(old)
	newShort := tpgresource.GetResourceNameFromSelfLink(new)

	// Suppress if short names are equal
	if oldShort == newShort {
		return true
	}

	_, isOldNumErr := tpgresource.StringToFixed64(oldShort)
	isOldNumber := isOldNumErr == nil
	_, isNewNumErr := tpgresource.StringToFixed64(newShort)
	isNewNumber := isNewNumErr == nil

	// Suppress if comparing a project number to project id
	return isOldNumber != isNewNumber
}

func resourceMonitoringMonitoredProjectNameDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return ResourceMonitoringMonitoredProjectNameDiffSuppressFunc(k, old, new, d)
}

const MonitoringMonitoredProjectAssetType string = "monitoring.googleapis.com/MonitoredProject"

func ResourceConverterMonitoringMonitoredProject() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: MonitoringMonitoredProjectAssetType,
		Convert:   GetMonitoringMonitoredProjectCaiObject,
	}
}

func GetMonitoringMonitoredProjectCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//monitoring.googleapis.com/locations/global/metricsScopes/{{metrics_scope}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetMonitoringMonitoredProjectApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: MonitoringMonitoredProjectAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/monitoring/v1/rest",
				DiscoveryName:        "MonitoredProject",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetMonitoringMonitoredProjectApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandMonitoringMonitoredProjectName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	return resourceMonitoringMonitoredProjectEncoder(d, config, obj)
}

func resourceMonitoringMonitoredProjectEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	name := d.Get("name").(string)
	name = tpgresource.GetResourceNameFromSelfLink(name)
	d.Set("name", name)
	metricsScope := d.Get("metrics_scope").(string)
	metricsScope = tpgresource.GetResourceNameFromSelfLink(metricsScope)
	d.Set("metrics_scope", metricsScope)
	obj["name"] = fmt.Sprintf("locations/global/metricsScopes/%s/projects/%s", metricsScope, name)
	return obj, nil
}

func expandMonitoringMonitoredProjectName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
