// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package siteverification

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SiteVerificationWebResourceAssetType string = "www.googleapis.com/WebResource"

func ResourceConverterSiteVerificationWebResource() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SiteVerificationWebResourceAssetType,
		Convert:   GetSiteVerificationWebResourceCaiObject,
	}
}

func GetSiteVerificationWebResourceCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//www.googleapis.com/webResource/{{web_resource_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSiteVerificationWebResourceApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SiteVerificationWebResourceAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/www/v1/rest",
				DiscoveryName:        "WebResource",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSiteVerificationWebResourceApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	siteProp, err := expandSiteVerificationWebResourceSite(d.Get("site"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("site"); !tpgresource.IsEmptyValue(reflect.ValueOf(siteProp)) && (ok || !reflect.DeepEqual(v, siteProp)) {
		obj["site"] = siteProp
	}

	return obj, nil
}

func expandSiteVerificationWebResourceSite(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandSiteVerificationWebResourceSiteType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedIdentifier, err := expandSiteVerificationWebResourceSiteIdentifier(original["identifier"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIdentifier); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["identifier"] = transformedIdentifier
	}

	return transformed, nil
}

func expandSiteVerificationWebResourceSiteType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSiteVerificationWebResourceSiteIdentifier(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
