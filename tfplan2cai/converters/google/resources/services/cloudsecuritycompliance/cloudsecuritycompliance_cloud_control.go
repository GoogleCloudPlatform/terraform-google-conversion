// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudsecuritycompliance/CloudControl.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudsecuritycompliance

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const CloudSecurityComplianceCloudControlAssetType string = "cloudsecuritycompliance.googleapis.com/CloudControl"

func ResourceConverterCloudSecurityComplianceCloudControl() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: CloudSecurityComplianceCloudControlAssetType,
		Convert:   GetCloudSecurityComplianceCloudControlCaiObject,
	}
}

func GetCloudSecurityComplianceCloudControlCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//cloudsecuritycompliance.googleapis.com/organizations/{{organization}}/locations/{{location}}/cloudControls/{{cloud_control_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetCloudSecurityComplianceCloudControlApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: CloudSecurityComplianceCloudControlAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/cloudsecuritycompliance/v1/rest",
				DiscoveryName:        "CloudControl",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetCloudSecurityComplianceCloudControlApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	categoriesProp, err := expandCloudSecurityComplianceCloudControlCategories(d.Get("categories"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("categories"); !tpgresource.IsEmptyValue(reflect.ValueOf(categoriesProp)) && (ok || !reflect.DeepEqual(v, categoriesProp)) {
		obj["categories"] = categoriesProp
	}
	descriptionProp, err := expandCloudSecurityComplianceCloudControlDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCloudSecurityComplianceCloudControlDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	findingCategoryProp, err := expandCloudSecurityComplianceCloudControlFindingCategory(d.Get("finding_category"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("finding_category"); !tpgresource.IsEmptyValue(reflect.ValueOf(findingCategoryProp)) && (ok || !reflect.DeepEqual(v, findingCategoryProp)) {
		obj["findingCategory"] = findingCategoryProp
	}
	nameProp, err := expandCloudSecurityComplianceCloudControlName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	parameterSpecProp, err := expandCloudSecurityComplianceCloudControlParameterSpec(d.Get("parameter_spec"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("parameter_spec"); !tpgresource.IsEmptyValue(reflect.ValueOf(parameterSpecProp)) && (ok || !reflect.DeepEqual(v, parameterSpecProp)) {
		obj["parameterSpec"] = parameterSpecProp
	}
	remediationStepsProp, err := expandCloudSecurityComplianceCloudControlRemediationSteps(d.Get("remediation_steps"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("remediation_steps"); !tpgresource.IsEmptyValue(reflect.ValueOf(remediationStepsProp)) && (ok || !reflect.DeepEqual(v, remediationStepsProp)) {
		obj["remediationSteps"] = remediationStepsProp
	}
	rulesProp, err := expandCloudSecurityComplianceCloudControlRules(d.Get("rules"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("rules"); !tpgresource.IsEmptyValue(reflect.ValueOf(rulesProp)) && (ok || !reflect.DeepEqual(v, rulesProp)) {
		obj["rules"] = rulesProp
	}
	severityProp, err := expandCloudSecurityComplianceCloudControlSeverity(d.Get("severity"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("severity"); !tpgresource.IsEmptyValue(reflect.ValueOf(severityProp)) && (ok || !reflect.DeepEqual(v, severityProp)) {
		obj["severity"] = severityProp
	}
	supportedCloudProvidersProp, err := expandCloudSecurityComplianceCloudControlSupportedCloudProviders(d.Get("supported_cloud_providers"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("supported_cloud_providers"); !tpgresource.IsEmptyValue(reflect.ValueOf(supportedCloudProvidersProp)) && (ok || !reflect.DeepEqual(v, supportedCloudProvidersProp)) {
		obj["supportedCloudProviders"] = supportedCloudProvidersProp
	}
	supportedTargetResourceTypesProp, err := expandCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(d.Get("supported_target_resource_types"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("supported_target_resource_types"); !tpgresource.IsEmptyValue(reflect.ValueOf(supportedTargetResourceTypesProp)) && (ok || !reflect.DeepEqual(v, supportedTargetResourceTypesProp)) {
		obj["supportedTargetResourceTypes"] = supportedTargetResourceTypesProp
	}

	return obj, nil
}

func expandCloudSecurityComplianceCloudControlCategories(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlFindingCategory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDefaultValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValue(original["default_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDefaultValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["defaultValue"] = transformedDefaultValue
		}

		transformedDescription, err := expandCloudSecurityComplianceCloudControlParameterSpecDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedDisplayName, err := expandCloudSecurityComplianceCloudControlParameterSpecDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedIsRequired, err := expandCloudSecurityComplianceCloudControlParameterSpecIsRequired(original["is_required"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRequired"] = transformedIsRequired
		}

		transformedName, err := expandCloudSecurityComplianceCloudControlParameterSpecName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedSubstitutionRules, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRules(original["substitution_rules"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSubstitutionRules); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["substitutionRules"] = transformedSubstitutionRules
		}

		transformedValidation, err := expandCloudSecurityComplianceCloudControlParameterSpecValidation(original["validation"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValidation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["validation"] = transformedValidation
		}

		transformedValueType, err := expandCloudSecurityComplianceCloudControlParameterSpecValueType(original["value_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValueType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["valueType"] = transformedValueType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBoolValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueBoolValue(original["bool_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBoolValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["boolValue"] = transformedBoolValue
	}

	transformedNumberValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueNumberValue(original["number_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNumberValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["numberValue"] = transformedNumberValue
	}

	transformedStringListValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValue(original["string_list_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringListValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stringListValue"] = transformedStringListValue
	}

	transformedStringValue, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringValue(original["string_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["stringValue"] = transformedStringValue
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueBoolValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueNumberValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValueValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringListValueValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDefaultValueStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecIsRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAttributeSubstitutionRule, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRule(original["attribute_substitution_rule"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttributeSubstitutionRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attributeSubstitutionRule"] = transformedAttributeSubstitutionRule
		}

		transformedPlaceholderSubstitutionRule, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRule(original["placeholder_substitution_rule"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPlaceholderSubstitutionRule); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["placeholderSubstitutionRule"] = transformedPlaceholderSubstitutionRule
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAttribute, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRuleAttribute(original["attribute"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttribute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attribute"] = transformedAttribute
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesAttributeSubstitutionRuleAttribute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAttribute, err := expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRuleAttribute(original["attribute"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAttribute); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["attribute"] = transformedAttribute
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecSubstitutionRulesPlaceholderSubstitutionRuleAttribute(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValues(original["allowed_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedValues"] = transformedAllowedValues
	}

	transformedIntRange, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRange(original["int_range"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIntRange); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["intRange"] = transformedIntRange
	}

	transformedRegexpPattern, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPattern(original["regexp_pattern"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegexpPattern); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["regexpPattern"] = transformedRegexpPattern
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBoolValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesBoolValue(original["bool_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBoolValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBoolValue
		}

		transformedNumberValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesNumberValue(original["number_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNumberValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["numberValue"] = transformedNumberValue
		}

		transformedStringListValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValue(original["string_list_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringListValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringListValue"] = transformedStringListValue
		}

		transformedStringValue, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesBoolValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesNumberValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValueValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringListValueValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationAllowedValuesValuesStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMax, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMax(original["max"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMax); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["max"] = transformedMax
	}

	transformedMin, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMin(original["min"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMin); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["min"] = transformedMin
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMax(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationIntRangeMin(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPattern(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPattern, err := expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPatternPattern(original["pattern"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPattern); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pattern"] = transformedPattern
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValidationRegexpPatternPattern(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlParameterSpecValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRemediationSteps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCelExpression, err := expandCloudSecurityComplianceCloudControlRulesCelExpression(original["cel_expression"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCelExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["celExpression"] = transformedCelExpression
		}

		transformedDescription, err := expandCloudSecurityComplianceCloudControlRulesDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedRuleActionTypes, err := expandCloudSecurityComplianceCloudControlRulesRuleActionTypes(original["rule_action_types"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRuleActionTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ruleActionTypes"] = transformedRuleActionTypes
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpression, err := expandCloudSecurityComplianceCloudControlRulesCelExpressionExpression(original["expression"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expression"] = transformedExpression
	}

	transformedResourceTypesValues, err := expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValues(original["resource_types_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResourceTypesValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["resourceTypesValues"] = transformedResourceTypesValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpressionExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValues, err := expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValuesValues(original["values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["values"] = transformedValues
	}

	return transformed, nil
}

func expandCloudSecurityComplianceCloudControlRulesCelExpressionResourceTypesValuesValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRulesDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlRulesRuleActionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlSeverity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlSupportedCloudProviders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudSecurityComplianceCloudControlSupportedTargetResourceTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
