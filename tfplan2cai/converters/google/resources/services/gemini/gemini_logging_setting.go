// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/gemini/LoggingSetting.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package gemini

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GeminiLoggingSettingAssetType string = "cloudaicompanion.googleapis.com/LoggingSetting"

func ResourceConverterGeminiLoggingSetting() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: GeminiLoggingSettingAssetType,
		Convert:   GetGeminiLoggingSettingCaiObject,
	}
}

func GetGeminiLoggingSettingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//cloudaicompanion.googleapis.com/projects/{{project}}/locations/{{location}}/loggingSettings/{{logging_setting_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetGeminiLoggingSettingApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: GeminiLoggingSettingAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/cloudaicompanion/v1/rest",
				DiscoveryName:        "LoggingSetting",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetGeminiLoggingSettingApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	logPromptsAndResponsesProp, err := expandGeminiLoggingSettingLogPromptsAndResponses(d.Get("log_prompts_and_responses"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("log_prompts_and_responses"); !tpgresource.IsEmptyValue(reflect.ValueOf(logPromptsAndResponsesProp)) && (ok || !reflect.DeepEqual(v, logPromptsAndResponsesProp)) {
		obj["logPromptsAndResponses"] = logPromptsAndResponsesProp
	}
	logMetadataProp, err := expandGeminiLoggingSettingLogMetadata(d.Get("log_metadata"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("log_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(logMetadataProp)) && (ok || !reflect.DeepEqual(v, logMetadataProp)) {
		obj["logMetadata"] = logMetadataProp
	}
	labelsProp, err := expandGeminiLoggingSettingEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandGeminiLoggingSettingLogPromptsAndResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiLoggingSettingLogMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiLoggingSettingEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
