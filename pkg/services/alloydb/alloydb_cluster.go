// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/alloydb/Cluster.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package alloydb

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/verify"
)

const AlloydbClusterAssetType string = "alloydb.googleapis.com/Cluster"

const AlloydbClusterSchemaName string = "google_alloydb_cluster"

func ResourceAlloydbCluster() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the alloydb cluster.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location where the alloydb cluster should reside.`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.


**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"automated_backup_policy": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"backup_window": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed.

The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it will default to 1 hour.

A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Optional:    true,
							Description: `Whether automated backups are enabled.`,
						},
						"encryption_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"kms_key_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].`,
									},
								},
							},
						},
						"labels": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: `Labels to apply to backups created using this configuration.`,
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"location": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster.`,
						},
						"quantity_based_retention": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Quantity-based Backup retention policy to retain recent backups. Conflicts with 'time_based_retention', both can't be set together.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"count": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: `The number of backups to retain.`,
									},
								},
							},
							ConflictsWith: []string{"automated_backup_policy.0.time_based_retention"},
						},
						"time_based_retention": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Time-based Backup retention policy. Conflicts with 'quantity_based_retention', both can't be set together.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"retention_period": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The retention period.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".`,
									},
								},
							},
							ConflictsWith: []string{"automated_backup_policy.0.quantity_based_retention"},
						},
						"weekly_schedule": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `Weekly schedule for the Backup.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"start_times": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `The times during the day to start a backup. At least one start time must be provided. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00).`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"hours": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.`,
												},
												"minutes": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Minutes of hour of day. Currently, only the value 0 is supported.`,
												},
												"nanos": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Fractions of seconds in nanoseconds. Currently, only the value 0 is supported.`,
												},
												"seconds": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Seconds of minutes of the time. Currently, only the value 0 is supported.`,
												},
											},
										},
									},
									"days_of_week": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `The days of the week to perform a backup. At least one day of the week must be provided. Possible values: ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]`,
										MinItems:    1,
										Elem: &schema.Schema{
											Type:         schema.TypeString,
											ValidateFunc: verify.ValidateEnum([]string{"MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"}),
										},
									},
								},
							},
						},
					},
				},
			},
			"cluster_type": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"PRIMARY", "SECONDARY", ""}),
				Description:  `The type of cluster. If not set, defaults to PRIMARY. Default value: "PRIMARY" Possible values: ["PRIMARY", "SECONDARY"]`,
				Default:      "PRIMARY",
			},
			"continuous_backup_config": {
				Type:     schema.TypeList,
				Computed: true,
				Optional: true,
				Description: `The continuous backup config for this cluster.

If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether continuous backup recovery is enabled. If not set, defaults to true.`,
							Default:     true,
						},
						"encryption_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"kms_key_name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].`,
									},
								},
							},
						},
						"recovery_window_days": {
							Type:     schema.TypeInt,
							Computed: true,
							Optional: true,
							Description: `The numbers of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window.

If not set, defaults to 14 days.`,
						},
					},
				},
			},
			"database_version": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				Description: `The database engine major version. This is an optional field and it's populated at the Cluster creation time.
Note: Changing this field to a higer version results in upgrading the AlloyDB cluster which is an irreversible change.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-settable and human-readable display name for the Cluster.`,
			},
			"encryption_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"kms_key_name": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].`,
						},
					},
				},
			},
			"etag": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `For Resource freshness validation (https://google.aip.dev/154)`,
			},
			"initial_user": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Initial user to setup during cluster creation.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"password": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The initial password for the user.`,
							Sensitive:   true,
						},
						"user": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The database username.`,
						},
					},
				},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `User-defined labels for the alloydb cluster.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"maintenance_update_policy": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `MaintenanceUpdatePolicy defines the policy for system updates.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"maintenance_windows": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Preferred windows to perform maintenance. Currently limited to 1.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"day": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"}),
										Description:  `Preferred day of the week for maintenance, e.g. MONDAY, TUESDAY, etc. Possible values: ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]`,
									},
									"start_time": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Preferred time to start the maintenance operation on the specified day. Maintenance will start within 1 hour of this time.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"hours": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: `Hours of day in 24 hour format. Should be from 0 to 23.`,
												},
												"minutes": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Minutes of hour of day. Currently, only the value 0 is supported.`,
												},
												"nanos": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Fractions of seconds in nanoseconds. Currently, only the value 0 is supported.`,
												},
												"seconds": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `Seconds of minutes of the time. Currently, only the value 0 is supported.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"network_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Metadata related to network configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allocated_ip_range": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `The name of the allocated IP range for the private IP AlloyDB cluster. For example: "google-managed-services-default".
If set, the instance IPs for this cluster will be created in the allocated range.`,
						},
						"network": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
							Description: `The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster.
It is specified in the form: "projects/{projectNumber}/global/networks/{network_id}".`,
							ExactlyOneOf: []string{"network_config.0.network", "psc_config.0.psc_enabled"},
						},
					},
				},
			},
			"psc_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for Private Service Connect (PSC) for the cluster.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"psc_enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Create an instance that allows connections from Private Service Connect endpoints to the instance.`,
						},
					},
				},
			},
			"restore_backup_source": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"backup_name": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The name of the backup that this cluster is restored from.`,
						},
					},
				},
				ConflictsWith: []string{"restore_continuous_backup_source"},
			},
			"restore_continuous_backup_source": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cluster": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The name of the source cluster that this cluster is restored from.`,
						},
						"point_in_time": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The point in time that this cluster is restored to, in RFC 3339 format.`,
						},
					},
				},
				ConflictsWith: []string{"restore_backup_source"},
			},
			"secondary_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration of the secondary cluster for Cross Region Replication. This should be set if and only if the cluster is of type SECONDARY.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"primary_cluster_name": {
							Type:     schema.TypeString,
							Required: true,
							Description: `Name of the primary cluster must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'`,
						},
					},
				},
			},
			"subscription_type": {
				Type:         schema.TypeString,
				Computed:     true,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"TRIAL", "STANDARD", ""}),
				Description:  `The subscrition type of cluster. Possible values: ["TRIAL", "STANDARD"]`,
			},
			"backup_source": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Cluster created from backup.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"backup_name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The name of the backup resource.`,
						},
					},
				},
			},
			"continuous_backup_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `ContinuousBackupInfo describes the continuous backup properties of a cluster.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"encryption_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `EncryptionInfo describes the encryption information of a cluster or a backup.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},
			"migration_source": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Cluster created via DMS migration.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host_port": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The host and port of the on-premises instance in host:port format`,
						},
						"reference_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Place holder for the external source identifier(e.g DMS job name) that created the cluster.`,
						},
						"source_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Type of migration source.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The name of the cluster resource.`,
			},
			"reconciling": {
				Type:     schema.TypeBool,
				Computed: true,
				Description: `Output only. Reconciling (https://google.aip.dev/128#reconciliation).
Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them.
This can happen due to user-triggered updates or system actions like failover or maintenance.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The current serving state of the cluster.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"trial_metadata": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Contains information and all metadata related to TRIAL clusters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"end_time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `End time of the trial cluster.`,
						},
						"grace_end_time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Grace end time of the trial cluster.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Start time of the trial cluster.`,
						},
						"upgrade_time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Upgrade time of the trial cluster to standard cluster.`,
						},
					},
				},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The system-generated UID of the resource.`,
			},
			"deletion_policy": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Policy to determine if the cluster should be deleted forcefully.
Deleting a cluster forcefully, deletes the cluster and all its associated instances within the cluster.
Deleting a Secondary cluster with a secondary instance REQUIRES setting deletion_policy = "FORCE" otherwise an error is returned. This is needed as there is no support to delete just the secondary instance, and the only way to delete secondary instance is to delete the associated secondary cluster forcefully which also deletes the secondary instance.
Possible values: DEFAULT, FORCE`,
				Default: "DEFAULT",
			},
			"skip_await_major_version_upgrade": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `Set to true to skip awaiting on the major version upgrade of the cluster.
Possible values: true, false
Default value: "true"`,
				Default: true,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
