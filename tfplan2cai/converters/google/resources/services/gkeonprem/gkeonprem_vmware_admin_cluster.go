// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/gkeonprem/VmwareAdminCluster.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package gkeonprem

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GkeonpremVmwareAdminClusterAssetType string = "gkeonprem.googleapis.com/VmwareAdminCluster"

func ResourceConverterGkeonpremVmwareAdminCluster() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: GkeonpremVmwareAdminClusterAssetType,
		Convert:   GetGkeonpremVmwareAdminClusterCaiObject,
	}
}

func GetGkeonpremVmwareAdminClusterCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//gkeonprem.googleapis.com/projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetGkeonpremVmwareAdminClusterApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: GkeonpremVmwareAdminClusterAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/gkeonprem/v1/rest",
				DiscoveryName:        "VmwareAdminCluster",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetGkeonpremVmwareAdminClusterApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandGkeonpremVmwareAdminClusterDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	onPremVersionProp, err := expandGkeonpremVmwareAdminClusterOnPremVersion(d.Get("on_prem_version"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("on_prem_version"); !tpgresource.IsEmptyValue(reflect.ValueOf(onPremVersionProp)) && (ok || !reflect.DeepEqual(v, onPremVersionProp)) {
		obj["onPremVersion"] = onPremVersionProp
	}
	imageTypeProp, err := expandGkeonpremVmwareAdminClusterImageType(d.Get("image_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("image_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(imageTypeProp)) && (ok || !reflect.DeepEqual(v, imageTypeProp)) {
		obj["imageType"] = imageTypeProp
	}
	bootstrapClusterMembershipProp, err := expandGkeonpremVmwareAdminClusterBootstrapClusterMembership(d.Get("bootstrap_cluster_membership"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("bootstrap_cluster_membership"); !tpgresource.IsEmptyValue(reflect.ValueOf(bootstrapClusterMembershipProp)) && (ok || !reflect.DeepEqual(v, bootstrapClusterMembershipProp)) {
		obj["bootstrapClusterMembership"] = bootstrapClusterMembershipProp
	}
	networkConfigProp, err := expandGkeonpremVmwareAdminClusterNetworkConfig(d.Get("network_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("network_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkConfigProp)) && (ok || !reflect.DeepEqual(v, networkConfigProp)) {
		obj["networkConfig"] = networkConfigProp
	}
	controlPlaneNodeProp, err := expandGkeonpremVmwareAdminClusterControlPlaneNode(d.Get("control_plane_node"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("control_plane_node"); !tpgresource.IsEmptyValue(reflect.ValueOf(controlPlaneNodeProp)) && (ok || !reflect.DeepEqual(v, controlPlaneNodeProp)) {
		obj["controlPlaneNode"] = controlPlaneNodeProp
	}
	addonNodeProp, err := expandGkeonpremVmwareAdminClusterAddonNode(d.Get("addon_node"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("addon_node"); !tpgresource.IsEmptyValue(reflect.ValueOf(addonNodeProp)) && (ok || !reflect.DeepEqual(v, addonNodeProp)) {
		obj["addonNode"] = addonNodeProp
	}
	loadBalancerProp, err := expandGkeonpremVmwareAdminClusterLoadBalancer(d.Get("load_balancer"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("load_balancer"); !tpgresource.IsEmptyValue(reflect.ValueOf(loadBalancerProp)) && (ok || !reflect.DeepEqual(v, loadBalancerProp)) {
		obj["loadBalancer"] = loadBalancerProp
	}
	vcenterProp, err := expandGkeonpremVmwareAdminClusterVcenter(d.Get("vcenter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("vcenter"); !tpgresource.IsEmptyValue(reflect.ValueOf(vcenterProp)) && (ok || !reflect.DeepEqual(v, vcenterProp)) {
		obj["vcenter"] = vcenterProp
	}
	antiAffinityGroupsProp, err := expandGkeonpremVmwareAdminClusterAntiAffinityGroups(d.Get("anti_affinity_groups"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("anti_affinity_groups"); !tpgresource.IsEmptyValue(reflect.ValueOf(antiAffinityGroupsProp)) && (ok || !reflect.DeepEqual(v, antiAffinityGroupsProp)) {
		obj["antiAffinityGroups"] = antiAffinityGroupsProp
	}
	autoRepairConfigProp, err := expandGkeonpremVmwareAdminClusterAutoRepairConfig(d.Get("auto_repair_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auto_repair_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoRepairConfigProp)) && (ok || !reflect.DeepEqual(v, autoRepairConfigProp)) {
		obj["autoRepairConfig"] = autoRepairConfigProp
	}
	authorizationProp, err := expandGkeonpremVmwareAdminClusterAuthorization(d.Get("authorization"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("authorization"); !tpgresource.IsEmptyValue(reflect.ValueOf(authorizationProp)) && (ok || !reflect.DeepEqual(v, authorizationProp)) {
		obj["authorization"] = authorizationProp
	}
	platformConfigProp, err := expandGkeonpremVmwareAdminClusterPlatformConfig(d.Get("platform_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("platform_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(platformConfigProp)) && (ok || !reflect.DeepEqual(v, platformConfigProp)) {
		obj["platformConfig"] = platformConfigProp
	}
	annotationsProp, err := expandGkeonpremVmwareAdminClusterEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}

	return obj, nil
}

func expandGkeonpremVmwareAdminClusterDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterOnPremVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterImageType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterBootstrapClusterMembership(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAddressCidrBlocks, err := expandGkeonpremVmwareAdminClusterNetworkConfigServiceAddressCidrBlocks(original["service_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAddressCidrBlocks"] = transformedServiceAddressCidrBlocks
	}

	transformedPodAddressCidrBlocks, err := expandGkeonpremVmwareAdminClusterNetworkConfigPodAddressCidrBlocks(original["pod_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPodAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["podAddressCidrBlocks"] = transformedPodAddressCidrBlocks
	}

	transformedStaticIpConfig, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfig(original["static_ip_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStaticIpConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["staticIpConfig"] = transformedStaticIpConfig
	}

	transformedDhcpIpConfig, err := expandGkeonpremVmwareAdminClusterNetworkConfigDhcpIpConfig(original["dhcp_ip_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDhcpIpConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dhcpIpConfig"] = transformedDhcpIpConfig
	}

	transformedVcenterNetwork, err := expandGkeonpremVmwareAdminClusterNetworkConfigVcenterNetwork(original["vcenter_network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVcenterNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vcenterNetwork"] = transformedVcenterNetwork
	}

	transformedHostConfig, err := expandGkeonpremVmwareAdminClusterNetworkConfigHostConfig(original["host_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostConfig"] = transformedHostConfig
	}

	transformedHaControlPlaneConfig, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfig(original["ha_control_plane_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHaControlPlaneConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["haControlPlaneConfig"] = transformedHaControlPlaneConfig
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigServiceAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigPodAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIpBlocks, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocks(original["ip_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipBlocks"] = transformedIpBlocks
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedNetmask, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksNetmask(original["netmask"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNetmask); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["netmask"] = transformedNetmask
		}

		transformedGateway, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksGateway(original["gateway"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGateway); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["gateway"] = transformedGateway
		}

		transformedIps, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksIps(original["ips"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ips"] = transformedIps
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksNetmask(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksGateway(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksIps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIp, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksIpsIp(original["ip"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ip"] = transformedIp
		}

		transformedHostname, err := expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksIpsHostname(original["hostname"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHostname); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hostname"] = transformedHostname
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksIpsIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigStaticIpConfigIpBlocksIpsHostname(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigDhcpIpConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandGkeonpremVmwareAdminClusterNetworkConfigDhcpIpConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigDhcpIpConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigVcenterNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHostConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDnsServers, err := expandGkeonpremVmwareAdminClusterNetworkConfigHostConfigDnsServers(original["dns_servers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDnsServers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dnsServers"] = transformedDnsServers
	}

	transformedNtpServers, err := expandGkeonpremVmwareAdminClusterNetworkConfigHostConfigNtpServers(original["ntp_servers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNtpServers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ntpServers"] = transformedNtpServers
	}

	transformedDnsSearchDomains, err := expandGkeonpremVmwareAdminClusterNetworkConfigHostConfigDnsSearchDomains(original["dns_search_domains"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDnsSearchDomains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dnsSearchDomains"] = transformedDnsSearchDomains
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHostConfigDnsServers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHostConfigNtpServers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHostConfigDnsSearchDomains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedControlPlaneIpBlock, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlock(original["control_plane_ip_block"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPlaneIpBlock); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPlaneIpBlock"] = transformedControlPlaneIpBlock
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlock(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNetmask, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockNetmask(original["netmask"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetmask); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["netmask"] = transformedNetmask
	}

	transformedGateway, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockGateway(original["gateway"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGateway); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gateway"] = transformedGateway
	}

	transformedIps, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIps(original["ips"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ips"] = transformedIps
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockNetmask(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockGateway(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIp, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpsIp(original["ip"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ip"] = transformedIp
		}

		transformedHostname, err := expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpsHostname(original["hostname"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHostname); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hostname"] = transformedHostname
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpsIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpsHostname(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterControlPlaneNode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCpus, err := expandGkeonpremVmwareAdminClusterControlPlaneNodeCpus(original["cpus"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCpus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cpus"] = transformedCpus
	}

	transformedMemory, err := expandGkeonpremVmwareAdminClusterControlPlaneNodeMemory(original["memory"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemory); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memory"] = transformedMemory
	}

	transformedReplicas, err := expandGkeonpremVmwareAdminClusterControlPlaneNodeReplicas(original["replicas"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReplicas); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["replicas"] = transformedReplicas
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterControlPlaneNodeCpus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterControlPlaneNodeMemory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterControlPlaneNodeReplicas(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterAddonNode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAutoResizeConfig, err := expandGkeonpremVmwareAdminClusterAddonNodeAutoResizeConfig(original["auto_resize_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoResizeConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoResizeConfig"] = transformedAutoResizeConfig
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterAddonNodeAutoResizeConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandGkeonpremVmwareAdminClusterAddonNodeAutoResizeConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterAddonNodeAutoResizeConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVipConfig, err := expandGkeonpremVmwareAdminClusterLoadBalancerVipConfig(original["vip_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVipConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vipConfig"] = transformedVipConfig
	}

	transformedF5Config, err := expandGkeonpremVmwareAdminClusterLoadBalancerF5Config(original["f5_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedF5Config); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["f5Config"] = transformedF5Config
	}

	transformedManualLbConfig, err := expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfig(original["manual_lb_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManualLbConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["manualLbConfig"] = transformedManualLbConfig
	}

	transformedMetalLbConfig, err := expandGkeonpremVmwareAdminClusterLoadBalancerMetalLbConfig(original["metal_lb_config"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["metalLbConfig"] = transformedMetalLbConfig
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerVipConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedControlPlaneVip, err := expandGkeonpremVmwareAdminClusterLoadBalancerVipConfigControlPlaneVip(original["control_plane_vip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPlaneVip); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPlaneVip"] = transformedControlPlaneVip
	}

	transformedAddonsVip, err := expandGkeonpremVmwareAdminClusterLoadBalancerVipConfigAddonsVip(original["addons_vip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAddonsVip); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["addonsVip"] = transformedAddonsVip
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerVipConfigControlPlaneVip(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerVipConfigAddonsVip(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerF5Config(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAddress, err := expandGkeonpremVmwareAdminClusterLoadBalancerF5ConfigAddress(original["address"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAddress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["address"] = transformedAddress
	}

	transformedPartition, err := expandGkeonpremVmwareAdminClusterLoadBalancerF5ConfigPartition(original["partition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPartition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["partition"] = transformedPartition
	}

	transformedSnatPool, err := expandGkeonpremVmwareAdminClusterLoadBalancerF5ConfigSnatPool(original["snat_pool"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSnatPool); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["snatPool"] = transformedSnatPool
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerF5ConfigAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerF5ConfigPartition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerF5ConfigSnatPool(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIngressHttpNodePort, err := expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigIngressHttpNodePort(original["ingress_http_node_port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIngressHttpNodePort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ingressHttpNodePort"] = transformedIngressHttpNodePort
	}

	transformedIngressHttpsNodePort, err := expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigIngressHttpsNodePort(original["ingress_https_node_port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIngressHttpsNodePort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ingressHttpsNodePort"] = transformedIngressHttpsNodePort
	}

	transformedControlPlaneNodePort, err := expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigControlPlaneNodePort(original["control_plane_node_port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedControlPlaneNodePort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["controlPlaneNodePort"] = transformedControlPlaneNodePort
	}

	transformedKonnectivityServerNodePort, err := expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigKonnectivityServerNodePort(original["konnectivity_server_node_port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKonnectivityServerNodePort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["konnectivityServerNodePort"] = transformedKonnectivityServerNodePort
	}

	transformedAddonsNodePort, err := expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigAddonsNodePort(original["addons_node_port"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAddonsNodePort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["addonsNodePort"] = transformedAddonsNodePort
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigIngressHttpNodePort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigIngressHttpsNodePort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigControlPlaneNodePort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigKonnectivityServerNodePort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerManualLbConfigAddonsNodePort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerMetalLbConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandGkeonpremVmwareAdminClusterLoadBalancerMetalLbConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterLoadBalancerMetalLbConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedResourcePool, err := expandGkeonpremVmwareAdminClusterVcenterResourcePool(original["resource_pool"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResourcePool); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["resourcePool"] = transformedResourcePool
	}

	transformedDatastore, err := expandGkeonpremVmwareAdminClusterVcenterDatastore(original["datastore"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatastore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datastore"] = transformedDatastore
	}

	transformedDatacenter, err := expandGkeonpremVmwareAdminClusterVcenterDatacenter(original["datacenter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatacenter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datacenter"] = transformedDatacenter
	}

	transformedCluster, err := expandGkeonpremVmwareAdminClusterVcenterCluster(original["cluster"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCluster); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cluster"] = transformedCluster
	}

	transformedFolder, err := expandGkeonpremVmwareAdminClusterVcenterFolder(original["folder"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFolder); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["folder"] = transformedFolder
	}

	transformedCaCertData, err := expandGkeonpremVmwareAdminClusterVcenterCaCertData(original["ca_cert_data"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCaCertData); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["caCertData"] = transformedCaCertData
	}

	transformedAddress, err := expandGkeonpremVmwareAdminClusterVcenterAddress(original["address"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAddress); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["address"] = transformedAddress
	}

	transformedDataDisk, err := expandGkeonpremVmwareAdminClusterVcenterDataDisk(original["data_disk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataDisk); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataDisk"] = transformedDataDisk
	}

	transformedStoragePolicyName, err := expandGkeonpremVmwareAdminClusterVcenterStoragePolicyName(original["storage_policy_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStoragePolicyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storagePolicyName"] = transformedStoragePolicyName
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterVcenterResourcePool(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterDatastore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterDatacenter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterFolder(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterCaCertData(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterAddress(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterDataDisk(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterVcenterStoragePolicyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterAntiAffinityGroups(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAagConfigDisabled, err := expandGkeonpremVmwareAdminClusterAntiAffinityGroupsAagConfigDisabled(original["aag_config_disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAagConfigDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["aagConfigDisabled"] = transformedAagConfigDisabled
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterAntiAffinityGroupsAagConfigDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterAutoRepairConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandGkeonpremVmwareAdminClusterAutoRepairConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterAutoRepairConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterAuthorization(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedViewerUsers, err := expandGkeonpremVmwareAdminClusterAuthorizationViewerUsers(original["viewer_users"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedViewerUsers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["viewerUsers"] = transformedViewerUsers
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterAuthorizationViewerUsers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedUsername, err := expandGkeonpremVmwareAdminClusterAuthorizationViewerUsersUsername(original["username"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["username"] = transformedUsername
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterAuthorizationViewerUsersUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRequiredPlatformVersion, err := expandGkeonpremVmwareAdminClusterPlatformConfigRequiredPlatformVersion(original["required_platform_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequiredPlatformVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requiredPlatformVersion"] = transformedRequiredPlatformVersion
	}

	transformedPlatformVersion, err := expandGkeonpremVmwareAdminClusterPlatformConfigPlatformVersion(original["platform_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPlatformVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["platformVersion"] = transformedPlatformVersion
	}

	transformedBundles, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundles(original["bundles"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBundles); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bundles"] = transformedBundles
	}

	transformedStatus, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatus(original["status"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["status"] = transformedStatus
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigRequiredPlatformVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigPlatformVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundles(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedVersion, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesVersion(original["version"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["version"] = transformedVersion
		}

		transformedStatus, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatus(original["status"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStatus); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["status"] = transformedStatus
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedErrorMessage, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusErrorMessage(original["error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["errorMessage"] = transformedErrorMessage
	}

	transformedConditions, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedReason, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsReason(original["reason"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedReason); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["reason"] = transformedReason
		}

		transformedMessage, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsMessage(original["message"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["message"] = transformedMessage
		}

		transformedLastTransitionTime, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsLastTransitionTime(original["last_transition_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLastTransitionTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["lastTransitionTime"] = transformedLastTransitionTime
		}

		transformedState, err := expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["state"] = transformedState
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsReason(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsLastTransitionTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigBundlesStatusConditionsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedErrorMessage, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusErrorMessage(original["error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["errorMessage"] = transformedErrorMessage
	}

	transformedConditions, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditions(original["conditions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConditions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conditions"] = transformedConditions
	}

	return transformed, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedReason, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsReason(original["reason"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedReason); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["reason"] = transformedReason
		}

		transformedMessage, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsMessage(original["message"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["message"] = transformedMessage
		}

		transformedLastTransitionTime, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsLastTransitionTime(original["last_transition_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLastTransitionTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["lastTransitionTime"] = transformedLastTransitionTime
		}

		transformedState, err := expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["state"] = transformedState
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsReason(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsLastTransitionTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterPlatformConfigStatusConditionsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGkeonpremVmwareAdminClusterEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
