// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networksecurity/AuthorizationPolicy.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/cai2hcl/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networksecurity

import (
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/converters/utils"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/models"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/caiasset"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/transport"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/transport"
)

type NetworkSecurityAuthorizationPolicyCai2hclConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkSecurityAuthorizationPolicyCai2hclConverter(provider *schema.Provider) models.Cai2hclConverter {
	schema := provider.ResourcesMap[NetworkSecurityAuthorizationPolicySchemaName].Schema

	return &NetworkSecurityAuthorizationPolicyCai2hclConverter{
		name:   NetworkSecurityAuthorizationPolicySchemaName,
		schema: schema,
	}
}

// Convert converts asset to HCL resource blocks.
func (c *NetworkSecurityAuthorizationPolicyCai2hclConverter) Convert(asset caiasset.Asset) ([]*models.TerraformResourceBlock, error) {
	var blocks []*models.TerraformResourceBlock
	block, err := c.convertResourceData(asset)
	if err != nil {
		return nil, err
	}
	blocks = append(blocks, block)
	return blocks, nil
}

func (c *NetworkSecurityAuthorizationPolicyCai2hclConverter) convertResourceData(asset caiasset.Asset) (*models.TerraformResourceBlock, error) {
	if asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	var err error
	res := asset.Resource.Data
	config := transport.NewConfig()
	d := &schema.ResourceData{}

	assetNameParts := strings.Split(asset.Name, "/")
	hclBlockName := assetNameParts[len(assetNameParts)-1]

	hclData := make(map[string]interface{})

	outputFields := map[string]struct{}{"create_time": struct{}{}, "effective_labels": struct{}{}, "terraform_labels": struct{}{}, "update_time": struct{}{}}
	utils.ParseUrlParamValuesFromAssetName(asset.Name, "//networksecurity.googleapis.com/projects/{{project}}/locations/{{location}}/authorizationPolicies/{{name}}", outputFields, hclData)

	hclData["labels"] = flattenNetworkSecurityAuthorizationPolicyLabels(res["labels"], d, config)
	hclData["description"] = flattenNetworkSecurityAuthorizationPolicyDescription(res["description"], d, config)
	hclData["action"] = flattenNetworkSecurityAuthorizationPolicyAction(res["action"], d, config)
	hclData["rules"] = flattenNetworkSecurityAuthorizationPolicyRules(res["rules"], d, config)

	ctyVal, err := utils.MapToCtyValWithSchema(hclData, c.schema)
	if err != nil {
		return nil, err
	}
	return &models.TerraformResourceBlock{
		Labels: []string{c.name, hclBlockName},
		Value:  ctyVal,
	}, nil
}

func flattenNetworkSecurityAuthorizationPolicyLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return tgcresource.RemoveTerraformAttributionLabel(v)
}
func flattenNetworkSecurityAuthorizationPolicyDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"sources":      flattenNetworkSecurityAuthorizationPolicyRulesSources(original["sources"], d, config),
			"destinations": flattenNetworkSecurityAuthorizationPolicyRulesDestinations(original["destinations"], d, config),
		})
	}
	return transformed
}

func flattenNetworkSecurityAuthorizationPolicyRulesSources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"principals": flattenNetworkSecurityAuthorizationPolicyRulesSourcesPrincipals(original["principals"], d, config),
			"ip_blocks":  flattenNetworkSecurityAuthorizationPolicyRulesSourcesIpBlocks(original["ipBlocks"], d, config),
		})
	}
	return transformed
}

func flattenNetworkSecurityAuthorizationPolicyRulesSourcesPrincipals(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesSourcesIpBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"hosts":             flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHosts(original["hosts"], d, config),
			"ports":             flattenNetworkSecurityAuthorizationPolicyRulesDestinationsPorts(original["ports"], d, config),
			"methods":           flattenNetworkSecurityAuthorizationPolicyRulesDestinationsMethods(original["methods"], d, config),
			"http_header_match": flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatch(original["httpHeaderMatch"], d, config),
		})
	}
	return transformed
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHosts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsPorts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsMethods(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["header_name"] =
		flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchHeaderName(original["headerName"], d, config)
	transformed["regex_match"] =
		flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchRegexMatch(original["regexMatch"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchHeaderName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
