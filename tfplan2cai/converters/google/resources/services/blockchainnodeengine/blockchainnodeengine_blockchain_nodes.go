// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package blockchainnodeengine

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const BlockchainNodeEngineBlockchainNodesAssetType string = "blockchainnodeengine.googleapis.com/BlockchainNodes"

func ResourceConverterBlockchainNodeEngineBlockchainNodes() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: BlockchainNodeEngineBlockchainNodesAssetType,
		Convert:   GetBlockchainNodeEngineBlockchainNodesCaiObject,
	}
}

func GetBlockchainNodeEngineBlockchainNodesCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//blockchainnodeengine.googleapis.com/projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetBlockchainNodeEngineBlockchainNodesApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: BlockchainNodeEngineBlockchainNodesAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/blockchainnodeengine/v1/rest",
				DiscoveryName:        "BlockchainNodes",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetBlockchainNodeEngineBlockchainNodesApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	ethereumDetailsProp, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetails(d.Get("ethereum_details"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("ethereum_details"); !tpgresource.IsEmptyValue(reflect.ValueOf(ethereumDetailsProp)) && (ok || !reflect.DeepEqual(v, ethereumDetailsProp)) {
		obj["ethereumDetails"] = ethereumDetailsProp
	}
	blockchainTypeProp, err := expandBlockchainNodeEngineBlockchainNodesBlockchainType(d.Get("blockchain_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("blockchain_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(blockchainTypeProp)) && (ok || !reflect.DeepEqual(v, blockchainTypeProp)) {
		obj["blockchainType"] = blockchainTypeProp
	}
	labelsProp, err := expandBlockchainNodeEngineBlockchainNodesEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValidatorConfig, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfig(original["validator_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValidatorConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["validatorConfig"] = transformedValidatorConfig
	}

	transformedGethDetails, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetails(original["geth_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGethDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gethDetails"] = transformedGethDetails
	}

	transformedAdditionalEndpoints, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpoints(original["additional_endpoints"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalEndpoints); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalEndpoints"] = transformedAdditionalEndpoints
	}

	transformedNetwork, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedNodeType, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNodeType(original["node_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeType"] = transformedNodeType
	}

	transformedExecutionClient, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsExecutionClient(original["execution_client"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExecutionClient); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["executionClient"] = transformedExecutionClient
	}

	transformedConsensusClient, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsConsensusClient(original["consensus_client"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConsensusClient); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["consensusClient"] = transformedConsensusClient
	}

	transformedApiEnableAdmin, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableAdmin(original["api_enable_admin"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiEnableAdmin); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiEnableAdmin"] = transformedApiEnableAdmin
	}

	transformedApiEnableDebug, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableDebug(original["api_enable_debug"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiEnableDebug); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiEnableDebug"] = transformedApiEnableDebug
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMevRelayUrls, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfigMevRelayUrls(original["mev_relay_urls"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMevRelayUrls); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mevRelayUrls"] = transformedMevRelayUrls
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsValidatorConfigMevRelayUrls(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGarbageCollectionMode, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetailsGarbageCollectionMode(original["garbage_collection_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGarbageCollectionMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["garbageCollectionMode"] = transformedGarbageCollectionMode
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsGethDetailsGarbageCollectionMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpoints(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBeaconApiEndpoint, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconApiEndpoint(original["beacon_api_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBeaconApiEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["beaconApiEndpoint"] = transformedBeaconApiEndpoint
	}

	transformedBeaconPrometheusMetricsApiEndpoint, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconPrometheusMetricsApiEndpoint(original["beacon_prometheus_metrics_api_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBeaconPrometheusMetricsApiEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["beaconPrometheusMetricsApiEndpoint"] = transformedBeaconPrometheusMetricsApiEndpoint
	}

	transformedExecutionClientPrometheusMetricsApiEndpoint, err := expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsExecutionClientPrometheusMetricsApiEndpoint(original["execution_client_prometheus_metrics_api_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExecutionClientPrometheusMetricsApiEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["executionClientPrometheusMetricsApiEndpoint"] = transformedExecutionClientPrometheusMetricsApiEndpoint
	}

	return transformed, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconApiEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsBeaconPrometheusMetricsApiEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsAdditionalEndpointsExecutionClientPrometheusMetricsApiEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsNodeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsExecutionClient(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsConsensusClient(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableAdmin(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEthereumDetailsApiEnableDebug(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesBlockchainType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBlockchainNodeEngineBlockchainNodesEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
