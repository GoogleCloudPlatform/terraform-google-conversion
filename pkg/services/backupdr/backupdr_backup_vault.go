// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/backupdr/BackupVault.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package backupdr

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = fmt.Sprintf
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = schema.Noop
	_ = validation.All
	_ = tgcresource.RemoveTerraformAttributionLabel
	_ = tpgresource.GetRegion
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
)

const BackupDRBackupVaultAssetType string = "backupdr.googleapis.com/BackupVault"

const BackupDRBackupVaultSchemaName string = "google_backup_dr_backup_vault"

func ResourceBackupDRBackupVault() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"backup_minimum_enforced_retention_duration": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.`,
			},
			"backup_vault_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Required. ID of the requesting object.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The GCP location for the backup vault.`,
			},
			"access_restriction": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ACCESS_RESTRICTION_UNSPECIFIED", "WITHIN_PROJECT", "WITHIN_ORGANIZATION", "UNRESTRICTED", "WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA", ""}),
				Description:  `Access restriction for the backup vault. Default value is 'WITHIN_ORGANIZATION' if not provided during creation. Default value: "WITHIN_ORGANIZATION" Possible values: ["ACCESS_RESTRICTION_UNSPECIFIED", "WITHIN_PROJECT", "WITHIN_ORGANIZATION", "UNRESTRICTED", "WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA"]`,
				Default:      "WITHIN_ORGANIZATION",
			},
			"allow_missing": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.`,
				Default:     false,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Optional. User annotations. See https://google.aip.dev/128#annotations
Stores small amounts of arbitrary data. 

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"backup_retention_inheritance": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"BACKUP_RETENTION_INHERITANCE_UNSPECIFIED", "INHERIT_VAULT_RETENTION", "MATCH_BACKUP_EXPIRE_TIME", ""}),
				Description:  `How a backup's enforced retention end time is inherited. Default value is 'INHERIT_VAULT_RETENTION' if not provided during creation. Possible values: ["BACKUP_RETENTION_INHERITANCE_UNSPECIFIED", "INHERIT_VAULT_RETENTION", "MATCH_BACKUP_EXPIRE_TIME"]`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Optional. The description of the BackupVault instance (2048 characters or less).`,
			},
			"effective_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Optional. Time after which the BackupVault resource is locked.`,
			},
			"force_delete": {
				Type:       schema.TypeBool,
				Optional:   true,
				Deprecated: "`force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.",
				Description: `If set, the following restrictions against deletion of the backup vault instance can be overridden:
   * deletion of a backup vault instance containing no backups, but still containing empty datasources.
   * deletion of a backup vault instance that is being referenced by an active backup plan.`,
				Default:       false,
				ConflictsWith: []string{},
			},
			"force_update": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `If set, allow update to extend the minimum enforced retention for backup vault. This overrides
 the restriction against conflicting retention periods. This conflict may occur when the
 expiration schedule defined by the associated backup plan is shorter than the minimum
 retention set by the backup vault.`,
				Default: false,
			},
			"ignore_backup_plan_references": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `If set, the following restrictions against deletion of the backup vault instance can be overridden:
   * deletion of a backup vault instance that is being referenced by an active backup plan.`,
				Default: false,
			},
			"ignore_inactive_datasources": {
				Type:     schema.TypeBool,
				Optional: true,
				Description: `If set, the following restrictions against deletion of the backup vault instance can be overridden:
   * deletion of a backup vault instance containing no backups, but still containing empty datasources.`,
				Default:       false,
				ConflictsWith: []string{},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Optional. Resource labels to represent user provided metadata. 

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"backup_count": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The number of backups in this backup vault.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time when the instance was created.`,
			},
			"deletable": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Output only. Set to true when there are no backups nested under this resource.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Identifier. The resource name.`,
			},
			"service_account": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.`,
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Output only. The BackupVault resource instance state. 
 Possible values:
 STATE_UNSPECIFIED
 CREATING
 ACTIVE
 DELETING
 ERROR`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"total_stored_bytes": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Total size of the storage used by all backup resources.`,
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Output only Immutable after resource creation until resource deletion.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time when the instance was updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
