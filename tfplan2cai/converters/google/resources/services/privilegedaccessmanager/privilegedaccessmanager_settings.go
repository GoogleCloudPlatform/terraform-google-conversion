// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/privilegedaccessmanager/Settings.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package privilegedaccessmanager

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const PrivilegedAccessManagerSettingsAssetType string = "privilegedaccessmanager.googleapis.com/Settings"

func ResourceConverterPrivilegedAccessManagerSettings() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: PrivilegedAccessManagerSettingsAssetType,
		Convert:   GetPrivilegedAccessManagerSettingsCaiObject,
	}
}

func GetPrivilegedAccessManagerSettingsCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//privilegedaccessmanager.googleapis.com/{{parent}}/locations/{{location}}/settings")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetPrivilegedAccessManagerSettingsApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: PrivilegedAccessManagerSettingsAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/privilegedaccessmanager/v1beta/rest",
				DiscoveryName:        "Settings",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetPrivilegedAccessManagerSettingsApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	serviceAccountApproverSettingsProp, err := expandPrivilegedAccessManagerSettingsServiceAccountApproverSettings(d.Get("service_account_approver_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("service_account_approver_settings"); ok || !reflect.DeepEqual(v, serviceAccountApproverSettingsProp) {
		obj["serviceAccountApproverSettings"] = serviceAccountApproverSettingsProp
	}
	emailNotificationSettingsProp, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettings(d.Get("email_notification_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("email_notification_settings"); ok || !reflect.DeepEqual(v, emailNotificationSettingsProp) {
		obj["emailNotificationSettings"] = emailNotificationSettingsProp
	}

	return obj, nil
}

func expandPrivilegedAccessManagerSettingsServiceAccountApproverSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandPrivilegedAccessManagerSettingsServiceAccountApproverSettingsEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsServiceAccountApproverSettingsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisableAllNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsDisableAllNotifications(original["disable_all_notifications"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["disableAllNotifications"] = transformedDisableAllNotifications
	}

	transformedCustomNotificationBehavior, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehavior(original["custom_notification_behavior"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomNotificationBehavior); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customNotificationBehavior"] = transformedCustomNotificationBehavior
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsDisableAllNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehavior(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRequesterNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotifications(original["requester_notifications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequesterNotifications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requesterNotifications"] = transformedRequesterNotifications
	}

	transformedAdminNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotifications(original["admin_notifications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminNotifications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminNotifications"] = transformedAdminNotifications
	}

	transformedApproverNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotifications(original["approver_notifications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApproverNotifications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["approverNotifications"] = transformedApproverNotifications
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEntitlementAssigned, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsEntitlementAssigned(original["entitlement_assigned"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntitlementAssigned); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["entitlementAssigned"] = transformedEntitlementAssigned
	}

	transformedGrantActivated, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivated(original["grant_activated"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivated); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivated"] = transformedGrantActivated
	}

	transformedGrantDenied, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantDenied(original["grant_denied"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantDenied); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantDenied"] = transformedGrantDenied
	}

	transformedGrantExpired, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExpired(original["grant_expired"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantExpired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantExpired"] = transformedGrantExpired
	}

	transformedGrantEnded, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantEnded(original["grant_ended"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantEnded); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantEnded"] = transformedGrantEnded
	}

	transformedGrantRevoked, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantRevoked(original["grant_revoked"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantRevoked); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantRevoked"] = transformedGrantRevoked
	}

	transformedGrantExternallyModified, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExternallyModified(original["grant_externally_modified"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantExternallyModified); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantExternallyModified"] = transformedGrantExternallyModified
	}

	transformedGrantActivationFailed, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivationFailed(original["grant_activation_failed"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivationFailed); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivationFailed"] = transformedGrantActivationFailed
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsEntitlementAssigned(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivated(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantDenied(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExpired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantEnded(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantRevoked(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExternallyModified(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivationFailed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGrantActivated, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivated(original["grant_activated"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivated); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivated"] = transformedGrantActivated
	}

	transformedGrantEnded, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantEnded(original["grant_ended"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantEnded); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantEnded"] = transformedGrantEnded
	}

	transformedGrantExternallyModified, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantExternallyModified(original["grant_externally_modified"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantExternallyModified); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantExternallyModified"] = transformedGrantExternallyModified
	}

	transformedGrantActivationFailed, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivationFailed(original["grant_activation_failed"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivationFailed); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivationFailed"] = transformedGrantActivationFailed
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivated(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantEnded(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantExternallyModified(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivationFailed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPendingApproval, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotificationsPendingApproval(original["pending_approval"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPendingApproval); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pendingApproval"] = transformedPendingApproval
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotificationsPendingApproval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
