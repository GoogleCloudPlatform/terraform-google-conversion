// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/ApiProduct.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApigeeApiProductAssetType string = "apigee.googleapis.com/ApiProduct"

func ResourceConverterApigeeApiProduct() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApigeeApiProductAssetType,
		Convert:   GetApigeeApiProductCaiObject,
	}
}

func GetApigeeApiProductCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apigee.googleapis.com/{{org_id}}/apiproducts/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApigeeApiProductApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApigeeApiProductAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apigee/v1/rest",
				DiscoveryName:        "ApiProduct",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApigeeApiProductApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandApigeeApiProductName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	displayNameProp, err := expandApigeeApiProductDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandApigeeApiProductDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	approvalTypeProp, err := expandApigeeApiProductApprovalType(d.Get("approval_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("approval_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(approvalTypeProp)) && (ok || !reflect.DeepEqual(v, approvalTypeProp)) {
		obj["approvalType"] = approvalTypeProp
	}
	attributesProp, err := expandApigeeApiProductAttributes(d.Get("attributes"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("attributes"); !tpgresource.IsEmptyValue(reflect.ValueOf(attributesProp)) && (ok || !reflect.DeepEqual(v, attributesProp)) {
		obj["attributes"] = attributesProp
	}
	apiResourcesProp, err := expandApigeeApiProductApiResources(d.Get("api_resources"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("api_resources"); !tpgresource.IsEmptyValue(reflect.ValueOf(apiResourcesProp)) && (ok || !reflect.DeepEqual(v, apiResourcesProp)) {
		obj["apiResources"] = apiResourcesProp
	}
	environmentsProp, err := expandApigeeApiProductEnvironments(d.Get("environments"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("environments"); !tpgresource.IsEmptyValue(reflect.ValueOf(environmentsProp)) && (ok || !reflect.DeepEqual(v, environmentsProp)) {
		obj["environments"] = environmentsProp
	}
	proxiesProp, err := expandApigeeApiProductProxies(d.Get("proxies"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("proxies"); !tpgresource.IsEmptyValue(reflect.ValueOf(proxiesProp)) && (ok || !reflect.DeepEqual(v, proxiesProp)) {
		obj["proxies"] = proxiesProp
	}
	scopesProp, err := expandApigeeApiProductScopes(d.Get("scopes"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("scopes"); !tpgresource.IsEmptyValue(reflect.ValueOf(scopesProp)) && (ok || !reflect.DeepEqual(v, scopesProp)) {
		obj["scopes"] = scopesProp
	}
	quotaProp, err := expandApigeeApiProductQuota(d.Get("quota"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("quota"); !tpgresource.IsEmptyValue(reflect.ValueOf(quotaProp)) && (ok || !reflect.DeepEqual(v, quotaProp)) {
		obj["quota"] = quotaProp
	}
	quotaIntervalProp, err := expandApigeeApiProductQuotaInterval(d.Get("quota_interval"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("quota_interval"); !tpgresource.IsEmptyValue(reflect.ValueOf(quotaIntervalProp)) && (ok || !reflect.DeepEqual(v, quotaIntervalProp)) {
		obj["quotaInterval"] = quotaIntervalProp
	}
	quotaTimeUnitProp, err := expandApigeeApiProductQuotaTimeUnit(d.Get("quota_time_unit"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("quota_time_unit"); !tpgresource.IsEmptyValue(reflect.ValueOf(quotaTimeUnitProp)) && (ok || !reflect.DeepEqual(v, quotaTimeUnitProp)) {
		obj["quotaTimeUnit"] = quotaTimeUnitProp
	}
	operationGroupProp, err := expandApigeeApiProductOperationGroup(d.Get("operation_group"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("operation_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(operationGroupProp)) && (ok || !reflect.DeepEqual(v, operationGroupProp)) {
		obj["operationGroup"] = operationGroupProp
	}
	graphqlOperationGroupProp, err := expandApigeeApiProductGraphqlOperationGroup(d.Get("graphql_operation_group"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("graphql_operation_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(graphqlOperationGroupProp)) && (ok || !reflect.DeepEqual(v, graphqlOperationGroupProp)) {
		obj["graphqlOperationGroup"] = graphqlOperationGroupProp
	}
	grpcOperationGroupProp, err := expandApigeeApiProductGrpcOperationGroup(d.Get("grpc_operation_group"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("grpc_operation_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(grpcOperationGroupProp)) && (ok || !reflect.DeepEqual(v, grpcOperationGroupProp)) {
		obj["grpcOperationGroup"] = grpcOperationGroupProp
	}
	quotaCounterScopeProp, err := expandApigeeApiProductQuotaCounterScope(d.Get("quota_counter_scope"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("quota_counter_scope"); !tpgresource.IsEmptyValue(reflect.ValueOf(quotaCounterScopeProp)) && (ok || !reflect.DeepEqual(v, quotaCounterScopeProp)) {
		obj["quotaCounterScope"] = quotaCounterScopeProp
	}
	spaceProp, err := expandApigeeApiProductSpace(d.Get("space"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("space"); !tpgresource.IsEmptyValue(reflect.ValueOf(spaceProp)) && (ok || !reflect.DeepEqual(v, spaceProp)) {
		obj["space"] = spaceProp
	}

	return obj, nil
}

func expandApigeeApiProductName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductApprovalType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeApiProductAttributesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeApiProductAttributesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductAttributesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductAttributesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductApiResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeApiProductEnvironments(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeApiProductProxies(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeApiProductScopes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductQuota(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductQuotaInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductQuotaTimeUnit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOperationConfigs, err := expandApigeeApiProductOperationGroupOperationConfigs(original["operation_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationConfigs"] = transformedOperationConfigs
	}

	transformedOperationConfigType, err := expandApigeeApiProductOperationGroupOperationConfigType(original["operation_config_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationConfigType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationConfigType"] = transformedOperationConfigType
	}

	return transformed, nil
}

func expandApigeeApiProductOperationGroupOperationConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedApiSource, err := expandApigeeApiProductOperationGroupOperationConfigsApiSource(original["api_source"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedApiSource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["apiSource"] = transformedApiSource
		}

		transformedOperations, err := expandApigeeApiProductOperationGroupOperationConfigsOperations(original["operations"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["operations"] = transformedOperations
		}

		transformedQuota, err := expandApigeeApiProductOperationGroupOperationConfigsQuota(original["quota"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQuota); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["quota"] = transformedQuota
		}

		transformedAttributes, err := expandApigeeApiProductOperationGroupOperationConfigsAttributes(original["attributes"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttributes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attributes"] = transformedAttributes
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsApiSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedResource, err := expandApigeeApiProductOperationGroupOperationConfigsOperationsResource(original["resource"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resource"] = transformedResource
		}

		transformedMethods, err := expandApigeeApiProductOperationGroupOperationConfigsOperationsMethods(original["methods"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["methods"] = transformedMethods
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsOperationsResource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsOperationsMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsQuota(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLimit, err := expandApigeeApiProductOperationGroupOperationConfigsQuotaLimit(original["limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["limit"] = transformedLimit
	}

	transformedInterval, err := expandApigeeApiProductOperationGroupOperationConfigsQuotaInterval(original["interval"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterval); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interval"] = transformedInterval
	}

	transformedTimeUnit, err := expandApigeeApiProductOperationGroupOperationConfigsQuotaTimeUnit(original["time_unit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeUnit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeUnit"] = transformedTimeUnit
	}

	return transformed, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsQuotaLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsQuotaInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsQuotaTimeUnit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeApiProductOperationGroupOperationConfigsAttributesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeApiProductOperationGroupOperationConfigsAttributesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsAttributesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigsAttributesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductOperationGroupOperationConfigType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOperationConfigs, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigs(original["operation_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationConfigs"] = transformedOperationConfigs
	}

	transformedOperationConfigType, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigType(original["operation_config_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationConfigType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationConfigType"] = transformedOperationConfigType
	}

	return transformed, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedApiSource, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsApiSource(original["api_source"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedApiSource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["apiSource"] = transformedApiSource
		}

		transformedOperations, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsOperations(original["operations"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["operations"] = transformedOperations
		}

		transformedQuota, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuota(original["quota"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQuota); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["quota"] = transformedQuota
		}

		transformedAttributes, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsAttributes(original["attributes"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttributes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attributes"] = transformedAttributes
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsApiSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedOperationTypes, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsOperationsOperationTypes(original["operation_types"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOperationTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["operationTypes"] = transformedOperationTypes
		}

		transformedOperation, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsOperationsOperation(original["operation"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOperation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["operation"] = transformedOperation
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsOperationsOperationTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsOperationsOperation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuota(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLimit, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuotaLimit(original["limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["limit"] = transformedLimit
	}

	transformedInterval, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuotaInterval(original["interval"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterval); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interval"] = transformedInterval
	}

	transformedTimeUnit, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuotaTimeUnit(original["time_unit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeUnit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeUnit"] = transformedTimeUnit
	}

	return transformed, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuotaLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuotaInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsQuotaTimeUnit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsAttributesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeApiProductGraphqlOperationGroupOperationConfigsAttributesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsAttributesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigsAttributesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGraphqlOperationGroupOperationConfigType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOperationConfigs, err := expandApigeeApiProductGrpcOperationGroupOperationConfigs(original["operation_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationConfigs"] = transformedOperationConfigs
	}

	return transformed, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedApiSource, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsApiSource(original["api_source"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedApiSource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["apiSource"] = transformedApiSource
		}

		transformedMethods, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsMethods(original["methods"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["methods"] = transformedMethods
		}

		transformedQuota, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsQuota(original["quota"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQuota); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["quota"] = transformedQuota
		}

		transformedAttributes, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsAttributes(original["attributes"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAttributes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["attributes"] = transformedAttributes
		}

		transformedService, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsService(original["service"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["service"] = transformedService
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsApiSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsQuota(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLimit, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsQuotaLimit(original["limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["limit"] = transformedLimit
	}

	transformedInterval, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsQuotaInterval(original["interval"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInterval); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["interval"] = transformedInterval
	}

	transformedTimeUnit, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsQuotaTimeUnit(original["time_unit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeUnit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeUnit"] = transformedTimeUnit
	}

	return transformed, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsQuotaLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsQuotaInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsQuotaTimeUnit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsAttributes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsAttributesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeApiProductGrpcOperationGroupOperationConfigsAttributesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsAttributesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsAttributesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductGrpcOperationGroupOperationConfigsService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductQuotaCounterScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeApiProductSpace(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
