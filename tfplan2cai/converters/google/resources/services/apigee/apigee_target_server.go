// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApigeeTargetServerAssetType string = "apigee.googleapis.com/TargetServer"

func ResourceConverterApigeeTargetServer() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApigeeTargetServerAssetType,
		Convert:   GetApigeeTargetServerCaiObject,
	}
}

func GetApigeeTargetServerCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apigee.googleapis.com/{{env_id}}/targetservers/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApigeeTargetServerApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApigeeTargetServerAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apigee/v1/rest",
				DiscoveryName:        "TargetServer",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApigeeTargetServerApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandApigeeTargetServerName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	descriptionProp, err := expandApigeeTargetServerDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	hostProp, err := expandApigeeTargetServerHost(d.Get("host"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("host"); !tpgresource.IsEmptyValue(reflect.ValueOf(hostProp)) && (ok || !reflect.DeepEqual(v, hostProp)) {
		obj["host"] = hostProp
	}
	portProp, err := expandApigeeTargetServerPort(d.Get("port"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("port"); !tpgresource.IsEmptyValue(reflect.ValueOf(portProp)) && (ok || !reflect.DeepEqual(v, portProp)) {
		obj["port"] = portProp
	}
	isEnabledProp, err := expandApigeeTargetServerIsEnabled(d.Get("is_enabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("is_enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(isEnabledProp)) && (ok || !reflect.DeepEqual(v, isEnabledProp)) {
		obj["isEnabled"] = isEnabledProp
	}
	sSLInfoProp, err := expandApigeeTargetServerSSLInfo(d.Get("s_sl_info"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("s_sl_info"); !tpgresource.IsEmptyValue(reflect.ValueOf(sSLInfoProp)) && (ok || !reflect.DeepEqual(v, sSLInfoProp)) {
		obj["sSLInfo"] = sSLInfoProp
	}
	protocolProp, err := expandApigeeTargetServerProtocol(d.Get("protocol"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("protocol"); !tpgresource.IsEmptyValue(reflect.ValueOf(protocolProp)) && (ok || !reflect.DeepEqual(v, protocolProp)) {
		obj["protocol"] = protocolProp
	}

	return obj, nil
}

func expandApigeeTargetServerName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerIsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandApigeeTargetServerSSLInfoEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	transformedClientAuthEnabled, err := expandApigeeTargetServerSSLInfoClientAuthEnabled(original["client_auth_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientAuthEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientAuthEnabled"] = transformedClientAuthEnabled
	}

	transformedKeyStore, err := expandApigeeTargetServerSSLInfoKeyStore(original["key_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKeyStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["keyStore"] = transformedKeyStore
	}

	transformedKeyAlias, err := expandApigeeTargetServerSSLInfoKeyAlias(original["key_alias"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKeyAlias); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["keyAlias"] = transformedKeyAlias
	}

	transformedTrustStore, err := expandApigeeTargetServerSSLInfoTrustStore(original["trust_store"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTrustStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["trustStore"] = transformedTrustStore
	}

	transformedIgnoreValidationErrors, err := expandApigeeTargetServerSSLInfoIgnoreValidationErrors(original["ignore_validation_errors"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreValidationErrors); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreValidationErrors"] = transformedIgnoreValidationErrors
	}

	transformedProtocols, err := expandApigeeTargetServerSSLInfoProtocols(original["protocols"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProtocols); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["protocols"] = transformedProtocols
	}

	transformedCiphers, err := expandApigeeTargetServerSSLInfoCiphers(original["ciphers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCiphers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ciphers"] = transformedCiphers
	}

	transformedCommonName, err := expandApigeeTargetServerSSLInfoCommonName(original["common_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommonName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commonName"] = transformedCommonName
	}

	return transformed, nil
}

func expandApigeeTargetServerSSLInfoEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoClientAuthEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoKeyStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoKeyAlias(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoTrustStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoIgnoreValidationErrors(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoProtocols(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoCiphers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoCommonName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedValue, err := expandApigeeTargetServerSSLInfoCommonNameValue(original["value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["value"] = transformedValue
	}

	transformedWildcardMatch, err := expandApigeeTargetServerSSLInfoCommonNameWildcardMatch(original["wildcard_match"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWildcardMatch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["wildcardMatch"] = transformedWildcardMatch
	}

	return transformed, nil
}

func expandApigeeTargetServerSSLInfoCommonNameValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerSSLInfoCommonNameWildcardMatch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeTargetServerProtocol(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
