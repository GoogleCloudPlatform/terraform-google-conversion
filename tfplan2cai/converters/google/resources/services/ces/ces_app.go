// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/ces/App.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package ces

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const CESAppAssetType string = "ces.googleapis.com/App"

func ResourceConverterCESApp() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: CESAppAssetType,
		Convert:   GetCESAppCaiObject,
	}
}

func GetCESAppCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//ces.googleapis.com/projects/{{project}}/locations/{{location}}/apps/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetCESAppApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: CESAppAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/ces/v1/rest",
				DiscoveryName:        "App",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetCESAppApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	audioProcessingConfigProp, err := expandCESAppAudioProcessingConfig(d.Get("audio_processing_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("audio_processing_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(audioProcessingConfigProp)) && (ok || !reflect.DeepEqual(v, audioProcessingConfigProp)) {
		obj["audioProcessingConfig"] = audioProcessingConfigProp
	}
	dataStoreSettingsProp, err := expandCESAppDataStoreSettings(d.Get("data_store_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("data_store_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(dataStoreSettingsProp)) && (ok || !reflect.DeepEqual(v, dataStoreSettingsProp)) {
		obj["dataStoreSettings"] = dataStoreSettingsProp
	}
	defaultChannelProfileProp, err := expandCESAppDefaultChannelProfile(d.Get("default_channel_profile"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("default_channel_profile"); !tpgresource.IsEmptyValue(reflect.ValueOf(defaultChannelProfileProp)) && (ok || !reflect.DeepEqual(v, defaultChannelProfileProp)) {
		obj["defaultChannelProfile"] = defaultChannelProfileProp
	}
	descriptionProp, err := expandCESAppDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCESAppDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	evaluationMetricsThresholdsProp, err := expandCESAppEvaluationMetricsThresholds(d.Get("evaluation_metrics_thresholds"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("evaluation_metrics_thresholds"); !tpgresource.IsEmptyValue(reflect.ValueOf(evaluationMetricsThresholdsProp)) && (ok || !reflect.DeepEqual(v, evaluationMetricsThresholdsProp)) {
		obj["evaluationMetricsThresholds"] = evaluationMetricsThresholdsProp
	}
	globalInstructionProp, err := expandCESAppGlobalInstruction(d.Get("global_instruction"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("global_instruction"); !tpgresource.IsEmptyValue(reflect.ValueOf(globalInstructionProp)) && (ok || !reflect.DeepEqual(v, globalInstructionProp)) {
		obj["globalInstruction"] = globalInstructionProp
	}
	guardrailsProp, err := expandCESAppGuardrails(d.Get("guardrails"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("guardrails"); !tpgresource.IsEmptyValue(reflect.ValueOf(guardrailsProp)) && (ok || !reflect.DeepEqual(v, guardrailsProp)) {
		obj["guardrails"] = guardrailsProp
	}
	languageSettingsProp, err := expandCESAppLanguageSettings(d.Get("language_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("language_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(languageSettingsProp)) && (ok || !reflect.DeepEqual(v, languageSettingsProp)) {
		obj["languageSettings"] = languageSettingsProp
	}
	loggingSettingsProp, err := expandCESAppLoggingSettings(d.Get("logging_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("logging_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(loggingSettingsProp)) && (ok || !reflect.DeepEqual(v, loggingSettingsProp)) {
		obj["loggingSettings"] = loggingSettingsProp
	}
	metadataProp, err := expandCESAppMetadata(d.Get("metadata"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(metadataProp)) && (ok || !reflect.DeepEqual(v, metadataProp)) {
		obj["metadata"] = metadataProp
	}
	modelSettingsProp, err := expandCESAppModelSettings(d.Get("model_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("model_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(modelSettingsProp)) && (ok || !reflect.DeepEqual(v, modelSettingsProp)) {
		obj["modelSettings"] = modelSettingsProp
	}
	rootAgentProp, err := expandCESAppRootAgent(d.Get("root_agent"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("root_agent"); !tpgresource.IsEmptyValue(reflect.ValueOf(rootAgentProp)) && (ok || !reflect.DeepEqual(v, rootAgentProp)) {
		obj["rootAgent"] = rootAgentProp
	}
	timeZoneSettingsProp, err := expandCESAppTimeZoneSettings(d.Get("time_zone_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("time_zone_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(timeZoneSettingsProp)) && (ok || !reflect.DeepEqual(v, timeZoneSettingsProp)) {
		obj["timeZoneSettings"] = timeZoneSettingsProp
	}
	variableDeclarationsProp, err := expandCESAppVariableDeclarations(d.Get("variable_declarations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("variable_declarations"); !tpgresource.IsEmptyValue(reflect.ValueOf(variableDeclarationsProp)) && (ok || !reflect.DeepEqual(v, variableDeclarationsProp)) {
		obj["variableDeclarations"] = variableDeclarationsProp
	}

	return obj, nil
}

func expandCESAppAudioProcessingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAmbientSoundConfig, err := expandCESAppAudioProcessingConfigAmbientSoundConfig(original["ambient_sound_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAmbientSoundConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ambientSoundConfig"] = transformedAmbientSoundConfig
	}

	transformedBargeInConfig, err := expandCESAppAudioProcessingConfigBargeInConfig(original["barge_in_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBargeInConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bargeInConfig"] = transformedBargeInConfig
	}

	transformedInactivityTimeout, err := expandCESAppAudioProcessingConfigInactivityTimeout(original["inactivity_timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInactivityTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inactivityTimeout"] = transformedInactivityTimeout
	}

	transformedSynthesizeSpeechConfigs, err := expandCESAppAudioProcessingConfigSynthesizeSpeechConfigs(original["synthesize_speech_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSynthesizeSpeechConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["synthesizeSpeechConfigs"] = transformedSynthesizeSpeechConfigs
	}

	return transformed, nil
}

func expandCESAppAudioProcessingConfigAmbientSoundConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGcsUri, err := expandCESAppAudioProcessingConfigAmbientSoundConfigGcsUri(original["gcs_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcsUri"] = transformedGcsUri
	}

	transformedPrebuiltAmbientSound, err := expandCESAppAudioProcessingConfigAmbientSoundConfigPrebuiltAmbientSound(original["prebuilt_ambient_sound"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrebuiltAmbientSound); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["prebuiltAmbientSound"] = transformedPrebuiltAmbientSound
	}

	transformedVolumeGainDb, err := expandCESAppAudioProcessingConfigAmbientSoundConfigVolumeGainDb(original["volume_gain_db"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeGainDb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeGainDb"] = transformedVolumeGainDb
	}

	return transformed, nil
}

func expandCESAppAudioProcessingConfigAmbientSoundConfigGcsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppAudioProcessingConfigAmbientSoundConfigPrebuiltAmbientSound(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppAudioProcessingConfigAmbientSoundConfigVolumeGainDb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppAudioProcessingConfigBargeInConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBargeInAwareness, err := expandCESAppAudioProcessingConfigBargeInConfigBargeInAwareness(original["barge_in_awareness"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBargeInAwareness); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bargeInAwareness"] = transformedBargeInAwareness
	}

	return transformed, nil
}

func expandCESAppAudioProcessingConfigBargeInConfigBargeInAwareness(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppAudioProcessingConfigInactivityTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppAudioProcessingConfigSynthesizeSpeechConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedVoice, err := expandCESAppAudioProcessingConfigSynthesizeSpeechConfigsVoice(original["voice"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVoice); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["voice"] = transformedVoice
		}

		transformedSpeakingRate, err := expandCESAppAudioProcessingConfigSynthesizeSpeechConfigsSpeakingRate(original["speaking_rate"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSpeakingRate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["speakingRate"] = transformedSpeakingRate
		}

		transformedLanguageCode, err := tpgresource.ExpandString(original["language_code"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedLanguageCode] = transformed
	}
	return m, nil
}

func expandCESAppAudioProcessingConfigSynthesizeSpeechConfigsVoice(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppAudioProcessingConfigSynthesizeSpeechConfigsSpeakingRate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDataStoreSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEngines, err := expandCESAppDataStoreSettingsEngines(original["engines"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEngines); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["engines"] = transformedEngines
	}

	return transformed, nil
}

func expandCESAppDataStoreSettingsEngines(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandCESAppDataStoreSettingsEnginesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedType, err := expandCESAppDataStoreSettingsEnginesType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCESAppDataStoreSettingsEnginesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDataStoreSettingsEnginesType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedChannelType, err := expandCESAppDefaultChannelProfileChannelType(original["channel_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedChannelType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["channelType"] = transformedChannelType
	}

	transformedDisableBargeInControl, err := expandCESAppDefaultChannelProfileDisableBargeInControl(original["disable_barge_in_control"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableBargeInControl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableBargeInControl"] = transformedDisableBargeInControl
	}

	transformedDisableDtmf, err := expandCESAppDefaultChannelProfileDisableDtmf(original["disable_dtmf"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableDtmf); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableDtmf"] = transformedDisableDtmf
	}

	transformedPersonaProperty, err := expandCESAppDefaultChannelProfilePersonaProperty(original["persona_property"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPersonaProperty); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["personaProperty"] = transformedPersonaProperty
	}

	transformedProfileId, err := expandCESAppDefaultChannelProfileProfileId(original["profile_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfileId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profileId"] = transformedProfileId
	}

	transformedWebWidgetConfig, err := expandCESAppDefaultChannelProfileWebWidgetConfig(original["web_widget_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWebWidgetConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["webWidgetConfig"] = transformedWebWidgetConfig
	}

	return transformed, nil
}

func expandCESAppDefaultChannelProfileChannelType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfileDisableBargeInControl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfileDisableDtmf(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfilePersonaProperty(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPersona, err := expandCESAppDefaultChannelProfilePersonaPropertyPersona(original["persona"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPersona); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["persona"] = transformedPersona
	}

	return transformed, nil
}

func expandCESAppDefaultChannelProfilePersonaPropertyPersona(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfileProfileId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfileWebWidgetConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModality, err := expandCESAppDefaultChannelProfileWebWidgetConfigModality(original["modality"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModality); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["modality"] = transformedModality
	}

	transformedTheme, err := expandCESAppDefaultChannelProfileWebWidgetConfigTheme(original["theme"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTheme); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["theme"] = transformedTheme
	}

	transformedWebWidgetTitle, err := expandCESAppDefaultChannelProfileWebWidgetConfigWebWidgetTitle(original["web_widget_title"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWebWidgetTitle); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["webWidgetTitle"] = transformedWebWidgetTitle
	}

	return transformed, nil
}

func expandCESAppDefaultChannelProfileWebWidgetConfigModality(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfileWebWidgetConfigTheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDefaultChannelProfileWebWidgetConfigWebWidgetTitle(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppEvaluationMetricsThresholds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGoldenEvaluationMetricsThresholds, err := expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholds(original["golden_evaluation_metrics_thresholds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGoldenEvaluationMetricsThresholds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["goldenEvaluationMetricsThresholds"] = transformedGoldenEvaluationMetricsThresholds
	}

	return transformed, nil
}

func expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExpectationLevelMetricsThresholds, err := expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsExpectationLevelMetricsThresholds(original["expectation_level_metrics_thresholds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExpectationLevelMetricsThresholds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["expectationLevelMetricsThresholds"] = transformedExpectationLevelMetricsThresholds
	}

	transformedTurnLevelMetricsThresholds, err := expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsTurnLevelMetricsThresholds(original["turn_level_metrics_thresholds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTurnLevelMetricsThresholds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["turnLevelMetricsThresholds"] = transformedTurnLevelMetricsThresholds
	}

	return transformed, nil
}

func expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsExpectationLevelMetricsThresholds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedToolInvocationParameterCorrectnessThreshold, err := expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsExpectationLevelMetricsThresholdsToolInvocationParameterCorrectnessThreshold(original["tool_invocation_parameter_correctness_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedToolInvocationParameterCorrectnessThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["toolInvocationParameterCorrectnessThreshold"] = transformedToolInvocationParameterCorrectnessThreshold
	}

	return transformed, nil
}

func expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsExpectationLevelMetricsThresholdsToolInvocationParameterCorrectnessThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsTurnLevelMetricsThresholds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOverallToolInvocationCorrectnessThreshold, err := expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsTurnLevelMetricsThresholdsOverallToolInvocationCorrectnessThreshold(original["overall_tool_invocation_correctness_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOverallToolInvocationCorrectnessThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["overallToolInvocationCorrectnessThreshold"] = transformedOverallToolInvocationCorrectnessThreshold
	}

	transformedSemanticSimilaritySuccessThreshold, err := expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsTurnLevelMetricsThresholdsSemanticSimilaritySuccessThreshold(original["semantic_similarity_success_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSemanticSimilaritySuccessThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["semanticSimilaritySuccessThreshold"] = transformedSemanticSimilaritySuccessThreshold
	}

	return transformed, nil
}

func expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsTurnLevelMetricsThresholdsOverallToolInvocationCorrectnessThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppEvaluationMetricsThresholdsGoldenEvaluationMetricsThresholdsTurnLevelMetricsThresholdsSemanticSimilaritySuccessThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppGlobalInstruction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppGuardrails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLanguageSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDefaultLanguageCode, err := expandCESAppLanguageSettingsDefaultLanguageCode(original["default_language_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultLanguageCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultLanguageCode"] = transformedDefaultLanguageCode
	}

	transformedEnableMultilingualSupport, err := expandCESAppLanguageSettingsEnableMultilingualSupport(original["enable_multilingual_support"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableMultilingualSupport); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableMultilingualSupport"] = transformedEnableMultilingualSupport
	}

	transformedFallbackAction, err := expandCESAppLanguageSettingsFallbackAction(original["fallback_action"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFallbackAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fallbackAction"] = transformedFallbackAction
	}

	transformedSupportedLanguageCodes, err := expandCESAppLanguageSettingsSupportedLanguageCodes(original["supported_language_codes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSupportedLanguageCodes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["supportedLanguageCodes"] = transformedSupportedLanguageCodes
	}

	return transformed, nil
}

func expandCESAppLanguageSettingsDefaultLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLanguageSettingsEnableMultilingualSupport(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLanguageSettingsFallbackAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLanguageSettingsSupportedLanguageCodes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAudioRecordingConfig, err := expandCESAppLoggingSettingsAudioRecordingConfig(original["audio_recording_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioRecordingConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioRecordingConfig"] = transformedAudioRecordingConfig
	}

	transformedBigqueryExportSettings, err := expandCESAppLoggingSettingsBigqueryExportSettings(original["bigquery_export_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBigqueryExportSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bigqueryExportSettings"] = transformedBigqueryExportSettings
	}

	transformedCloudLoggingSettings, err := expandCESAppLoggingSettingsCloudLoggingSettings(original["cloud_logging_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudLoggingSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudLoggingSettings"] = transformedCloudLoggingSettings
	}

	transformedConversationLoggingSettings, err := expandCESAppLoggingSettingsConversationLoggingSettings(original["conversation_logging_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConversationLoggingSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conversationLoggingSettings"] = transformedConversationLoggingSettings
	}

	transformedRedactionConfig, err := expandCESAppLoggingSettingsRedactionConfig(original["redaction_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRedactionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["redactionConfig"] = transformedRedactionConfig
	}

	return transformed, nil
}

func expandCESAppLoggingSettingsAudioRecordingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGcsBucket, err := expandCESAppLoggingSettingsAudioRecordingConfigGcsBucket(original["gcs_bucket"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcsBucket); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcsBucket"] = transformedGcsBucket
	}

	transformedGcsPathPrefix, err := expandCESAppLoggingSettingsAudioRecordingConfigGcsPathPrefix(original["gcs_path_prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcsPathPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcsPathPrefix"] = transformedGcsPathPrefix
	}

	return transformed, nil
}

func expandCESAppLoggingSettingsAudioRecordingConfigGcsBucket(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsAudioRecordingConfigGcsPathPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsBigqueryExportSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDataset, err := expandCESAppLoggingSettingsBigqueryExportSettingsDataset(original["dataset"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataset); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataset"] = transformedDataset
	}

	transformedEnabled, err := expandCESAppLoggingSettingsBigqueryExportSettingsEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	transformedProject, err := expandCESAppLoggingSettingsBigqueryExportSettingsProject(original["project"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProject); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["project"] = transformedProject
	}

	return transformed, nil
}

func expandCESAppLoggingSettingsBigqueryExportSettingsDataset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsBigqueryExportSettingsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsBigqueryExportSettingsProject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsCloudLoggingSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableCloudLogging, err := expandCESAppLoggingSettingsCloudLoggingSettingsEnableCloudLogging(original["enable_cloud_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableCloudLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableCloudLogging"] = transformedEnableCloudLogging
	}

	return transformed, nil
}

func expandCESAppLoggingSettingsCloudLoggingSettingsEnableCloudLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsConversationLoggingSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisableConversationLogging, err := expandCESAppLoggingSettingsConversationLoggingSettingsDisableConversationLogging(original["disable_conversation_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableConversationLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableConversationLogging"] = transformedDisableConversationLogging
	}

	return transformed, nil
}

func expandCESAppLoggingSettingsConversationLoggingSettingsDisableConversationLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsRedactionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDeidentifyTemplate, err := expandCESAppLoggingSettingsRedactionConfigDeidentifyTemplate(original["deidentify_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeidentifyTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["deidentifyTemplate"] = transformedDeidentifyTemplate
	}

	transformedEnableRedaction, err := expandCESAppLoggingSettingsRedactionConfigEnableRedaction(original["enable_redaction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableRedaction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableRedaction"] = transformedEnableRedaction
	}

	transformedInspectTemplate, err := expandCESAppLoggingSettingsRedactionConfigInspectTemplate(original["inspect_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInspectTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inspectTemplate"] = transformedInspectTemplate
	}

	return transformed, nil
}

func expandCESAppLoggingSettingsRedactionConfigDeidentifyTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsRedactionConfigEnableRedaction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppLoggingSettingsRedactionConfigInspectTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandCESAppModelSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandCESAppModelSettingsModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedTemperature, err := expandCESAppModelSettingsTemperature(original["temperature"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTemperature); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["temperature"] = transformedTemperature
	}

	return transformed, nil
}

func expandCESAppModelSettingsModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppModelSettingsTemperature(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppRootAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppTimeZoneSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTimeZone, err := expandCESAppTimeZoneSettingsTimeZone(original["time_zone"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeZone"] = transformedTimeZone
	}

	return transformed, nil
}

func expandCESAppTimeZoneSettingsTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDescription, err := expandCESAppVariableDeclarationsDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedName, err := expandCESAppVariableDeclarationsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedSchema, err := expandCESAppVariableDeclarationsSchema(original["schema"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSchema); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["schema"] = transformedSchema
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCESAppVariableDeclarationsDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchema(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDescription, err := expandCESAppVariableDeclarationsSchemaDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedEnum, err := expandCESAppVariableDeclarationsSchemaEnum(original["enum"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnum); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enum"] = transformedEnum
	}

	transformedNullable, err := expandCESAppVariableDeclarationsSchemaNullable(original["nullable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNullable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nullable"] = transformedNullable
	}

	transformedRef, err := expandCESAppVariableDeclarationsSchemaRef(original["ref"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRef); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ref"] = transformedRef
	}

	transformedRequired, err := expandCESAppVariableDeclarationsSchemaRequired(original["required"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["required"] = transformedRequired
	}

	transformedType, err := expandCESAppVariableDeclarationsSchemaType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedUniqueItems, err := expandCESAppVariableDeclarationsSchemaUniqueItems(original["unique_items"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUniqueItems); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uniqueItems"] = transformedUniqueItems
	}

	transformedDefs, err := expandCESAppVariableDeclarationsSchemaDefs(original["defs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defs"] = transformedDefs
	}

	transformedDefault, err := expandCESAppVariableDeclarationsSchemaDefault(original["default"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefault); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["default"] = transformedDefault
	}

	transformedAdditionalProperties, err := expandCESAppVariableDeclarationsSchemaAdditionalProperties(original["additional_properties"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalProperties); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalProperties"] = transformedAdditionalProperties
	}

	transformedAnyOf, err := expandCESAppVariableDeclarationsSchemaAnyOf(original["any_of"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAnyOf); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["anyOf"] = transformedAnyOf
	}

	transformedPrefixItems, err := expandCESAppVariableDeclarationsSchemaPrefixItems(original["prefix_items"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrefixItems); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["prefixItems"] = transformedPrefixItems
	}

	transformedProperties, err := expandCESAppVariableDeclarationsSchemaProperties(original["properties"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProperties); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["properties"] = transformedProperties
	}

	transformedItems, err := expandCESAppVariableDeclarationsSchemaItems(original["items"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedItems); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["items"] = transformedItems
	}

	return transformed, nil
}

func expandCESAppVariableDeclarationsSchemaDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaEnum(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaNullable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaRef(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaUniqueItems(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaDefs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandCESAppVariableDeclarationsSchemaDefault(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESAppVariableDeclarationsSchemaAdditionalProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandCESAppVariableDeclarationsSchemaAnyOf(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandCESAppVariableDeclarationsSchemaPrefixItems(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandCESAppVariableDeclarationsSchemaProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}

func expandCESAppVariableDeclarationsSchemaItems(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	var j interface{}
	if err := json.Unmarshal(b, &j); err != nil {
		return nil, err
	}
	return j, nil
}
