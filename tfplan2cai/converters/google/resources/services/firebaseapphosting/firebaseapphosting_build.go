// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Build.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package firebaseapphosting

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const FirebaseAppHostingBuildAssetType string = "firebaseapphosting.googleapis.com/Build"

func ResourceConverterFirebaseAppHostingBuild() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: FirebaseAppHostingBuildAssetType,
		Convert:   GetFirebaseAppHostingBuildCaiObject,
	}
}

func GetFirebaseAppHostingBuildCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//firebaseapphosting.googleapis.com/projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetFirebaseAppHostingBuildApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: FirebaseAppHostingBuildAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/firebaseapphosting/v1beta/rest",
				DiscoveryName:        "Build",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetFirebaseAppHostingBuildApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandFirebaseAppHostingBuildDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	etagProp, err := expandFirebaseAppHostingBuildEtag(d.Get("etag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	sourceProp, err := expandFirebaseAppHostingBuildSource(d.Get("source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("source"); !tpgresource.IsEmptyValue(reflect.ValueOf(sourceProp)) && (ok || !reflect.DeepEqual(v, sourceProp)) {
		obj["source"] = sourceProp
	}
	annotationsProp, err := expandFirebaseAppHostingBuildEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	labelsProp, err := expandFirebaseAppHostingBuildEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandFirebaseAppHostingBuildDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedContainer, err := expandFirebaseAppHostingBuildSourceContainer(original["container"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContainer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["container"] = transformedContainer
	}

	transformedCodebase, err := expandFirebaseAppHostingBuildSourceCodebase(original["codebase"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCodebase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["codebase"] = transformedCodebase
	}

	return transformed, nil
}

func expandFirebaseAppHostingBuildSourceContainer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedImage, err := expandFirebaseAppHostingBuildSourceContainerImage(original["image"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["image"] = transformedImage
	}

	return transformed, nil
}

func expandFirebaseAppHostingBuildSourceContainerImage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisplayName, err := expandFirebaseAppHostingBuildSourceCodebaseDisplayName(original["display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["displayName"] = transformedDisplayName
	}

	transformedHash, err := expandFirebaseAppHostingBuildSourceCodebaseHash(original["hash"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHash); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hash"] = transformedHash
	}

	transformedCommitMessage, err := expandFirebaseAppHostingBuildSourceCodebaseCommitMessage(original["commit_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitMessage"] = transformedCommitMessage
	}

	transformedUri, err := expandFirebaseAppHostingBuildSourceCodebaseUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedAuthor, err := expandFirebaseAppHostingBuildSourceCodebaseAuthor(original["author"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthor); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["author"] = transformedAuthor
	}

	transformedCommitTime, err := expandFirebaseAppHostingBuildSourceCodebaseCommitTime(original["commit_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitTime"] = transformedCommitTime
	}

	transformedBranch, err := expandFirebaseAppHostingBuildSourceCodebaseBranch(original["branch"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBranch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["branch"] = transformedBranch
	}

	transformedCommit, err := expandFirebaseAppHostingBuildSourceCodebaseCommit(original["commit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commit"] = transformedCommit
	}

	return transformed, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseHash(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseCommitMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseAuthor(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisplayName, err := expandFirebaseAppHostingBuildSourceCodebaseAuthorDisplayName(original["display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["displayName"] = transformedDisplayName
	}

	transformedEmail, err := expandFirebaseAppHostingBuildSourceCodebaseAuthorEmail(original["email"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEmail); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["email"] = transformedEmail
	}

	transformedImageUri, err := expandFirebaseAppHostingBuildSourceCodebaseAuthorImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	return transformed, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseAuthorDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseAuthorEmail(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseAuthorImageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseCommitTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseBranch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildSourceCodebaseCommit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingBuildEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandFirebaseAppHostingBuildEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
