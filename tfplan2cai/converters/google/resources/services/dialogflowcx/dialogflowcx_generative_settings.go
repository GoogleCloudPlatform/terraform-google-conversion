// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflowcx/GenerativeSettings.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dialogflowcx

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DialogflowCXGenerativeSettingsAssetType string = "{{location}}-dialogflow.googleapis.com/GenerativeSettings"

func ResourceConverterDialogflowCXGenerativeSettings() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DialogflowCXGenerativeSettingsAssetType,
		Convert:   GetDialogflowCXGenerativeSettingsCaiObject,
	}
}

func GetDialogflowCXGenerativeSettingsCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-dialogflow.googleapis.com/{{parent}}/generativeSettings?languageCode={{language_code}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDialogflowCXGenerativeSettingsApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DialogflowCXGenerativeSettingsAssetType,
			Resource: &cai.AssetResource{
				Version:              "v3",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-dialogflow/v3/rest",
				DiscoveryName:        "GenerativeSettings",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDialogflowCXGenerativeSettingsApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	fallbackSettingsProp, err := expandDialogflowCXGenerativeSettingsFallbackSettings(d.Get("fallback_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("fallback_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(fallbackSettingsProp)) && (ok || !reflect.DeepEqual(v, fallbackSettingsProp)) {
		obj["fallbackSettings"] = fallbackSettingsProp
	}
	generativeSafetySettingsProp, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettings(d.Get("generative_safety_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("generative_safety_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(generativeSafetySettingsProp)) && (ok || !reflect.DeepEqual(v, generativeSafetySettingsProp)) {
		obj["generativeSafetySettings"] = generativeSafetySettingsProp
	}
	knowledgeConnectorSettingsProp, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(d.Get("knowledge_connector_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("knowledge_connector_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(knowledgeConnectorSettingsProp)) && (ok || !reflect.DeepEqual(v, knowledgeConnectorSettingsProp)) {
		obj["knowledgeConnectorSettings"] = knowledgeConnectorSettingsProp
	}
	languageCodeProp, err := expandDialogflowCXGenerativeSettingsLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(languageCodeProp)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	llmModelSettingsProp, err := expandDialogflowCXGenerativeSettingsLlmModelSettings(d.Get("llm_model_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("llm_model_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(llmModelSettingsProp)) && (ok || !reflect.DeepEqual(v, llmModelSettingsProp)) {
		obj["llmModelSettings"] = llmModelSettingsProp
	}

	return obj, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSelectedPrompt, err := expandDialogflowCXGenerativeSettingsFallbackSettingsSelectedPrompt(original["selected_prompt"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSelectedPrompt); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["selectedPrompt"] = transformedSelectedPrompt
	}

	transformedPromptTemplates, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplates(original["prompt_templates"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPromptTemplates); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["promptTemplates"] = transformedPromptTemplates
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsSelectedPrompt(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplates(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDisplayName, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedPromptText, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesPromptText(original["prompt_text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPromptText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["promptText"] = transformedPromptText
		}

		transformedFrozen, err := expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesFrozen(original["frozen"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFrozen); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["frozen"] = transformedFrozen
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesPromptText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsFallbackSettingsPromptTemplatesFrozen(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDefaultBannedPhraseMatchStrategy, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsDefaultBannedPhraseMatchStrategy(original["default_banned_phrase_match_strategy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultBannedPhraseMatchStrategy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultBannedPhraseMatchStrategy"] = transformedDefaultBannedPhraseMatchStrategy
	}

	transformedBannedPhrases, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrases(original["banned_phrases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBannedPhrases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bannedPhrases"] = transformedBannedPhrases
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsDefaultBannedPhraseMatchStrategy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedText, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesText(original["text"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["text"] = transformedText
		}

		transformedLanguageCode, err := expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesLanguageCode(original["language_code"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLanguageCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["languageCode"] = transformedLanguageCode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsGenerativeSafetySettingsBannedPhrasesLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBusiness, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusiness(original["business"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBusiness); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["business"] = transformedBusiness
	}

	transformedAgent, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedAgentIdentity, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentIdentity(original["agent_identity"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgentIdentity); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agentIdentity"] = transformedAgentIdentity
	}

	transformedBusinessDescription, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusinessDescription(original["business_description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBusinessDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["businessDescription"] = transformedBusinessDescription
	}

	transformedAgentScope, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentScope(original["agent_scope"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgentScope); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agentScope"] = transformedAgentScope
	}

	transformedDisableDataStoreFallback, err := expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsDisableDataStoreFallback(original["disable_data_store_fallback"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableDataStoreFallback); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableDataStoreFallback"] = transformedDisableDataStoreFallback
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusiness(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentIdentity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsBusinessDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsAgentScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsKnowledgeConnectorSettingsDisableDataStoreFallback(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsLlmModelSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowCXGenerativeSettingsLlmModelSettingsModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedPromptText, err := expandDialogflowCXGenerativeSettingsLlmModelSettingsPromptText(original["prompt_text"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPromptText); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["promptText"] = transformedPromptText
	}

	return transformed, nil
}

func expandDialogflowCXGenerativeSettingsLlmModelSettingsModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowCXGenerativeSettingsLlmModelSettingsPromptText(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
