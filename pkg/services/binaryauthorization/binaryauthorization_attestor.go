// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/binaryauthorization/Attestor.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package binaryauthorization

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tpgresource"
)

const BinaryAuthorizationAttestorAssetType string = "binaryauthorization.googleapis.com/Attestor"

const BinaryAuthorizationAttestorSchemaName string = "google_binary_authorization_attestor"

func CompareSignatureAlgorithm(_, old, new string, _ *schema.ResourceData) bool {
	// See https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors#signaturealgorithm
	normalizedAlgorithms := map[string]string{
		"ECDSA_P256_SHA256":   "ECDSA_P256_SHA256",
		"EC_SIGN_P256_SHA256": "ECDSA_P256_SHA256",
		"ECDSA_P384_SHA384":   "ECDSA_P384_SHA384",
		"EC_SIGN_P384_SHA384": "ECDSA_P384_SHA384",
		"ECDSA_P521_SHA512":   "ECDSA_P521_SHA512",
		"EC_SIGN_P521_SHA512": "ECDSA_P521_SHA512",
	}

	normalizedOld := old
	normalizedNew := new

	if normalized, ok := normalizedAlgorithms[old]; ok {
		normalizedOld = normalized
	}
	if normalized, ok := normalizedAlgorithms[new]; ok {
		normalizedNew = normalized
	}

	if normalizedNew == normalizedOld {
		return true
	}

	return false
}

func ResourceBinaryAuthorizationAttestor() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"attestation_authority_note": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"note_reference": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description: `The resource name of a ATTESTATION_AUTHORITY Note, created by the
user. If the Note is in a different project from the Attestor, it
should be specified in the format 'projects/*/notes/*' (or the legacy
'providers/*/notes/*'). This field may not be updated.
An attestation by this attestor is stored as a Container Analysis
ATTESTATION_AUTHORITY Occurrence that names a container image
and that links to this Note.`,
						},
						"public_keys": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Public keys that verify attestations signed by this attestor. This
field may be updated.
If this field is non-empty, one of the specified public keys must
verify that an attestation was signed by this attestor for the
image specified in the admission request.
If this field is empty, this attestor always returns that no valid
attestations exist.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ascii_armored_pgp_public_key": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `ASCII-armored representation of a PGP public key, as the
entire output by the command
'gpg --export --armor foo@example.com' (either LF or CRLF
line endings). When using this field, id should be left
blank. The BinAuthz API handlers will calculate the ID
and fill it in automatically. BinAuthz computes this ID
as the OpenPGP RFC4880 V4 fingerprint, represented as
upper-case hex. If id is provided by the caller, it will
be overwritten by the API-calculated ID.`,
									},
									"comment": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `A descriptive comment. This field may be updated.`,
									},
									"id": {
										Type:     schema.TypeString,
										Computed: true,
										Optional: true,
										Description: `The ID of this public key. Signatures verified by BinAuthz
must include the ID of the public key that can be used to
verify them, and that ID must match the contents of this
field exactly. Additional restrictions on this field can
be imposed based on which public key type is encapsulated.
See the documentation on publicKey cases below for details.`,
									},
									"pkix_public_key": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `A raw PKIX SubjectPublicKeyInfo format public key.

NOTE: id may be explicitly provided by the caller when using this
type of public key, but it MUST be a valid RFC3986 URI. If id is left
blank, a default one will be computed based on the digest of the DER
encoding of the public key.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"public_key_pem": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `A PEM-encoded public key, as described in
'https://tools.ietf.org/html/rfc7468#section-13'`,
												},
												"signature_algorithm": {
													Type:             schema.TypeString,
													Optional:         true,
													DiffSuppressFunc: CompareSignatureAlgorithm,
													Description: `The signature algorithm used to verify a message against
a signature using this key. These signature algorithm must
match the structure and any object identifiers encoded in
publicKeyPem (i.e. this algorithm must match that of the
public key).`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The resource name.`,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `A descriptive comment. This field may be updated. The field may be
displayed in chooser dialogs.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
