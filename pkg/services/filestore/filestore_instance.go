// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/filestore/Instance.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package filestore

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

const FilestoreInstanceAssetType string = "file.googleapis.com/Instance"

const FilestoreInstanceSchemaName string = "google_filestore_instance"

func ResourceFilestoreInstance() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"file_shares": {
				Type:     schema.TypeList,
				Required: true,
				Description: `File system shares on the instance. For this version, only a
single file share is supported.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"capacity_gb": {
							Type:     schema.TypeInt,
							Required: true,
							Description: `File share capacity in GiB. This must be at least 1024 GiB
for the standard tier, or 2560 GiB for the premium tier.`,
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The name of the fileshare (16 characters or less)`,
						},
						"nfs_export_options": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Nfs Export Options. There is a limit of 10 export options per file share.`,
							MaxItems:    10,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"access_mode": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"READ_ONLY", "READ_WRITE", ""}),
										Description: `Either READ_ONLY, for allowing only read requests on the exported directory,
or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE. Default value: "READ_WRITE" Possible values: ["READ_ONLY", "READ_WRITE"]`,
										Default: "READ_WRITE",
									},
									"anon_gid": {
										Type:     schema.TypeInt,
										Optional: true,
										Description: `An integer representing the anonymous group id with a default value of 65534.
Anon_gid may only be set with squashMode of ROOT_SQUASH. An error will be returned
if this field is specified for other squashMode settings.`,
									},
									"anon_uid": {
										Type:     schema.TypeInt,
										Optional: true,
										Description: `An integer representing the anonymous user id with a default value of 65534.
Anon_uid may only be set with squashMode of ROOT_SQUASH. An error will be returned
if this field is specified for other squashMode settings.`,
									},
									"ip_ranges": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `List of either IPv4 addresses, or ranges in CIDR notation which may mount the file share.
Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned.
The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"network": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The source VPC network for 'ip_ranges'.
Required for instances using Private Service Connect, optional otherwise.`,
									},
									"squash_mode": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"NO_ROOT_SQUASH", "ROOT_SQUASH", ""}),
										Description: `Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH,
for not allowing root access. The default is NO_ROOT_SQUASH. Default value: "NO_ROOT_SQUASH" Possible values: ["NO_ROOT_SQUASH", "ROOT_SQUASH"]`,
										Default: "NO_ROOT_SQUASH",
									},
								},
							},
						},
						"source_backup": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `The resource name of the backup, in the format
projects/{projectId}/locations/{locationId}/backups/{backupId},
that this file share has been restored from.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The resource name of the instance.`,
			},
			"networks": {
				Type:     schema.TypeList,
				Required: true,
				ForceNew: true,
				Description: `VPC networks to which the instance is connected. For this version,
only a single network is supported.`,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"modes": {
							Type:     schema.TypeList,
							Required: true,
							ForceNew: true,
							Description: `IP versions for which the instance has
IP addresses assigned. Possible values: ["ADDRESS_MODE_UNSPECIFIED", "MODE_IPV4", "MODE_IPV6"]`,
							Elem: &schema.Schema{
								Type:         schema.TypeString,
								ValidateFunc: verify.ValidateEnum([]string{"ADDRESS_MODE_UNSPECIFIED", "MODE_IPV4", "MODE_IPV6"}),
							},
						},
						"network": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
							Description: `The name of the GCE VPC network to which the
instance is connected.`,
						},
						"connect_mode": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS", "PRIVATE_SERVICE_CONNECT", ""}),
							Description: `The network connect mode of the Filestore instance.
If not provided, the connect mode defaults to
DIRECT_PEERING. Default value: "DIRECT_PEERING" Possible values: ["DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS", "PRIVATE_SERVICE_CONNECT"]`,
							Default: "DIRECT_PEERING",
						},
						"psc_config": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Private Service Connect configuration.
Should only be set when connect_mode is PRIVATE_SERVICE_CONNECT.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"endpoint_project": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `Consumer service project in which the Private Service Connect endpoint
would be set up. This is optional, and only relevant in case the network
is a shared VPC. If this is not specified, the endpoint would be set up
in the VPC host project.`,
									},
								},
							},
						},
						"reserved_ip_range": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							ForceNew: true,
							Description: `A /29 CIDR block that identifies the range of IP
addresses reserved for this instance.`,
						},
					},
				},
			},
			"tier": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `The service tier of the instance.
Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE`,
			},
			"deletion_protection_enabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Indicates whether the instance is protected against deletion.`,
			},
			"deletion_protection_reason": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The reason for enabling deletion protection.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A description of the instance.`,
			},
			"directory_services": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `Directory Services configuration.
Should only be set if protocol is "NFS_V4_1".`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ldap": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Configuration for LDAP servers.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"domain": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `The LDAP domain name in the format of 'my-domain.com'.`,
									},
									"servers": {
										Type:     schema.TypeList,
										Required: true,
										ForceNew: true,
										Description: `The servers names are used for specifying the LDAP servers names.
The LDAP servers names can come with two formats:
1. DNS name, for example: 'ldap.example1.com', 'ldap.example2.com'.
2. IP address, for example: '10.0.0.1', '10.0.0.2', '10.0.0.3'.
All servers names must be in the same format: either all DNS names or all
IP addresses.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"groups_ou": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `The groups Organizational Unit (OU) is optional. This parameter is a hint
to allow faster lookup in the LDAP namespace. In case that this parameter
is not provided, Filestore instance will query the whole LDAP namespace.`,
									},
									"users_ou": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `The users Organizational Unit (OU) is optional. This parameter is a hint
to allow faster lookup in the LDAP namespace. In case that this parameter
is not provided, Filestore instance will query the whole LDAP namespace.`,
									},
								},
							},
						},
					},
				},
			},
			"initial_replication": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `Replication configuration, once set, this cannot be updated.
Additionally this should be specified on the replica instance only, indicating the active as the peer_instance`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"replicas": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The replication role.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"peer_instance": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The peer instance.`,
									},
								},
							},
						},
						"role": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"ROLE_UNSPECIFIED", "ACTIVE", "STANDBY", ""}),
							Description:  `The replication role. Default value: "STANDBY" Possible values: ["ROLE_UNSPECIFIED", "ACTIVE", "STANDBY"]`,
							Default:      "STANDBY",
						},
					},
				},
			},
			"kms_key_name": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `KMS key name used for data encryption.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Resource labels to represent user-provided metadata.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"location": {
				Type:         schema.TypeString,
				Computed:     true,
				Optional:     true,
				ForceNew:     true,
				Description:  `The name of the location of the instance. This can be a region for ENTERPRISE tier instances.`,
				ExactlyOneOf: []string{},
			},
			"performance_config": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Performance configuration for the instance. If not provided,
the default performance settings will be used.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"fixed_iops": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `The instance will have a fixed provisioned IOPS value,
which will remain constant regardless of instance
capacity.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"max_iops": {
										Type:     schema.TypeInt,
										Optional: true,
										Description: `The number of IOPS to provision for the instance.
max_iops must be in multiple of 1000.`,
									},
								},
							},
							ConflictsWith: []string{},
						},
						"iops_per_tb": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `The instance provisioned IOPS will change dynamically
based on the capacity of the instance.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"max_iops_per_tb": {
										Type:     schema.TypeInt,
										Optional: true,
										Description: `The instance max IOPS will be calculated by multiplying
the capacity of the instance (TB) by max_iops_per_tb,
and rounding to the nearest 1000. The instance max IOPS
will be changed dynamically based on the instance
capacity.`,
									},
								},
							},
							ConflictsWith: []string{},
						},
					},
				},
			},
			"protocol": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"NFS_V3", "NFS_V4_1", ""}),
				Description: `Either NFSv3, for using NFS version 3 as file sharing protocol,
or NFSv4.1, for using NFS version 4.1 as file sharing protocol.
NFSv4.1 can be used with HIGH_SCALE_SSD, ZONAL, REGIONAL and ENTERPRISE.
The default is NFSv3. Default value: "NFS_V3" Possible values: ["NFS_V3", "NFS_V4_1"]`,
				Default: "NFS_V3",
			},
			"tags": {
				Type:     schema.TypeMap,
				Optional: true,
				ForceNew: true,
				Description: `A map of resource manager tags. Resource manager tag keys
and values have the same definition as resource manager
tags. Keys must be in the format tagKeys/{tag_key_id},
and values are in the format tagValues/456. The field is
ignored when empty. The field is immutable and causes
resource replacement when mutated. This field is only set
at create time and modifying this field after creation
will trigger recreation. To apply tags to an existing
resource, see the 'google_tags_tag_value' resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"zone": {
				Type:         schema.TypeString,
				Computed:     true,
				Optional:     true,
				Deprecated:   "`zone` is deprecated and will be removed in a future major release. Use `location` instead.",
				ForceNew:     true,
				Description:  `The name of the Filestore zone of the instance.`,
				ExactlyOneOf: []string{},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Creation timestamp in RFC3339 text format.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_replication": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only fields for replication configuration.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"replicas": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The replication role.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
						},
					},
				},
			},
			"etag": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Server-specified ETag for the instance resource to prevent
simultaneous updates from overwriting each other.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
