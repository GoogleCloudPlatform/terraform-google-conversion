// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudbuildv2/Repository.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/tfplan2cai/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudbuildv2

import (
	"fmt"
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/caiasset"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tfplan2cai/converters/cai"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
)

func Cloudbuildv2RepositoryTfplan2caiConverter() cai.Tfplan2caiConverter {
	return cai.Tfplan2caiConverter{
		Convert: GetCloudbuildv2RepositoryCaiAssets,
	}
}

func GetCloudbuildv2RepositoryCaiAssets(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]caiasset.Asset, error) {
	name, err := cai.AssetName(d, config, "//cloudbuild.googleapis.com/projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/repositories/{{name}}")
	if err != nil {
		return []caiasset.Asset{}, err
	}
	if obj, err := GetCloudbuildv2RepositoryCaiObject(d, config); err == nil {
		location, _ := tpgresource.GetLocation(d, config)
		if location == "" {
			location = "global"
		}
		return []caiasset.Asset{
			{
				Name: name,
				Type: Cloudbuildv2RepositoryAssetType,
				Resource: &caiasset.AssetResource{
					Version:              "v2",
					DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/cloudbuild/v2/rest",
					DiscoveryName:        "Repository",
					Data:                 obj,
					Location:             location,
				},
			},
		}, nil
	} else {
		return []caiasset.Asset{}, err
	}
}

func GetCloudbuildv2RepositoryCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandCloudbuildv2RepositoryName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	remoteUriProp, err := expandCloudbuildv2RepositoryRemoteUri(d.Get("remote_uri"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("remote_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(remoteUriProp)) && (ok || !reflect.DeepEqual(v, remoteUriProp)) {
		obj["remoteUri"] = remoteUriProp
	}
	effectiveAnnotationsProp, err := expandCloudbuildv2RepositoryEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveAnnotationsProp)) && (ok || !reflect.DeepEqual(v, effectiveAnnotationsProp)) {
		obj["annotations"] = effectiveAnnotationsProp
	}

	obj, err = resourceCloudbuildv2RepositoryEncoder(d, config, obj)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func resourceCloudbuildv2RepositoryEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	config := meta.(*transport_tpg.Config)
	// Extract any empty fields from the parent_connection field.
	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return nil, fmt.Errorf("error getting project: %s", err)
	}
	parent_connection := d.Get("parent_connection").(string)
	project, err = tpgresource.ExtractFieldByPattern("project", project, parent_connection, "projects/([a-z0-9A-Z-]*)/locations/.*")
	if err != nil {
		return nil, fmt.Errorf("error extracting project field: %s", err)
	}
	location := d.Get("location").(string)
	location, err = tpgresource.ExtractFieldByPattern("location", location, parent_connection, "projects/[a-z0-9A-Z-]*/locations/([a-z0-9-]*)/connections/.*")
	if err != nil {
		return nil, fmt.Errorf("error extracting location field: %s", err)
	}
	// Set project to the extracted value.
	d.Set("project", project)
	// Set all the other fields to their short forms before forming url and setting ID.
	name := d.Get("name").(string)
	d.Set("location", location)
	d.Set("name", name)
	return obj, nil
}

func expandCloudbuildv2RepositoryName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	m, err := tpgresource.ReplaceVarsForId(d, config, "projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/repositories/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing name: %s", err)
	}
	return m, nil
}

func expandCloudbuildv2RepositoryRemoteUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCloudbuildv2RepositoryEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
