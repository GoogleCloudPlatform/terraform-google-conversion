// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute_test

import (
	"testing"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/test"
)

func TestAccComputeSubnetwork_subnetworkBasicExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
func TestAccComputeSubnetwork_subnetworkLoggingConfigExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
func TestAccComputeSubnetwork_subnetworkIpv6Example(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
func TestAccComputeSubnetwork_subnetworkInternalIpv6Example(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
func TestAccComputeSubnetwork_subnetworkIpv6OnlyInternalExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
func TestAccComputeSubnetwork_subnetworkWithSubnetModePdpExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
func TestAccComputeSubnetwork_subnetworkIpv6OnlyExternalExample(t *testing.T) {
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"ip_collection",
			"lifecycle",
			"provider",
			"send_secondary_ip_range_if_empty",
		},
		[]string{},
	)
}
