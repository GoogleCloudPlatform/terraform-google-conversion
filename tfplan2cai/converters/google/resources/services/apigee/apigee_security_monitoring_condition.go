// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/SecurityMonitoringCondition.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApigeeSecurityMonitoringConditionAssetType string = "apigee.googleapis.com/SecurityMonitoringCondition"

func ResourceConverterApigeeSecurityMonitoringCondition() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApigeeSecurityMonitoringConditionAssetType,
		Convert:   GetApigeeSecurityMonitoringConditionCaiObject,
	}
}

func GetApigeeSecurityMonitoringConditionCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apigee.googleapis.com/{{org_id}}/securityMonitoringConditions/{{condition_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApigeeSecurityMonitoringConditionApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApigeeSecurityMonitoringConditionAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apigee/v1/rest",
				DiscoveryName:        "SecurityMonitoringCondition",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApigeeSecurityMonitoringConditionApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	profileProp, err := expandApigeeSecurityMonitoringConditionProfile(d.Get("profile"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("profile"); !tpgresource.IsEmptyValue(reflect.ValueOf(profileProp)) && (ok || !reflect.DeepEqual(v, profileProp)) {
		obj["profile"] = profileProp
	}
	scopeProp, err := expandApigeeSecurityMonitoringConditionScope(d.Get("scope"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("scope"); !tpgresource.IsEmptyValue(reflect.ValueOf(scopeProp)) && (ok || !reflect.DeepEqual(v, scopeProp)) {
		obj["scope"] = scopeProp
	}
	includeAllResourcesProp, err := expandApigeeSecurityMonitoringConditionIncludeAllResources(d.Get("include_all_resources"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("include_all_resources"); ok || !reflect.DeepEqual(v, includeAllResourcesProp) {
		obj["includeAllResources"] = includeAllResourcesProp
	}

	return obj, nil
}

func expandApigeeSecurityMonitoringConditionProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityMonitoringConditionScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityMonitoringConditionIncludeAllResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}
