// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/ces/Toolset.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package ces

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const CESToolsetAssetType string = "ces.googleapis.com/Toolset"

func ResourceConverterCESToolset() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: CESToolsetAssetType,
		Convert:   GetCESToolsetCaiObject,
	}
}

func GetCESToolsetCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//ces.googleapis.com/projects/{{project}}/locations/{{location}}/apps/{{app}}/toolsets/{{toolset_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetCESToolsetApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: CESToolsetAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/ces/v1/rest",
				DiscoveryName:        "Toolset",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetCESToolsetApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandCESToolsetDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	displayNameProp, err := expandCESToolsetDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	executionTypeProp, err := expandCESToolsetExecutionType(d.Get("execution_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("execution_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(executionTypeProp)) && (ok || !reflect.DeepEqual(v, executionTypeProp)) {
		obj["executionType"] = executionTypeProp
	}
	openApiToolsetProp, err := expandCESToolsetOpenApiToolset(d.Get("open_api_toolset"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("open_api_toolset"); !tpgresource.IsEmptyValue(reflect.ValueOf(openApiToolsetProp)) && (ok || !reflect.DeepEqual(v, openApiToolsetProp)) {
		obj["openApiToolset"] = openApiToolsetProp
	}

	return obj, nil
}

func expandCESToolsetDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetExecutionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApiAuthentication, err := expandCESToolsetOpenApiToolsetApiAuthentication(original["api_authentication"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiAuthentication); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiAuthentication"] = transformedApiAuthentication
	}

	transformedIgnoreUnknownFields, err := expandCESToolsetOpenApiToolsetIgnoreUnknownFields(original["ignore_unknown_fields"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreUnknownFields); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreUnknownFields"] = transformedIgnoreUnknownFields
	}

	transformedOpenApiSchema, err := expandCESToolsetOpenApiToolsetOpenApiSchema(original["open_api_schema"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOpenApiSchema); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["openApiSchema"] = transformedOpenApiSchema
	}

	transformedServiceDirectoryConfig, err := expandCESToolsetOpenApiToolsetServiceDirectoryConfig(original["service_directory_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceDirectoryConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceDirectoryConfig"] = transformedServiceDirectoryConfig
	}

	transformedTlsConfig, err := expandCESToolsetOpenApiToolsetTlsConfig(original["tls_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTlsConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tlsConfig"] = transformedTlsConfig
	}

	transformedUrl, err := expandCESToolsetOpenApiToolsetUrl(original["url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["url"] = transformedUrl
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetApiAuthentication(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApiKeyConfig, err := expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfig(original["api_key_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKeyConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKeyConfig"] = transformedApiKeyConfig
	}

	transformedOauthConfig, err := expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfig(original["oauth_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauthConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauthConfig"] = transformedOauthConfig
	}

	transformedServiceAccountAuthConfig, err := expandCESToolsetOpenApiToolsetApiAuthenticationServiceAccountAuthConfig(original["service_account_auth_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccountAuthConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccountAuthConfig"] = transformedServiceAccountAuthConfig
	}

	transformedServiceAgentIdTokenAuthConfig, err := expandCESToolsetOpenApiToolsetApiAuthenticationServiceAgentIdTokenAuthConfig(original["service_agent_id_token_auth_config"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["serviceAgentIdTokenAuthConfig"] = transformedServiceAgentIdTokenAuthConfig
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApiKeySecretVersion, err := expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfigApiKeySecretVersion(original["api_key_secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKeySecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKeySecretVersion"] = transformedApiKeySecretVersion
	}

	transformedKeyName, err := expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfigKeyName(original["key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["keyName"] = transformedKeyName
	}

	transformedRequestLocation, err := expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfigRequestLocation(original["request_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequestLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requestLocation"] = transformedRequestLocation
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfigApiKeySecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfigKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationApiKeyConfigRequestLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientId, err := expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigClientId(original["client_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientId"] = transformedClientId
	}

	transformedClientSecretVersion, err := expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigClientSecretVersion(original["client_secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecretVersion"] = transformedClientSecretVersion
	}

	transformedOauthGrantType, err := expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigOauthGrantType(original["oauth_grant_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauthGrantType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauthGrantType"] = transformedOauthGrantType
	}

	transformedScopes, err := expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigScopes(original["scopes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScopes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scopes"] = transformedScopes
	}

	transformedTokenEndpoint, err := expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigTokenEndpoint(original["token_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTokenEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tokenEndpoint"] = transformedTokenEndpoint
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigClientId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigClientSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigOauthGrantType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigScopes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationOauthConfigTokenEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationServiceAccountAuthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAccount, err := expandCESToolsetOpenApiToolsetApiAuthenticationServiceAccountAuthConfigServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationServiceAccountAuthConfigServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetApiAuthenticationServiceAgentIdTokenAuthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetIgnoreUnknownFields(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetOpenApiSchema(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetServiceDirectoryConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedService, err := expandCESToolsetOpenApiToolsetServiceDirectoryConfigService(original["service"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedService); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["service"] = transformedService
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetServiceDirectoryConfigService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetTlsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCaCerts, err := expandCESToolsetOpenApiToolsetTlsConfigCaCerts(original["ca_certs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCaCerts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["caCerts"] = transformedCaCerts
	}

	return transformed, nil
}

func expandCESToolsetOpenApiToolsetTlsConfigCaCerts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCert, err := expandCESToolsetOpenApiToolsetTlsConfigCaCertsCert(original["cert"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCert); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["cert"] = transformedCert
		}

		transformedDisplayName, err := expandCESToolsetOpenApiToolsetTlsConfigCaCertsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandCESToolsetOpenApiToolsetTlsConfigCaCertsCert(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetTlsConfigCaCertsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandCESToolsetOpenApiToolsetUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
