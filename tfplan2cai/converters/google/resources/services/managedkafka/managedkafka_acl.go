// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/managedkafka/Acl.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package managedkafka

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ManagedKafkaAclAssetType string = "managedkafka.googleapis.com/Acl"

func ResourceConverterManagedKafkaAcl() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ManagedKafkaAclAssetType,
		Convert:   GetManagedKafkaAclCaiObject,
	}
}

func GetManagedKafkaAclCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//managedkafka.googleapis.com/projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/acls/{{acl_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetManagedKafkaAclApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ManagedKafkaAclAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/managedkafka/v1/rest",
				DiscoveryName:        "Acl",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetManagedKafkaAclApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	aclEntriesProp, err := expandManagedKafkaAclAclEntries(d.Get("acl_entries"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("acl_entries"); !tpgresource.IsEmptyValue(reflect.ValueOf(aclEntriesProp)) && (ok || !reflect.DeepEqual(v, aclEntriesProp)) {
		obj["aclEntries"] = aclEntriesProp
	}
	etagProp, err := expandManagedKafkaAclEtag(d.Get("etag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}

	return obj, nil
}

func expandManagedKafkaAclAclEntries(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	v = v.(*schema.Set).List()
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPrincipal, err := expandManagedKafkaAclAclEntriesPrincipal(original["principal"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrincipal); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["principal"] = transformedPrincipal
		}

		transformedPermissionType, err := expandManagedKafkaAclAclEntriesPermissionType(original["permission_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPermissionType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["permissionType"] = transformedPermissionType
		}

		transformedOperation, err := expandManagedKafkaAclAclEntriesOperation(original["operation"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOperation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["operation"] = transformedOperation
		}

		transformedHost, err := expandManagedKafkaAclAclEntriesHost(original["host"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["host"] = transformedHost
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandManagedKafkaAclAclEntriesPrincipal(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandManagedKafkaAclAclEntriesPermissionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandManagedKafkaAclAclEntriesOperation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandManagedKafkaAclAclEntriesHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandManagedKafkaAclEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
