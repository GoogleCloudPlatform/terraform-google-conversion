// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networkconnectivityv1/ServiceConnectionPolicy.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networkconnectivityv1

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkConnectivityv1ServiceConnectionPolicyAssetType string = "networkconnectivity.googleapis.com/ServiceConnectionPolicy"

func ResourceConverterNetworkConnectivityv1ServiceConnectionPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: NetworkConnectivityv1ServiceConnectionPolicyAssetType,
		Convert:   GetNetworkConnectivityv1ServiceConnectionPolicyCaiObject,
	}
}

func GetNetworkConnectivityv1ServiceConnectionPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//networkconnectivity.googleapis.com/projects/{{project}}/locations/{{location}}/serviceConnectionPolicies/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetNetworkConnectivityv1ServiceConnectionPolicyApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: NetworkConnectivityv1ServiceConnectionPolicyAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/networkconnectivity/v1/rest",
				DiscoveryName:        "ServiceConnectionPolicy",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetNetworkConnectivityv1ServiceConnectionPolicyApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	serviceClassProp, err := expandNetworkConnectivityv1ServiceConnectionPolicyServiceClass(d.Get("service_class"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("service_class"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceClassProp)) && (ok || !reflect.DeepEqual(v, serviceClassProp)) {
		obj["serviceClass"] = serviceClassProp
	}
	descriptionProp, err := expandNetworkConnectivityv1ServiceConnectionPolicyDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	networkProp, err := expandNetworkConnectivityv1ServiceConnectionPolicyNetwork(d.Get("network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	pscConfigProp, err := expandNetworkConnectivityv1ServiceConnectionPolicyPscConfig(d.Get("psc_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("psc_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(pscConfigProp)) && (ok || !reflect.DeepEqual(v, pscConfigProp)) {
		obj["pscConfig"] = pscConfigProp
	}
	etagProp, err := expandNetworkConnectivityv1ServiceConnectionPolicyEtag(d.Get("etag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	effectiveLabelsProp, err := expandNetworkConnectivityv1ServiceConnectionPolicyEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyServiceClass(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyPscConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSubnetworks, err := expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigSubnetworks(original["subnetworks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubnetworks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subnetworks"] = transformedSubnetworks
	}

	transformedProducerInstanceLocation, err := expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigProducerInstanceLocation(original["producer_instance_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProducerInstanceLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["producerInstanceLocation"] = transformedProducerInstanceLocation
	}

	transformedAllowedGoogleProducersResourceHierarchyLevel, err := expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigAllowedGoogleProducersResourceHierarchyLevel(original["allowed_google_producers_resource_hierarchy_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedGoogleProducersResourceHierarchyLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedGoogleProducersResourceHierarchyLevel"] = transformedAllowedGoogleProducersResourceHierarchyLevel
	}

	transformedLimit, err := expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigLimit(original["limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["limit"] = transformedLimit
	}

	return transformed, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigSubnetworks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigProducerInstanceLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigAllowedGoogleProducersResourceHierarchyLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyPscConfigLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityv1ServiceConnectionPolicyEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
