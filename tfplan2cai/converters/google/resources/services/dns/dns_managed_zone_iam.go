// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dns/ManagedZone.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter_iam.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dns

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const DNSManagedZoneIAMAssetType string = "dns.googleapis.com/ManagedZone"

func ResourceConverterDNSManagedZoneIamPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         DNSManagedZoneIAMAssetType,
		Convert:           GetDNSManagedZoneIamPolicyCaiObject,
		MergeCreateUpdate: MergeDNSManagedZoneIamPolicy,
	}
}

func ResourceConverterDNSManagedZoneIamBinding() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         DNSManagedZoneIAMAssetType,
		Convert:           GetDNSManagedZoneIamBindingCaiObject,
		FetchFullResource: FetchDNSManagedZoneIamPolicy,
		MergeCreateUpdate: MergeDNSManagedZoneIamBinding,
		MergeDelete:       MergeDNSManagedZoneIamBindingDelete,
	}
}

func ResourceConverterDNSManagedZoneIamMember() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         DNSManagedZoneIAMAssetType,
		Convert:           GetDNSManagedZoneIamMemberCaiObject,
		FetchFullResource: FetchDNSManagedZoneIamPolicy,
		MergeCreateUpdate: MergeDNSManagedZoneIamMember,
		MergeDelete:       MergeDNSManagedZoneIamMemberDelete,
	}
}

func GetDNSManagedZoneIamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newDNSManagedZoneIamAsset(d, config, cai.ExpandIamPolicyBindings)
}

func GetDNSManagedZoneIamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newDNSManagedZoneIamAsset(d, config, cai.ExpandIamRoleBindings)
}

func GetDNSManagedZoneIamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newDNSManagedZoneIamAsset(d, config, cai.ExpandIamMemberBindings)
}

func MergeDNSManagedZoneIamPolicy(existing, incoming cai.Asset) cai.Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeDNSManagedZoneIamBinding(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAuthoritativeBindings)
}

func MergeDNSManagedZoneIamBindingDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAuthoritativeBindings)
}

func MergeDNSManagedZoneIamMember(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAdditiveBindings)
}

func MergeDNSManagedZoneIamMemberDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAdditiveBindings)
}

func newDNSManagedZoneIamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]cai.IAMBinding, error),
) ([]cai.Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []cai.Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := cai.AssetName(d, config, "//dns.googleapis.com/projects/{{project}}/managedZones/{{managed_zone}}")
	if err != nil {
		return []cai.Asset{}, err
	}

	return []cai.Asset{{
		Name: name,
		Type: DNSManagedZoneIAMAssetType,
		IAMPolicy: &cai.IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchDNSManagedZoneIamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (cai.Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("managed_zone"); !ok {
		return cai.Asset{}, cai.ErrEmptyIdentityField
	}

	return cai.FetchIamPolicy(
		DNSManagedZoneIamUpdaterProducer,
		d,
		config,
		"//dns.googleapis.com/projects/{{project}}/managedZones/{{managed_zone}}",
		DNSManagedZoneIAMAssetType,
	)
}
