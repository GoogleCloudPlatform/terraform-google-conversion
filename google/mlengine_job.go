// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

func GetMLEngineJobCaiObject(d TerraformResourceData, config *Config) (Asset, error) {
	name, err := assetName(d, config, "//mlengine.googleapis.com/projects/{{project}}/jobs/{{name}}")
	if err != nil {
		return Asset{}, err
	}
	if obj, err := GetMLEngineJobApiObject(d, config); err == nil {
		return Asset{
			Name: name,
			Type: "mlengine.googleapis.com/Job",
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/mlengine/v1/rest",
				DiscoveryName:        "Job",
				Data:                 obj,
			},
		}, nil
	} else {
		return Asset{}, err
	}
}

func GetMLEngineJobApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	jobIdProp, err := expandMLEngineJobJobId(d.Get("job_id"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("job_id"); !isEmptyValue(reflect.ValueOf(jobIdProp)) && (ok || !reflect.DeepEqual(v, jobIdProp)) {
		obj["jobId"] = jobIdProp
	}
	labelsProp, err := expandMLEngineJobLabels(d.Get("labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	trainingInputProp, err := expandMLEngineJobTrainingInput(d.Get("training_input"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("training_input"); !isEmptyValue(reflect.ValueOf(trainingInputProp)) && (ok || !reflect.DeepEqual(v, trainingInputProp)) {
		obj["trainingInput"] = trainingInputProp
	}
	trainingOutputProp, err := expandMLEngineJobTrainingOutput(d.Get("training_output"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("training_output"); !isEmptyValue(reflect.ValueOf(trainingOutputProp)) && (ok || !reflect.DeepEqual(v, trainingOutputProp)) {
		obj["trainingOutput"] = trainingOutputProp
	}

	return obj, nil
}

func expandMLEngineJobJobId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobLabels(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandMLEngineJobTrainingInput(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScaleTier, err := expandMLEngineJobTrainingInputScaleTier(original["scale_tier"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScaleTier); val.IsValid() && !isEmptyValue(val) {
		transformed["scaleTier"] = transformedScaleTier
	}

	transformedMasterType, err := expandMLEngineJobTrainingInputMasterType(original["master_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMasterType); val.IsValid() && !isEmptyValue(val) {
		transformed["masterType"] = transformedMasterType
	}

	transformedMasterConfig, err := expandMLEngineJobTrainingInputMasterConfig(original["master_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMasterConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["masterConfig"] = transformedMasterConfig
	}

	transformedWorkerType, err := expandMLEngineJobTrainingInputWorkerType(original["worker_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkerType); val.IsValid() && !isEmptyValue(val) {
		transformed["workerType"] = transformedWorkerType
	}

	transformedWorkerConfig, err := expandMLEngineJobTrainingInputWorkerConfig(original["worker_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkerConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["workerConfig"] = transformedWorkerConfig
	}

	transformedParameterServerType, err := expandMLEngineJobTrainingInputParameterServerType(original["parameter_server_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParameterServerType); val.IsValid() && !isEmptyValue(val) {
		transformed["parameterServerType"] = transformedParameterServerType
	}

	transformedParameterServerConfig, err := expandMLEngineJobTrainingInputParameterServerConfig(original["parameter_server_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParameterServerConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["parameterServerConfig"] = transformedParameterServerConfig
	}

	transformedWorkerCount, err := expandMLEngineJobTrainingInputWorkerCount(original["worker_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkerCount); val.IsValid() && !isEmptyValue(val) {
		transformed["workerCount"] = transformedWorkerCount
	}

	transformedParameterServerCount, err := expandMLEngineJobTrainingInputParameterServerCount(original["parameter_server_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParameterServerCount); val.IsValid() && !isEmptyValue(val) {
		transformed["parameterServerCount"] = transformedParameterServerCount
	}

	transformedPackageUris, err := expandMLEngineJobTrainingInputPackageUris(original["package_uris"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPackageUris); val.IsValid() && !isEmptyValue(val) {
		transformed["packageUris"] = transformedPackageUris
	}

	transformedPythonModule, err := expandMLEngineJobTrainingInputPythonModule(original["python_module"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPythonModule); val.IsValid() && !isEmptyValue(val) {
		transformed["pythonModule"] = transformedPythonModule
	}

	transformedArgs, err := expandMLEngineJobTrainingInputArgs(original["args"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedArgs); val.IsValid() && !isEmptyValue(val) {
		transformed["args"] = transformedArgs
	}

	transformedRegion, err := expandMLEngineJobTrainingInputRegion(original["region"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegion); val.IsValid() && !isEmptyValue(val) {
		transformed["region"] = transformedRegion
	}

	transformedJobDir, err := expandMLEngineJobTrainingInputJobDir(original["job_dir"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedJobDir); val.IsValid() && !isEmptyValue(val) {
		transformed["jobDir"] = transformedJobDir
	}

	transformedRuntimeVersion, err := expandMLEngineJobTrainingInputRuntimeVersion(original["runtime_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRuntimeVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["runtimeVersion"] = transformedRuntimeVersion
	}

	transformedPythonVersion, err := expandMLEngineJobTrainingInputPythonVersion(original["python_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPythonVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["pythonVersion"] = transformedPythonVersion
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputScaleTier(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputMasterType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputMasterConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAcceleratorConfig, err := expandMLEngineJobTrainingInputMasterConfigAcceleratorConfig(original["accelerator_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["acceleratorConfig"] = transformedAcceleratorConfig
	}

	transformedImageUri, err := expandMLEngineJobTrainingInputMasterConfigImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !isEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	transformedTPUTfVersion, err := expandMLEngineJobTrainingInputMasterConfigTPUTfVersion(original["tpu_tf_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTPUTfVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["tpuTfVersion"] = transformedTPUTfVersion
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputMasterConfigAcceleratorConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCount, err := expandMLEngineJobTrainingInputMasterConfigAcceleratorConfigCount(original["count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCount); val.IsValid() && !isEmptyValue(val) {
		transformed["count"] = transformedCount
	}

	transformedType, err := expandMLEngineJobTrainingInputMasterConfigAcceleratorConfigType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !isEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputMasterConfigAcceleratorConfigCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputMasterConfigAcceleratorConfigType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputMasterConfigImageUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputMasterConfigTPUTfVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputWorkerType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputWorkerConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAcceleratorConfig, err := expandMLEngineJobTrainingInputWorkerConfigAcceleratorConfig(original["accelerator_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["acceleratorConfig"] = transformedAcceleratorConfig
	}

	transformedImageUri, err := expandMLEngineJobTrainingInputWorkerConfigImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !isEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	transformedTPUTfVersion, err := expandMLEngineJobTrainingInputWorkerConfigTPUTfVersion(original["tpu_tf_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTPUTfVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["tpuTfVersion"] = transformedTPUTfVersion
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputWorkerConfigAcceleratorConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCount, err := expandMLEngineJobTrainingInputWorkerConfigAcceleratorConfigCount(original["count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCount); val.IsValid() && !isEmptyValue(val) {
		transformed["count"] = transformedCount
	}

	transformedType, err := expandMLEngineJobTrainingInputWorkerConfigAcceleratorConfigType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !isEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputWorkerConfigAcceleratorConfigCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputWorkerConfigAcceleratorConfigType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputWorkerConfigImageUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputWorkerConfigTPUTfVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputParameterServerType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputParameterServerConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAcceleratorConfig, err := expandMLEngineJobTrainingInputParameterServerConfigAcceleratorConfig(original["accelerator_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["acceleratorConfig"] = transformedAcceleratorConfig
	}

	transformedImageUri, err := expandMLEngineJobTrainingInputParameterServerConfigImageUri(original["image_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageUri); val.IsValid() && !isEmptyValue(val) {
		transformed["imageUri"] = transformedImageUri
	}

	transformedTPUTfVersion, err := expandMLEngineJobTrainingInputParameterServerConfigTPUTfVersion(original["tpu_tf_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTPUTfVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["tpuTfVersion"] = transformedTPUTfVersion
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputParameterServerConfigAcceleratorConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCount, err := expandMLEngineJobTrainingInputParameterServerConfigAcceleratorConfigCount(original["count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCount); val.IsValid() && !isEmptyValue(val) {
		transformed["count"] = transformedCount
	}

	transformedType, err := expandMLEngineJobTrainingInputParameterServerConfigAcceleratorConfigType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !isEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandMLEngineJobTrainingInputParameterServerConfigAcceleratorConfigCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputParameterServerConfigAcceleratorConfigType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputParameterServerConfigImageUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputParameterServerConfigTPUTfVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputWorkerCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputParameterServerCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputPackageUris(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputPythonModule(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputArgs(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputRegion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputJobDir(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputRuntimeVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingInputPythonVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutput(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCompletedTrialCount, err := expandMLEngineJobTrainingOutputCompletedTrialCount(original["completed_trial_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCompletedTrialCount); val.IsValid() && !isEmptyValue(val) {
		transformed["completedTrialCount"] = transformedCompletedTrialCount
	}

	transformedTrials, err := expandMLEngineJobTrainingOutputTrials(original["trials"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTrials); val.IsValid() && !isEmptyValue(val) {
		transformed["trials"] = transformedTrials
	}

	transformedConsumedMLUnits, err := expandMLEngineJobTrainingOutputConsumedMLUnits(original["consumed_ml_units"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConsumedMLUnits); val.IsValid() && !isEmptyValue(val) {
		transformed["consumedMLUnits"] = transformedConsumedMLUnits
	}

	transformedIsHyperparameterTuningJob, err := expandMLEngineJobTrainingOutputIsHyperparameterTuningJob(original["is_hyperparameter_tuning_job"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsHyperparameterTuningJob); val.IsValid() && !isEmptyValue(val) {
		transformed["isHyperparameterTuningJob"] = transformedIsHyperparameterTuningJob
	}

	transformedIsBuiltInAlgorithmJob, err := expandMLEngineJobTrainingOutputIsBuiltInAlgorithmJob(original["is_built_in_algorithm_job"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsBuiltInAlgorithmJob); val.IsValid() && !isEmptyValue(val) {
		transformed["isBuiltInAlgorithmJob"] = transformedIsBuiltInAlgorithmJob
	}

	transformedBuiltInAlgorithmOutput, err := expandMLEngineJobTrainingOutputBuiltInAlgorithmOutput(original["built_in_algorithm_output"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBuiltInAlgorithmOutput); val.IsValid() && !isEmptyValue(val) {
		transformed["builtInAlgorithmOutput"] = transformedBuiltInAlgorithmOutput
	}

	transformedHyperparameterMetricTag, err := expandMLEngineJobTrainingOutputHyperparameterMetricTag(original["hyperparameter_metric_tag"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHyperparameterMetricTag); val.IsValid() && !isEmptyValue(val) {
		transformed["hyperparameterMetricTag"] = transformedHyperparameterMetricTag
	}

	return transformed, nil
}

func expandMLEngineJobTrainingOutputCompletedTrialCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrials(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTrialId, err := expandMLEngineJobTrainingOutputTrialsTrialId(original["trial_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTrialId); val.IsValid() && !isEmptyValue(val) {
			transformed["trialId"] = transformedTrialId
		}

		transformedHyperparameters, err := expandMLEngineJobTrainingOutputTrialsHyperparameters(original["hyperparameters"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHyperparameters); val.IsValid() && !isEmptyValue(val) {
			transformed["hyperparameters"] = transformedHyperparameters
		}

		transformedStartTime, err := expandMLEngineJobTrainingOutputTrialsStartTime(original["start_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !isEmptyValue(val) {
			transformed["startTime"] = transformedStartTime
		}

		transformedEndTime, err := expandMLEngineJobTrainingOutputTrialsEndTime(original["end_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !isEmptyValue(val) {
			transformed["endTime"] = transformedEndTime
		}

		transformedState, err := expandMLEngineJobTrainingOutputTrialsState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !isEmptyValue(val) {
			transformed["state"] = transformedState
		}

		transformedFinalMetric, err := expandMLEngineJobTrainingOutputTrialsFinalMetric(original["final_metric"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFinalMetric); val.IsValid() && !isEmptyValue(val) {
			transformed["finalMetric"] = transformedFinalMetric
		}

		transformedIsTrialStoppedEarly, err := expandMLEngineJobTrainingOutputTrialsIsTrialStoppedEarly(original["is_trial_stopped_early"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsTrialStoppedEarly); val.IsValid() && !isEmptyValue(val) {
			transformed["isTrialStoppedEarly"] = transformedIsTrialStoppedEarly
		}

		transformedBuiltInAlgorithmOutput, err := expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutput(original["built_in_algorithm_output"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBuiltInAlgorithmOutput); val.IsValid() && !isEmptyValue(val) {
			transformed["builtInAlgorithmOutput"] = transformedBuiltInAlgorithmOutput
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandMLEngineJobTrainingOutputTrialsTrialId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsHyperparameters(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandMLEngineJobTrainingOutputTrialsStartTime(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsEndTime(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsState(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsFinalMetric(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTrainingStep, err := expandMLEngineJobTrainingOutputTrialsFinalMetricTrainingStep(original["training_step"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTrainingStep); val.IsValid() && !isEmptyValue(val) {
		transformed["trainingStep"] = transformedTrainingStep
	}

	transformedObjectiveValue, err := expandMLEngineJobTrainingOutputTrialsFinalMetricObjectiveValue(original["objective_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedObjectiveValue); val.IsValid() && !isEmptyValue(val) {
		transformed["objectiveValue"] = transformedObjectiveValue
	}

	return transformed, nil
}

func expandMLEngineJobTrainingOutputTrialsFinalMetricTrainingStep(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsFinalMetricObjectiveValue(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsIsTrialStoppedEarly(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutput(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFramework, err := expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputFramework(original["framework"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFramework); val.IsValid() && !isEmptyValue(val) {
		transformed["framework"] = transformedFramework
	}

	transformedRuntimeVresion, err := expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputRuntimeVresion(original["runtime_vresion"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRuntimeVresion); val.IsValid() && !isEmptyValue(val) {
		transformed["runtimeVresion"] = transformedRuntimeVresion
	}

	transformedPythonVersion, err := expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputPythonVersion(original["python_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPythonVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["pythonVersion"] = transformedPythonVersion
	}

	transformedModelPath, err := expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputModelPath(original["model_path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelPath); val.IsValid() && !isEmptyValue(val) {
		transformed["modelPath"] = transformedModelPath
	}

	return transformed, nil
}

func expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputFramework(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputRuntimeVresion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputPythonVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputTrialsBuiltInAlgorithmOutputModelPath(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputConsumedMLUnits(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputIsHyperparameterTuningJob(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputIsBuiltInAlgorithmJob(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputBuiltInAlgorithmOutput(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFramework, err := expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputFramework(original["framework"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFramework); val.IsValid() && !isEmptyValue(val) {
		transformed["framework"] = transformedFramework
	}

	transformedRuntimeVersion, err := expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputRuntimeVersion(original["runtime_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRuntimeVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["runtimeVersion"] = transformedRuntimeVersion
	}

	transformedPythonVersion, err := expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputPythonVersion(original["python_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPythonVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["pythonVersion"] = transformedPythonVersion
	}

	transformedModelPath, err := expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputModelPath(original["model_path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelPath); val.IsValid() && !isEmptyValue(val) {
		transformed["modelPath"] = transformedModelPath
	}

	return transformed, nil
}

func expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputFramework(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputRuntimeVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputPythonVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputBuiltInAlgorithmOutputModelPath(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandMLEngineJobTrainingOutputHyperparameterMetricTag(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
