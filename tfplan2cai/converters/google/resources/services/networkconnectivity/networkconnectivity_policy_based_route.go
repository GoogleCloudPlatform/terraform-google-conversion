// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkconnectivity

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkConnectivityPolicyBasedRouteAssetType string = "networkconnectivity.googleapis.com/PolicyBasedRoute"

func ResourceConverterNetworkConnectivityPolicyBasedRoute() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: NetworkConnectivityPolicyBasedRouteAssetType,
		Convert:   GetNetworkConnectivityPolicyBasedRouteCaiObject,
	}
}

func GetNetworkConnectivityPolicyBasedRouteCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//networkconnectivity.googleapis.com/projects/{{project}}/locations/global/policyBasedRoutes/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetNetworkConnectivityPolicyBasedRouteApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: NetworkConnectivityPolicyBasedRouteAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/networkconnectivity/v1/rest",
				DiscoveryName:        "PolicyBasedRoute",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetNetworkConnectivityPolicyBasedRouteApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkConnectivityPolicyBasedRouteDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	networkProp, err := expandNetworkConnectivityPolicyBasedRouteNetwork(d.Get("network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	filterProp, err := expandNetworkConnectivityPolicyBasedRouteFilter(d.Get("filter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterProp)) && (ok || !reflect.DeepEqual(v, filterProp)) {
		obj["filter"] = filterProp
	}
	nextHopOtherRoutesProp, err := expandNetworkConnectivityPolicyBasedRouteNextHopOtherRoutes(d.Get("next_hop_other_routes"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("next_hop_other_routes"); !tpgresource.IsEmptyValue(reflect.ValueOf(nextHopOtherRoutesProp)) && (ok || !reflect.DeepEqual(v, nextHopOtherRoutesProp)) {
		obj["nextHopOtherRoutes"] = nextHopOtherRoutesProp
	}
	nextHopIlbIpProp, err := expandNetworkConnectivityPolicyBasedRouteNextHopIlbIp(d.Get("next_hop_ilb_ip"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("next_hop_ilb_ip"); !tpgresource.IsEmptyValue(reflect.ValueOf(nextHopIlbIpProp)) && (ok || !reflect.DeepEqual(v, nextHopIlbIpProp)) {
		obj["nextHopIlbIp"] = nextHopIlbIpProp
	}
	priorityProp, err := expandNetworkConnectivityPolicyBasedRoutePriority(d.Get("priority"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("priority"); !tpgresource.IsEmptyValue(reflect.ValueOf(priorityProp)) && (ok || !reflect.DeepEqual(v, priorityProp)) {
		obj["priority"] = priorityProp
	}
	virtualMachineProp, err := expandNetworkConnectivityPolicyBasedRouteVirtualMachine(d.Get("virtual_machine"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("virtual_machine"); !tpgresource.IsEmptyValue(reflect.ValueOf(virtualMachineProp)) && (ok || !reflect.DeepEqual(v, virtualMachineProp)) {
		obj["virtualMachine"] = virtualMachineProp
	}
	interconnectAttachmentProp, err := expandNetworkConnectivityPolicyBasedRouteInterconnectAttachment(d.Get("interconnect_attachment"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("interconnect_attachment"); !tpgresource.IsEmptyValue(reflect.ValueOf(interconnectAttachmentProp)) && (ok || !reflect.DeepEqual(v, interconnectAttachmentProp)) {
		obj["interconnectAttachment"] = interconnectAttachmentProp
	}
	labelsProp, err := expandNetworkConnectivityPolicyBasedRouteEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandNetworkConnectivityPolicyBasedRouteDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProtocolVersion, err := expandNetworkConnectivityPolicyBasedRouteFilterProtocolVersion(original["protocol_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProtocolVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["protocolVersion"] = transformedProtocolVersion
	}

	transformedIpProtocol, err := expandNetworkConnectivityPolicyBasedRouteFilterIpProtocol(original["ip_protocol"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpProtocol); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipProtocol"] = transformedIpProtocol
	}

	transformedSrcRange, err := expandNetworkConnectivityPolicyBasedRouteFilterSrcRange(original["src_range"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSrcRange); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["srcRange"] = transformedSrcRange
	}

	transformedDestRange, err := expandNetworkConnectivityPolicyBasedRouteFilterDestRange(original["dest_range"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestRange); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destRange"] = transformedDestRange
	}

	return transformed, nil
}

func expandNetworkConnectivityPolicyBasedRouteFilterProtocolVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteFilterIpProtocol(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteFilterSrcRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteFilterDestRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteNextHopOtherRoutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteNextHopIlbIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRoutePriority(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteVirtualMachine(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTags, err := expandNetworkConnectivityPolicyBasedRouteVirtualMachineTags(original["tags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tags"] = transformedTags
	}

	return transformed, nil
}

func expandNetworkConnectivityPolicyBasedRouteVirtualMachineTags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteInterconnectAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRegion, err := expandNetworkConnectivityPolicyBasedRouteInterconnectAttachmentRegion(original["region"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["region"] = transformedRegion
	}

	return transformed, nil
}

func expandNetworkConnectivityPolicyBasedRouteInterconnectAttachmentRegion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkConnectivityPolicyBasedRouteEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
