// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package gkebackup

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GKEBackupRestorePlanAssetType string = "gkebackup.googleapis.com/RestorePlan"

func ResourceConverterGKEBackupRestorePlan() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: GKEBackupRestorePlanAssetType,
		Convert:   GetGKEBackupRestorePlanCaiObject,
	}
}

func GetGKEBackupRestorePlanCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//gkebackup.googleapis.com/projects/{{project}}/locations/{{location}}/restorePlans/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetGKEBackupRestorePlanApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: GKEBackupRestorePlanAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/gkebackup/v1/rest",
				DiscoveryName:        "RestorePlan",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetGKEBackupRestorePlanApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandGKEBackupRestorePlanName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	descriptionProp, err := expandGKEBackupRestorePlanDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	backupPlanProp, err := expandGKEBackupRestorePlanBackupPlan(d.Get("backup_plan"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("backup_plan"); !tpgresource.IsEmptyValue(reflect.ValueOf(backupPlanProp)) && (ok || !reflect.DeepEqual(v, backupPlanProp)) {
		obj["backupPlan"] = backupPlanProp
	}
	clusterProp, err := expandGKEBackupRestorePlanCluster(d.Get("cluster"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("cluster"); !tpgresource.IsEmptyValue(reflect.ValueOf(clusterProp)) && (ok || !reflect.DeepEqual(v, clusterProp)) {
		obj["cluster"] = clusterProp
	}
	restoreConfigProp, err := expandGKEBackupRestorePlanRestoreConfig(d.Get("restore_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("restore_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(restoreConfigProp)) && (ok || !reflect.DeepEqual(v, restoreConfigProp)) {
		obj["restoreConfig"] = restoreConfigProp
	}
	labelsProp, err := expandGKEBackupRestorePlanEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandGKEBackupRestorePlanName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/restorePlans/{{name}}")
}

func expandGKEBackupRestorePlanDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanBackupPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllNamespaces, err := expandGKEBackupRestorePlanRestoreConfigAllNamespaces(original["all_namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allNamespaces"] = transformedAllNamespaces
	}

	transformedExcludedNamespaces, err := expandGKEBackupRestorePlanRestoreConfigExcludedNamespaces(original["excluded_namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExcludedNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["excludedNamespaces"] = transformedExcludedNamespaces
	}

	transformedSelectedNamespaces, err := expandGKEBackupRestorePlanRestoreConfigSelectedNamespaces(original["selected_namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSelectedNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["selectedNamespaces"] = transformedSelectedNamespaces
	}

	transformedSelectedApplications, err := expandGKEBackupRestorePlanRestoreConfigSelectedApplications(original["selected_applications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSelectedApplications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["selectedApplications"] = transformedSelectedApplications
	}

	transformedNoNamespaces, err := expandGKEBackupRestorePlanRestoreConfigNoNamespaces(original["no_namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noNamespaces"] = transformedNoNamespaces
	}

	transformedNamespacedResourceRestoreMode, err := expandGKEBackupRestorePlanRestoreConfigNamespacedResourceRestoreMode(original["namespaced_resource_restore_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespacedResourceRestoreMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespacedResourceRestoreMode"] = transformedNamespacedResourceRestoreMode
	}

	transformedVolumeDataRestorePolicy, err := expandGKEBackupRestorePlanRestoreConfigVolumeDataRestorePolicy(original["volume_data_restore_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeDataRestorePolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeDataRestorePolicy"] = transformedVolumeDataRestorePolicy
	}

	transformedClusterResourceRestoreScope, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScope(original["cluster_resource_restore_scope"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClusterResourceRestoreScope); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clusterResourceRestoreScope"] = transformedClusterResourceRestoreScope
	}

	transformedClusterResourceConflictPolicy, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceConflictPolicy(original["cluster_resource_conflict_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClusterResourceConflictPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clusterResourceConflictPolicy"] = transformedClusterResourceConflictPolicy
	}

	transformedTransformationRules, err := expandGKEBackupRestorePlanRestoreConfigTransformationRules(original["transformation_rules"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTransformationRules); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["transformationRules"] = transformedTransformationRules
	}

	return transformed, nil
}

func expandGKEBackupRestorePlanRestoreConfigAllNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigExcludedNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNamespaces, err := expandGKEBackupRestorePlanRestoreConfigExcludedNamespacesNamespaces(original["namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespaces"] = transformedNamespaces
	}

	return transformed, nil
}

func expandGKEBackupRestorePlanRestoreConfigExcludedNamespacesNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigSelectedNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNamespaces, err := expandGKEBackupRestorePlanRestoreConfigSelectedNamespacesNamespaces(original["namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespaces"] = transformedNamespaces
	}

	return transformed, nil
}

func expandGKEBackupRestorePlanRestoreConfigSelectedNamespacesNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigSelectedApplications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNamespacedNames, err := expandGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNames(original["namespaced_names"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespacedNames); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespacedNames"] = transformedNamespacedNames
	}

	return transformed, nil
}

func expandGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNames(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedNamespace, err := expandGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesNamespace(original["namespace"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNamespace); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["namespace"] = transformedNamespace
		}

		transformedName, err := expandGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesNamespace(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigNoNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigNamespacedResourceRestoreMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigVolumeDataRestorePolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllGroupKinds, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeAllGroupKinds(original["all_group_kinds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllGroupKinds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allGroupKinds"] = transformedAllGroupKinds
	}

	transformedExcludedGroupKinds, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKinds(original["excluded_group_kinds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExcludedGroupKinds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["excludedGroupKinds"] = transformedExcludedGroupKinds
	}

	transformedSelectedGroupKinds, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKinds(original["selected_group_kinds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSelectedGroupKinds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["selectedGroupKinds"] = transformedSelectedGroupKinds
	}

	transformedNoGroupKinds, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeNoGroupKinds(original["no_group_kinds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoGroupKinds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noGroupKinds"] = transformedNoGroupKinds
	}

	return transformed, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeAllGroupKinds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKinds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedResourceGroup, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceGroup(original["resource_group"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceGroup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceGroup"] = transformedResourceGroup
		}

		transformedResourceKind, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceKind(original["resource_kind"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceKind); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceKind"] = transformedResourceKind
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceKind(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKinds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedResourceGroup, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceGroup(original["resource_group"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceGroup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceGroup"] = transformedResourceGroup
		}

		transformedResourceKind, err := expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceKind(original["resource_kind"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceKind); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceKind"] = transformedResourceKind
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceKind(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeNoGroupKinds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigClusterResourceConflictPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDescription, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedResourceFilter, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilter(original["resource_filter"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceFilter"] = transformedResourceFilter
		}

		transformedFieldActions, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActions(original["field_actions"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFieldActions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fieldActions"] = transformedFieldActions
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNamespaces, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterNamespaces(original["namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNamespaces); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["namespaces"] = transformedNamespaces
	}

	transformedGroupKinds, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKinds(original["group_kinds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupKinds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["groupKinds"] = transformedGroupKinds
	}

	transformedJsonPath, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterJsonPath(original["json_path"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedJsonPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["jsonPath"] = transformedJsonPath
	}

	return transformed, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterNamespaces(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKinds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedResourceGroup, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceGroup(original["resource_group"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceGroup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceGroup"] = transformedResourceGroup
		}

		transformedResourceKind, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceKind(original["resource_kind"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResourceKind); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resourceKind"] = transformedResourceKind
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceKind(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterJsonPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedOp, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOp(original["op"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["op"] = transformedOp
		}

		transformedFromPath, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsFromPath(original["from_path"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFromPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fromPath"] = transformedFromPath
		}

		transformedPath, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsPath(original["path"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPath); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["path"] = transformedPath
		}

		transformedValue, err := expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsFromPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsPath(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGKEBackupRestorePlanEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
