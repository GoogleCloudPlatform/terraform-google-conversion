// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/storagebatchoperations/Job.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package storagebatchoperations

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const StorageBatchOperationsJobAssetType string = "storagebatchoperations.googleapis.com/Job"

func ResourceConverterStorageBatchOperationsJob() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: StorageBatchOperationsJobAssetType,
		Convert:   GetStorageBatchOperationsJobCaiObject,
	}
}

func GetStorageBatchOperationsJobCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//storagebatchoperations.googleapis.com/projects/{{project}}/locations/global/jobs/{{job_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetStorageBatchOperationsJobApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: StorageBatchOperationsJobAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/storagebatchoperations/v1/rest",
				DiscoveryName:        "Job",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetStorageBatchOperationsJobApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	bucketListProp, err := expandStorageBatchOperationsJobBucketList(d.Get("bucket_list"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("bucket_list"); !tpgresource.IsEmptyValue(reflect.ValueOf(bucketListProp)) && (ok || !reflect.DeepEqual(v, bucketListProp)) {
		obj["bucketList"] = bucketListProp
	}
	deleteObjectProp, err := expandStorageBatchOperationsJobDeleteObject(d.Get("delete_object"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("delete_object"); !tpgresource.IsEmptyValue(reflect.ValueOf(deleteObjectProp)) && (ok || !reflect.DeepEqual(v, deleteObjectProp)) {
		obj["deleteObject"] = deleteObjectProp
	}
	putMetadataProp, err := expandStorageBatchOperationsJobPutMetadata(d.Get("put_metadata"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("put_metadata"); !tpgresource.IsEmptyValue(reflect.ValueOf(putMetadataProp)) && (ok || !reflect.DeepEqual(v, putMetadataProp)) {
		obj["putMetadata"] = putMetadataProp
	}
	rewriteObjectProp, err := expandStorageBatchOperationsJobRewriteObject(d.Get("rewrite_object"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("rewrite_object"); !tpgresource.IsEmptyValue(reflect.ValueOf(rewriteObjectProp)) && (ok || !reflect.DeepEqual(v, rewriteObjectProp)) {
		obj["rewriteObject"] = rewriteObjectProp
	}
	putObjectHoldProp, err := expandStorageBatchOperationsJobPutObjectHold(d.Get("put_object_hold"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("put_object_hold"); !tpgresource.IsEmptyValue(reflect.ValueOf(putObjectHoldProp)) && (ok || !reflect.DeepEqual(v, putObjectHoldProp)) {
		obj["putObjectHold"] = putObjectHoldProp
	}

	return obj, nil
}

func expandStorageBatchOperationsJobBucketList(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBuckets, err := expandStorageBatchOperationsJobBucketListBuckets(original["buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["buckets"] = transformedBuckets
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobBucketListBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBucket, err := expandStorageBatchOperationsJobBucketListBucketsBucket(original["bucket"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBucket); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bucket"] = transformedBucket
		}

		transformedPrefixList, err := expandStorageBatchOperationsJobBucketListBucketsPrefixList(original["prefix_list"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefixList); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefixList"] = transformedPrefixList
		}

		transformedManifest, err := expandStorageBatchOperationsJobBucketListBucketsManifest(original["manifest"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedManifest); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["manifest"] = transformedManifest
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandStorageBatchOperationsJobBucketListBucketsBucket(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobBucketListBucketsPrefixList(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIncludedObjectPrefixes, err := expandStorageBatchOperationsJobBucketListBucketsPrefixListIncludedObjectPrefixes(original["included_object_prefixes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedObjectPrefixes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedObjectPrefixes"] = transformedIncludedObjectPrefixes
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobBucketListBucketsPrefixListIncludedObjectPrefixes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobBucketListBucketsManifest(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedManifestLocation, err := expandStorageBatchOperationsJobBucketListBucketsManifestManifestLocation(original["manifest_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManifestLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["manifestLocation"] = transformedManifestLocation
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobBucketListBucketsManifestManifestLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobDeleteObject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPermanentObjectDeletionEnabled, err := expandStorageBatchOperationsJobDeleteObjectPermanentObjectDeletionEnabled(original["permanent_object_deletion_enabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["permanentObjectDeletionEnabled"] = transformedPermanentObjectDeletionEnabled
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobDeleteObjectPermanentObjectDeletionEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCustomTime, err := expandStorageBatchOperationsJobPutMetadataCustomTime(original["custom_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customTime"] = transformedCustomTime
	}

	transformedContentDisposition, err := expandStorageBatchOperationsJobPutMetadataContentDisposition(original["content_disposition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContentDisposition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contentDisposition"] = transformedContentDisposition
	}

	transformedContentEncoding, err := expandStorageBatchOperationsJobPutMetadataContentEncoding(original["content_encoding"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContentEncoding); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contentEncoding"] = transformedContentEncoding
	}

	transformedContentType, err := expandStorageBatchOperationsJobPutMetadataContentType(original["content_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContentType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contentType"] = transformedContentType
	}

	transformedContentLanguage, err := expandStorageBatchOperationsJobPutMetadataContentLanguage(original["content_language"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContentLanguage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contentLanguage"] = transformedContentLanguage
	}

	transformedCacheControl, err := expandStorageBatchOperationsJobPutMetadataCacheControl(original["cache_control"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCacheControl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cacheControl"] = transformedCacheControl
	}

	transformedCustomMetadata, err := expandStorageBatchOperationsJobPutMetadataCustomMetadata(original["custom_metadata"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customMetadata"] = transformedCustomMetadata
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobPutMetadataCustomTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadataContentDisposition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadataContentEncoding(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadataContentType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadataContentLanguage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadataCacheControl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutMetadataCustomMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandStorageBatchOperationsJobRewriteObject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKey, err := expandStorageBatchOperationsJobRewriteObjectKmsKey(original["kms_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKey"] = transformedKmsKey
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobRewriteObjectKmsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutObjectHold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEventBasedHold, err := expandStorageBatchOperationsJobPutObjectHoldEventBasedHold(original["event_based_hold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEventBasedHold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["eventBasedHold"] = transformedEventBasedHold
	}

	transformedTemporaryHold, err := expandStorageBatchOperationsJobPutObjectHoldTemporaryHold(original["temporary_hold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTemporaryHold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["temporaryHold"] = transformedTemporaryHold
	}

	return transformed, nil
}

func expandStorageBatchOperationsJobPutObjectHoldEventBasedHold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageBatchOperationsJobPutObjectHoldTemporaryHold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
