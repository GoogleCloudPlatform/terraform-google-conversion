// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/UnitOperation.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package saasruntime

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SaasRuntimeUnitOperationAssetType string = "saasservicemgmt.googleapis.com/UnitOperation"

func ResourceConverterSaasRuntimeUnitOperation() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SaasRuntimeUnitOperationAssetType,
		Convert:   GetSaasRuntimeUnitOperationCaiObject,
	}
}

func GetSaasRuntimeUnitOperationCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//saasservicemgmt.googleapis.com/projects/{{project}}/locations/{{location}}/unitOperations/{{unit_operation_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSaasRuntimeUnitOperationApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SaasRuntimeUnitOperationAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/saasservicemgmt/v1beta1/rest",
				DiscoveryName:        "UnitOperation",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSaasRuntimeUnitOperationApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	deprovisionProp, err := expandSaasRuntimeUnitOperationDeprovision(d.Get("deprovision"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("deprovision"); ok || !reflect.DeepEqual(v, deprovisionProp) {
		obj["deprovision"] = deprovisionProp
	}
	provisionProp, err := expandSaasRuntimeUnitOperationProvision(d.Get("provision"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("provision"); !tpgresource.IsEmptyValue(reflect.ValueOf(provisionProp)) && (ok || !reflect.DeepEqual(v, provisionProp)) {
		obj["provision"] = provisionProp
	}
	unitProp, err := expandSaasRuntimeUnitOperationUnit(d.Get("unit"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("unit"); !tpgresource.IsEmptyValue(reflect.ValueOf(unitProp)) && (ok || !reflect.DeepEqual(v, unitProp)) {
		obj["unit"] = unitProp
	}
	upgradeProp, err := expandSaasRuntimeUnitOperationUpgrade(d.Get("upgrade"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("upgrade"); !tpgresource.IsEmptyValue(reflect.ValueOf(upgradeProp)) && (ok || !reflect.DeepEqual(v, upgradeProp)) {
		obj["upgrade"] = upgradeProp
	}
	effectiveAnnotationsProp, err := expandSaasRuntimeUnitOperationEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveAnnotationsProp)) && (ok || !reflect.DeepEqual(v, effectiveAnnotationsProp)) {
		obj["annotations"] = effectiveAnnotationsProp
	}
	effectiveLabelsProp, err := expandSaasRuntimeUnitOperationEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandSaasRuntimeUnitOperationDeprovision(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandSaasRuntimeUnitOperationProvision(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInputVariables, err := expandSaasRuntimeUnitOperationProvisionInputVariables(original["input_variables"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInputVariables); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inputVariables"] = transformedInputVariables
	}

	transformedRelease, err := expandSaasRuntimeUnitOperationProvisionRelease(original["release"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRelease); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["release"] = transformedRelease
	}

	return transformed, nil
}

func expandSaasRuntimeUnitOperationProvisionInputVariables(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandSaasRuntimeUnitOperationProvisionInputVariablesType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedValue, err := expandSaasRuntimeUnitOperationProvisionInputVariablesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedVariable, err := expandSaasRuntimeUnitOperationProvisionInputVariablesVariable(original["variable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["variable"] = transformedVariable
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandSaasRuntimeUnitOperationProvisionInputVariablesType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationProvisionInputVariablesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationProvisionInputVariablesVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationProvisionRelease(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationUnit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationUpgrade(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInputVariables, err := expandSaasRuntimeUnitOperationUpgradeInputVariables(original["input_variables"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInputVariables); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inputVariables"] = transformedInputVariables
	}

	transformedRelease, err := expandSaasRuntimeUnitOperationUpgradeRelease(original["release"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRelease); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["release"] = transformedRelease
	}

	return transformed, nil
}

func expandSaasRuntimeUnitOperationUpgradeInputVariables(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandSaasRuntimeUnitOperationUpgradeInputVariablesType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedValue, err := expandSaasRuntimeUnitOperationUpgradeInputVariablesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedVariable, err := expandSaasRuntimeUnitOperationUpgradeInputVariablesVariable(original["variable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["variable"] = transformedVariable
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandSaasRuntimeUnitOperationUpgradeInputVariablesType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationUpgradeInputVariablesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationUpgradeInputVariablesVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationUpgradeRelease(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeUnitOperationEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandSaasRuntimeUnitOperationEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
