// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func InterconnectTypeDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return old == "IT_PRIVATE" && new == "DEDICATED"
}

const ComputeInterconnectAssetType string = "compute.googleapis.com/Interconnect"

func ResourceConverterComputeInterconnect() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ComputeInterconnectAssetType,
		Convert:   GetComputeInterconnectCaiObject,
	}
}

func GetComputeInterconnectCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//compute.googleapis.com/projects/{{project}}/global/interconnects/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetComputeInterconnectApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ComputeInterconnectAssetType,
			Resource: &cai.AssetResource{
				Version:              "beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/compute/beta/rest",
				DiscoveryName:        "Interconnect",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetComputeInterconnectApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeInterconnectDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	nameProp, err := expandComputeInterconnectName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	locationProp, err := expandComputeInterconnectLocation(d.Get("location"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("location"); !tpgresource.IsEmptyValue(reflect.ValueOf(locationProp)) && (ok || !reflect.DeepEqual(v, locationProp)) {
		obj["location"] = locationProp
	}
	linkTypeProp, err := expandComputeInterconnectLinkType(d.Get("link_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("link_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(linkTypeProp)) && (ok || !reflect.DeepEqual(v, linkTypeProp)) {
		obj["linkType"] = linkTypeProp
	}
	requestedLinkCountProp, err := expandComputeInterconnectRequestedLinkCount(d.Get("requested_link_count"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("requested_link_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(requestedLinkCountProp)) && (ok || !reflect.DeepEqual(v, requestedLinkCountProp)) {
		obj["requestedLinkCount"] = requestedLinkCountProp
	}
	interconnectTypeProp, err := expandComputeInterconnectInterconnectType(d.Get("interconnect_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("interconnect_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(interconnectTypeProp)) && (ok || !reflect.DeepEqual(v, interconnectTypeProp)) {
		obj["interconnectType"] = interconnectTypeProp
	}
	adminEnabledProp, err := expandComputeInterconnectAdminEnabled(d.Get("admin_enabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("admin_enabled"); ok || !reflect.DeepEqual(v, adminEnabledProp) {
		obj["adminEnabled"] = adminEnabledProp
	}
	nocContactEmailProp, err := expandComputeInterconnectNocContactEmail(d.Get("noc_contact_email"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("noc_contact_email"); !tpgresource.IsEmptyValue(reflect.ValueOf(nocContactEmailProp)) && (ok || !reflect.DeepEqual(v, nocContactEmailProp)) {
		obj["nocContactEmail"] = nocContactEmailProp
	}
	customerNameProp, err := expandComputeInterconnectCustomerName(d.Get("customer_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("customer_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(customerNameProp)) && (ok || !reflect.DeepEqual(v, customerNameProp)) {
		obj["customerName"] = customerNameProp
	}
	labelFingerprintProp, err := expandComputeInterconnectLabelFingerprint(d.Get("label_fingerprint"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("label_fingerprint"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelFingerprintProp)) && (ok || !reflect.DeepEqual(v, labelFingerprintProp)) {
		obj["labelFingerprint"] = labelFingerprintProp
	}
	macsecProp, err := expandComputeInterconnectMacsec(d.Get("macsec"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("macsec"); !tpgresource.IsEmptyValue(reflect.ValueOf(macsecProp)) && (ok || !reflect.DeepEqual(v, macsecProp)) {
		obj["macsec"] = macsecProp
	}
	macsecEnabledProp, err := expandComputeInterconnectMacsecEnabled(d.Get("macsec_enabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("macsec_enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(macsecEnabledProp)) && (ok || !reflect.DeepEqual(v, macsecEnabledProp)) {
		obj["macsecEnabled"] = macsecEnabledProp
	}
	remoteLocationProp, err := expandComputeInterconnectRemoteLocation(d.Get("remote_location"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("remote_location"); !tpgresource.IsEmptyValue(reflect.ValueOf(remoteLocationProp)) && (ok || !reflect.DeepEqual(v, remoteLocationProp)) {
		obj["remoteLocation"] = remoteLocationProp
	}
	requestedFeaturesProp, err := expandComputeInterconnectRequestedFeatures(d.Get("requested_features"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("requested_features"); !tpgresource.IsEmptyValue(reflect.ValueOf(requestedFeaturesProp)) && (ok || !reflect.DeepEqual(v, requestedFeaturesProp)) {
		obj["requestedFeatures"] = requestedFeaturesProp
	}
	labelsProp, err := expandComputeInterconnectEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandComputeInterconnectDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectLinkType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectRequestedLinkCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectInterconnectType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectAdminEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectNocContactEmail(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectCustomerName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectLabelFingerprint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectMacsec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPreSharedKeys, err := expandComputeInterconnectMacsecPreSharedKeys(original["pre_shared_keys"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPreSharedKeys); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["preSharedKeys"] = transformedPreSharedKeys
	}

	transformedFailOpen, err := expandComputeInterconnectMacsecFailOpen(original["fail_open"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailOpen); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failOpen"] = transformedFailOpen
	}

	return transformed, nil
}

func expandComputeInterconnectMacsecPreSharedKeys(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandComputeInterconnectMacsecPreSharedKeysName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedStartTime, err := expandComputeInterconnectMacsecPreSharedKeysStartTime(original["start_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTime"] = transformedStartTime
		}

		transformedFailOpen, err := expandComputeInterconnectMacsecPreSharedKeysFailOpen(original["fail_open"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFailOpen); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["failOpen"] = transformedFailOpen
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeInterconnectMacsecPreSharedKeysName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectMacsecPreSharedKeysStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectMacsecPreSharedKeysFailOpen(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectMacsecFailOpen(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectMacsecEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectRemoteLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectRequestedFeatures(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeInterconnectEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
