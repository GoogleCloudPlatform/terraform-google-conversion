// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package migrationcenter

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const MigrationCenterPreferenceSetAssetType string = "migrationcenter.googleapis.com/PreferenceSet"

func ResourceConverterMigrationCenterPreferenceSet() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: MigrationCenterPreferenceSetAssetType,
		Convert:   GetMigrationCenterPreferenceSetCaiObject,
	}
}

func GetMigrationCenterPreferenceSetCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//migrationcenter.googleapis.com/projects/{{project}}/locations/{{location}}/preferenceSets/{{preference_set_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetMigrationCenterPreferenceSetApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: MigrationCenterPreferenceSetAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/migrationcenter/v1/rest",
				DiscoveryName:        "PreferenceSet",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetMigrationCenterPreferenceSetApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandMigrationCenterPreferenceSetDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandMigrationCenterPreferenceSetDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	virtualMachinePreferencesProp, err := expandMigrationCenterPreferenceSetVirtualMachinePreferences(d.Get("virtual_machine_preferences"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("virtual_machine_preferences"); !tpgresource.IsEmptyValue(reflect.ValueOf(virtualMachinePreferencesProp)) && (ok || !reflect.DeepEqual(v, virtualMachinePreferencesProp)) {
		obj["virtualMachinePreferences"] = virtualMachinePreferencesProp
	}

	return obj, nil
}

func expandMigrationCenterPreferenceSetDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTargetProduct, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesTargetProduct(original["target_product"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTargetProduct); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["targetProduct"] = transformedTargetProduct
	}

	transformedRegionPreferences, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferences(original["region_preferences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegionPreferences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["regionPreferences"] = transformedRegionPreferences
	}

	transformedCommitmentPlan, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesCommitmentPlan(original["commitment_plan"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitmentPlan); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitmentPlan"] = transformedCommitmentPlan
	}

	transformedSizingOptimizationStrategy, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSizingOptimizationStrategy(original["sizing_optimization_strategy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizingOptimizationStrategy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizingOptimizationStrategy"] = transformedSizingOptimizationStrategy
	}

	transformedComputeEnginePreferences, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferences(original["compute_engine_preferences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeEnginePreferences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeEnginePreferences"] = transformedComputeEnginePreferences
	}

	transformedVmwareEnginePreferences, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferences(original["vmware_engine_preferences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVmwareEnginePreferences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vmwareEnginePreferences"] = transformedVmwareEnginePreferences
	}

	transformedSoleTenancyPreferences, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferences(original["sole_tenancy_preferences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSoleTenancyPreferences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["soleTenancyPreferences"] = transformedSoleTenancyPreferences
	}

	return transformed, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesTargetProduct(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPreferredRegions, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesPreferredRegions(original["preferred_regions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPreferredRegions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["preferredRegions"] = transformedPreferredRegions
	}

	return transformed, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesPreferredRegions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesCommitmentPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSizingOptimizationStrategy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMachinePreferences, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences(original["machine_preferences"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachinePreferences); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machinePreferences"] = transformedMachinePreferences
	}

	transformedLicenseType, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesLicenseType(original["license_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLicenseType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["licenseType"] = transformedLicenseType
	}

	return transformed, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedMachineSeries, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeries(original["allowed_machine_series"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedMachineSeries); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedMachineSeries"] = transformedAllowedMachineSeries
	}

	return transformed, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeries(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedCode, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesCode(original["code"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["code"] = transformedCode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesLicenseType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCpuOvercommitRatio, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesCpuOvercommitRatio(original["cpu_overcommit_ratio"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCpuOvercommitRatio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cpuOvercommitRatio"] = transformedCpuOvercommitRatio
	}

	transformedMemoryOvercommitRatio, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesMemoryOvercommitRatio(original["memory_overcommit_ratio"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemoryOvercommitRatio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memoryOvercommitRatio"] = transformedMemoryOvercommitRatio
	}

	transformedStorageDeduplicationCompressionRatio, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesStorageDeduplicationCompressionRatio(original["storage_deduplication_compression_ratio"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStorageDeduplicationCompressionRatio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["storageDeduplicationCompressionRatio"] = transformedStorageDeduplicationCompressionRatio
	}

	transformedCommitmentPlan, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesCommitmentPlan(original["commitment_plan"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitmentPlan); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitmentPlan"] = transformedCommitmentPlan
	}

	return transformed, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesCpuOvercommitRatio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesMemoryOvercommitRatio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesStorageDeduplicationCompressionRatio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesCommitmentPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferences(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCpuOvercommitRatio, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesCpuOvercommitRatio(original["cpu_overcommit_ratio"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCpuOvercommitRatio); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cpuOvercommitRatio"] = transformedCpuOvercommitRatio
	}

	transformedHostMaintenancePolicy, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesHostMaintenancePolicy(original["host_maintenance_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHostMaintenancePolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hostMaintenancePolicy"] = transformedHostMaintenancePolicy
	}

	transformedCommitmentPlan, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesCommitmentPlan(original["commitment_plan"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitmentPlan); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitmentPlan"] = transformedCommitmentPlan
	}

	transformedNodeTypes, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypes(original["node_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeTypes"] = transformedNodeTypes
	}

	return transformed, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesCpuOvercommitRatio(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesHostMaintenancePolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesCommitmentPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedNodeName, err := expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesNodeName(original["node_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNodeName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["nodeName"] = transformedNodeName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandMigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesNodeName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
