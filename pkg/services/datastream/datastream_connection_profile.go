// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/datastream/ConnectionProfile.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package datastream

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

func resourceDataStreamStreamCreateWithoutValidationDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	// If the old value was "false" and the new value is now unset (empty string),
	// return true to suppress the diff.
	if (old == "" && new == "false") || (old == "false" && new == "") {
		return true
	}

	// Otherwise, do not suppress the diff.
	return false
}

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = fmt.Sprintf
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = schema.Noop
	_ = validation.All
	_ = tgcresource.RemoveTerraformAttributionLabel
	_ = tpgresource.GetRegion
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
)

const DatastreamConnectionProfileAssetType string = "datastream.googleapis.com/ConnectionProfile"

const DatastreamConnectionProfileSchemaName string = "google_datastream_connection_profile"

func ResourceDatastreamConnectionProfile() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"connection_profile_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The connection profile identifier.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Display name.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the location this connection profile is located in.`,
			},
			"bigquery_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `BigQuery warehouse profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"create_without_validation": {
				Type:             schema.TypeBool,
				Optional:         true,
				ForceNew:         true,
				DiffSuppressFunc: resourceDataStreamStreamCreateWithoutValidationDiffSuppress,
				Description:      `Create the connection profile without validating it.`,
				Default:          false,
			},
			"forward_ssh_connectivity": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Forward SSH tunnel connectivity.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"hostname": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Hostname for the SSH tunnel.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Username for the SSH tunnel.`,
						},
						"password": {
							Type:          schema.TypeString,
							Optional:      true,
							ForceNew:      true,
							Description:   `SSH password.`,
							Sensitive:     true,
							ConflictsWith: []string{"forward_ssh_connectivity.0.private_key"},
						},
						"port": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Port for the SSH tunnel.`,
							Default:     22,
						},
						"private_key": {
							Type:          schema.TypeString,
							Optional:      true,
							Description:   `SSH private key.`,
							Sensitive:     true,
							ConflictsWith: []string{"forward_ssh_connectivity.0.password"},
						},
					},
				},
				ConflictsWith: []string{"private_connectivity"},
			},
			"gcs_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Cloud Storage bucket profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"bucket": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The Cloud Storage bucket name.`,
						},
						"root_path": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `The root path inside the Cloud Storage bucket.`,
						},
					},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"mongodb_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for connecting to a MongoDB database.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host_addresses": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `List of host addresses for a MongoDB cluster.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"hostname": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Hostname for the connection.`,
									},
									"port": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: `Port for the connection.`,
									},
								},
							},
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Username for the MongoDB connection.`,
						},
						"password": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Password for the MongoDB connection. Mutually exclusive with
secretManagerStoredPassword.`,
							Sensitive: true,
						},
						"replica_set": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Name of the replica set.`,
						},
						"secret_manager_stored_password": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `A reference to a Secret Manager resource name storing the MongoDB
connection password. Mutually exclusive with password.`,
						},
						"srv_connection_format": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Srv connection format. Mutually exclusive with
standard_connection_Format.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							AtLeastOneOf: []string{"mongodb_profile.0.srv_connection_format", "mongodb_profile.0.standard_connection_format"},
						},
						"ssl_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `SSL configuration for the MongoDB connection.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ca_certificate": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `PEM-encoded certificate of the CA that signed the source database
server's certificate.`,
										Sensitive: true,
									},
									"client_certificate": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `PEM-encoded certificate that will be used by the replica to
authenticate against the source database server. If this field
is used then the 'clientKey' and the 'caCertificate' fields are
mandatory.`,
										Sensitive: true,
									},
									"client_key": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `PEM-encoded private key associated with the Client Certificate.
If this field is used then the 'client_certificate' and the
'ca_certificate' fields are mandatory.`,
										Sensitive:    true,
										ExactlyOneOf: []string{"mongodb_profile.0.ssl_config.0.client_key", "mongodb_profile.0.ssl_config.0.secret_manager_stored_client_key"},
									},
									"secret_manager_stored_client_key": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `A reference to a Secret Manager resource name storing the
PEM-encoded private key. Mutually exclusive with clientKey.`,
										Sensitive:    true,
										ExactlyOneOf: []string{"mongodb_profile.0.ssl_config.0.client_key", "mongodb_profile.0.ssl_config.0.secret_manager_stored_client_key"},
									},
								},
							},
						},
						"standard_connection_format": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Standard connection format. Mutually exclusive with
srv_connection_format.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"direct_connection": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `Specifies whether the client connects directly to the
host[:port] in the connection URI.`,
									},
								},
							},
							AtLeastOneOf: []string{"mongodb_profile.0.srv_connection_format", "mongodb_profile.0.standard_connection_format"},
						},
					},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"mysql_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `MySQL database profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"hostname": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Hostname for the MySQL connection.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Username for the MySQL connection.`,
						},
						"password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Password for the MySQL connection.`,
							Sensitive:   true,
						},
						"port": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Port for the MySQL connection.`,
							Default:     3306,
						},
						"secret_manager_stored_password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A reference to a Secret Manager resource name storing the user's password.`,
						},
						"ssl_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `SSL configuration for the MySQL connection.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ca_certificate": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `PEM-encoded certificate of the CA that signed the source database
server's certificate.`,
										Sensitive: true,
									},
									"client_certificate": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `PEM-encoded certificate that will be used by the replica to
authenticate against the source database server. If this field
is used then the 'clientKey' and the 'caCertificate' fields are
mandatory.`,
										Sensitive: true,
									},
									"client_key": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
										Description: `PEM-encoded private key associated with the Client Certificate.
If this field is used then the 'client_certificate' and the
'ca_certificate' fields are mandatory.`,
										Sensitive: true,
									},
								},
							},
						},
					},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"oracle_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Oracle database profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"database_service": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Database for the Oracle connection.`,
						},
						"hostname": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Hostname for the Oracle connection.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Username for the Oracle connection.`,
						},
						"connection_attributes": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: `Connection string attributes`,
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Password for the Oracle connection.`,
							Sensitive:   true,
						},
						"port": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Port for the Oracle connection.`,
							Default:     1521,
						},
						"secret_manager_stored_password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A reference to a Secret Manager resource name storing the user's password.`,
						},
					},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"postgresql_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `PostgreSQL database profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"database": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Database for the PostgreSQL connection.`,
						},
						"hostname": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Hostname for the PostgreSQL connection.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Username for the PostgreSQL connection.`,
						},
						"password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Password for the PostgreSQL connection.`,
							Sensitive:   true,
						},
						"port": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Port for the PostgreSQL connection.`,
							Default:     5432,
						},
						"secret_manager_stored_password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A reference to a Secret Manager resource name storing the user's password.`,
						},
					},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"private_connectivity": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Private connectivity.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"private_connection": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `A reference to a private connection resource. Format: 'projects/{project}/locations/{location}/privateConnections/{name}'`,
						},
					},
				},
				ConflictsWith: []string{"forward_ssh_connectivity"},
			},
			"sql_server_profile": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `SQL Server database profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"database": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Database for the SQL Server connection.`,
						},
						"hostname": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Hostname for the SQL Server connection.`,
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `Username for the SQL Server connection.`,
						},
						"password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Password for the SQL Server connection.`,
							Sensitive:   true,
						},
						"port": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Port for the SQL Server connection.`,
							Default:     1433,
						},
						"secret_manager_stored_password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `A reference to a Secret Manager resource name storing the user's password.`,
						},
					},
				},
				ExactlyOneOf: []string{"oracle_profile", "gcs_profile", "mysql_profile", "bigquery_profile", "postgresql_profile", "sql_server_profile", "mongodb_profile"},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource's name.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
