// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/RecommendationEngine.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DiscoveryEngineRecommendationEngineAssetType string = "{{location}}-discoveryengine.googleapis.com/RecommendationEngine"

func ResourceConverterDiscoveryEngineRecommendationEngine() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DiscoveryEngineRecommendationEngineAssetType,
		Convert:   GetDiscoveryEngineRecommendationEngineCaiObject,
	}
}

func GetDiscoveryEngineRecommendationEngineCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-discoveryengine.googleapis.com/projects/{{project}}/locations/{{location}}/collections/default_collection/engines/{{engine_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDiscoveryEngineRecommendationEngineApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DiscoveryEngineRecommendationEngineAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-discoveryengine/v1/rest",
				DiscoveryName:        "RecommendationEngine",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDiscoveryEngineRecommendationEngineApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineRecommendationEngineDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	dataStoreIdsProp, err := expandDiscoveryEngineRecommendationEngineDataStoreIds(d.Get("data_store_ids"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("data_store_ids"); !tpgresource.IsEmptyValue(reflect.ValueOf(dataStoreIdsProp)) && (ok || !reflect.DeepEqual(v, dataStoreIdsProp)) {
		obj["dataStoreIds"] = dataStoreIdsProp
	}
	industryVerticalProp, err := expandDiscoveryEngineRecommendationEngineIndustryVertical(d.Get("industry_vertical"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("industry_vertical"); !tpgresource.IsEmptyValue(reflect.ValueOf(industryVerticalProp)) && (ok || !reflect.DeepEqual(v, industryVerticalProp)) {
		obj["industryVertical"] = industryVerticalProp
	}
	mediaRecommendationEngineConfigProp, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfig(d.Get("media_recommendation_engine_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("media_recommendation_engine_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(mediaRecommendationEngineConfigProp)) && (ok || !reflect.DeepEqual(v, mediaRecommendationEngineConfigProp)) {
		obj["mediaRecommendationEngineConfig"] = mediaRecommendationEngineConfigProp
	}
	commonConfigProp, err := expandDiscoveryEngineRecommendationEngineCommonConfig(d.Get("common_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("common_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(commonConfigProp)) && (ok || !reflect.DeepEqual(v, commonConfigProp)) {
		obj["commonConfig"] = commonConfigProp
	}

	return resourceDiscoveryEngineRecommendationEngineEncoder(d, config, obj)
}

func resourceDiscoveryEngineRecommendationEngineEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	// hard code solutionType to "SOLUTION_TYPE_RECOMMENDATION" for recommendation engine resource
	obj["solutionType"] = "SOLUTION_TYPE_RECOMMENDATION"
	return obj, nil
}

func expandDiscoveryEngineRecommendationEngineDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineDataStoreIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineIndustryVertical(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedOptimizationObjective, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjective(original["optimization_objective"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOptimizationObjective); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["optimizationObjective"] = transformedOptimizationObjective
	}

	transformedOptimizationObjectiveConfig, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfig(original["optimization_objective_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOptimizationObjectiveConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["optimizationObjectiveConfig"] = transformedOptimizationObjectiveConfig
	}

	transformedTrainingState, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigTrainingState(original["training_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTrainingState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["trainingState"] = transformedTrainingState
	}

	transformedEngineFeaturesConfig, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfig(original["engine_features_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEngineFeaturesConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["engineFeaturesConfig"] = transformedEngineFeaturesConfig
	}

	return transformed, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjective(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTargetField, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigTargetField(original["target_field"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTargetField); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["targetField"] = transformedTargetField
	}

	transformedTargetFieldValueFloat, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigTargetFieldValueFloat(original["target_field_value_float"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTargetFieldValueFloat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["targetFieldValueFloat"] = transformedTargetFieldValueFloat
	}

	return transformed, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigTargetField(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigTargetFieldValueFloat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigTrainingState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecommendedForYouConfig, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigRecommendedForYouConfig(original["recommended_for_you_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecommendedForYouConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recommendedForYouConfig"] = transformedRecommendedForYouConfig
	}

	transformedMostPopularConfig, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigMostPopularConfig(original["most_popular_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMostPopularConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mostPopularConfig"] = transformedMostPopularConfig
	}

	return transformed, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigRecommendedForYouConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedContextEventType, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigRecommendedForYouConfigContextEventType(original["context_event_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextEventType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contextEventType"] = transformedContextEventType
	}

	return transformed, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigRecommendedForYouConfigContextEventType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigMostPopularConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTimeWindowDays, err := expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigMostPopularConfigTimeWindowDays(original["time_window_days"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTimeWindowDays); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["timeWindowDays"] = transformedTimeWindowDays
	}

	return transformed, nil
}

func expandDiscoveryEngineRecommendationEngineMediaRecommendationEngineConfigEngineFeaturesConfigMostPopularConfigTimeWindowDays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineRecommendationEngineCommonConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCompanyName, err := expandDiscoveryEngineRecommendationEngineCommonConfigCompanyName(original["company_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCompanyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["companyName"] = transformedCompanyName
	}

	return transformed, nil
}

func expandDiscoveryEngineRecommendationEngineCommonConfigCompanyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
