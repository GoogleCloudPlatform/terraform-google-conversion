// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apigee/SecurityAction.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const ApigeeSecurityActionAssetType string = "apigee.googleapis.com/SecurityAction"

func ResourceConverterApigeeSecurityAction() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApigeeSecurityActionAssetType,
		Convert:   GetApigeeSecurityActionCaiObject,
	}
}

func GetApigeeSecurityActionCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apigee.googleapis.com/organizations/{{org_id}}/environments/{{env_id}}/securityActions/{{security_action_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApigeeSecurityActionApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApigeeSecurityActionAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apigee/v1/rest",
				DiscoveryName:        "SecurityAction",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApigeeSecurityActionApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandApigeeSecurityActionDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	stateProp, err := expandApigeeSecurityActionState(d.Get("state"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("state"); !tpgresource.IsEmptyValue(reflect.ValueOf(stateProp)) && (ok || !reflect.DeepEqual(v, stateProp)) {
		obj["state"] = stateProp
	}
	apiProxiesProp, err := expandApigeeSecurityActionApiProxies(d.Get("api_proxies"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("api_proxies"); !tpgresource.IsEmptyValue(reflect.ValueOf(apiProxiesProp)) && (ok || !reflect.DeepEqual(v, apiProxiesProp)) {
		obj["apiProxies"] = apiProxiesProp
	}
	conditionConfigProp, err := expandApigeeSecurityActionConditionConfig(d.Get("condition_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("condition_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(conditionConfigProp)) && (ok || !reflect.DeepEqual(v, conditionConfigProp)) {
		obj["conditionConfig"] = conditionConfigProp
	}
	allowProp, err := expandApigeeSecurityActionAllow(d.Get("allow"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("allow"); ok || !reflect.DeepEqual(v, allowProp) {
		obj["allow"] = allowProp
	}
	denyProp, err := expandApigeeSecurityActionDeny(d.Get("deny"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("deny"); !tpgresource.IsEmptyValue(reflect.ValueOf(denyProp)) && (ok || !reflect.DeepEqual(v, denyProp)) {
		obj["deny"] = denyProp
	}
	flagProp, err := expandApigeeSecurityActionFlag(d.Get("flag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("flag"); !tpgresource.IsEmptyValue(reflect.ValueOf(flagProp)) && (ok || !reflect.DeepEqual(v, flagProp)) {
		obj["flag"] = flagProp
	}
	expireTimeProp, err := expandApigeeSecurityActionExpireTime(d.Get("expire_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("expire_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(expireTimeProp)) && (ok || !reflect.DeepEqual(v, expireTimeProp)) {
		obj["expireTime"] = expireTimeProp
	}
	ttlProp, err := expandApigeeSecurityActionTtl(d.Get("ttl"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("ttl"); !tpgresource.IsEmptyValue(reflect.ValueOf(ttlProp)) && (ok || !reflect.DeepEqual(v, ttlProp)) {
		obj["ttl"] = ttlProp
	}

	return obj, nil
}

func expandApigeeSecurityActionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionApiProxies(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIpAddressRanges, err := expandApigeeSecurityActionConditionConfigIpAddressRanges(original["ip_address_ranges"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIpAddressRanges); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ipAddressRanges"] = transformedIpAddressRanges
	}

	transformedBotReasons, err := expandApigeeSecurityActionConditionConfigBotReasons(original["bot_reasons"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBotReasons); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["botReasons"] = transformedBotReasons
	}

	transformedHttpMethods, err := expandApigeeSecurityActionConditionConfigHttpMethods(original["http_methods"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpMethods"] = transformedHttpMethods
	}

	transformedApiKeys, err := expandApigeeSecurityActionConditionConfigApiKeys(original["api_keys"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKeys); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKeys"] = transformedApiKeys
	}

	transformedAccessTokens, err := expandApigeeSecurityActionConditionConfigAccessTokens(original["access_tokens"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccessTokens); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accessTokens"] = transformedAccessTokens
	}

	transformedApiProducts, err := expandApigeeSecurityActionConditionConfigApiProducts(original["api_products"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiProducts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiProducts"] = transformedApiProducts
	}

	transformedDeveloperApps, err := expandApigeeSecurityActionConditionConfigDeveloperApps(original["developer_apps"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeveloperApps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["developerApps"] = transformedDeveloperApps
	}

	transformedDevelopers, err := expandApigeeSecurityActionConditionConfigDevelopers(original["developers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDevelopers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["developers"] = transformedDevelopers
	}

	transformedUserAgents, err := expandApigeeSecurityActionConditionConfigUserAgents(original["user_agents"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserAgents); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userAgents"] = transformedUserAgents
	}

	transformedRegionCodes, err := expandApigeeSecurityActionConditionConfigRegionCodes(original["region_codes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegionCodes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["regionCodes"] = transformedRegionCodes
	}

	transformedAsns, err := expandApigeeSecurityActionConditionConfigAsns(original["asns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAsns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["asns"] = transformedAsns
	}

	return transformed, nil
}

func expandApigeeSecurityActionConditionConfigIpAddressRanges(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigBotReasons(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigHttpMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigApiKeys(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigAccessTokens(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigApiProducts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigDeveloperApps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigDevelopers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigUserAgents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigRegionCodes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionConditionConfigAsns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionAllow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandApigeeSecurityActionDeny(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedResponseCode, err := expandApigeeSecurityActionDenyResponseCode(original["response_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResponseCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["responseCode"] = transformedResponseCode
	}

	return transformed, nil
}

func expandApigeeSecurityActionDenyResponseCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionFlag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHeaders, err := expandApigeeSecurityActionFlagHeaders(original["headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["headers"] = transformedHeaders
	}

	return transformed, nil
}

func expandApigeeSecurityActionFlagHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandApigeeSecurityActionFlagHeadersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandApigeeSecurityActionFlagHeadersValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApigeeSecurityActionFlagHeadersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionFlagHeadersValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionExpireTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSecurityActionTtl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
