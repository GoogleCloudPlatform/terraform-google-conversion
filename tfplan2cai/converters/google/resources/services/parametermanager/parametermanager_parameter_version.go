// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/parametermanager/ParameterVersion.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package parametermanager

import (
	"encoding/base64"
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ParameterManagerParameterVersionAssetType string = "parametermanager.googleapis.com/ParameterVersion"

func ResourceConverterParameterManagerParameterVersion() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ParameterManagerParameterVersionAssetType,
		Convert:   GetParameterManagerParameterVersionCaiObject,
	}
}

func GetParameterManagerParameterVersionCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//parametermanager.googleapis.com/{{parameter}}/versions/{{parameter_version_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetParameterManagerParameterVersionApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ParameterManagerParameterVersionAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/parametermanager/v1/rest",
				DiscoveryName:        "ParameterVersion",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetParameterManagerParameterVersionApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	disabledProp, err := expandParameterManagerParameterVersionDisabled(d.Get("disabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("disabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(disabledProp)) && (ok || !reflect.DeepEqual(v, disabledProp)) {
		obj["disabled"] = disabledProp
	}
	payloadProp, err := expandParameterManagerParameterVersionPayload(nil, d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("payload"); !tpgresource.IsEmptyValue(reflect.ValueOf(payloadProp)) && (ok || !reflect.DeepEqual(v, payloadProp)) {
		obj["payload"] = payloadProp
	}

	return obj, nil
}

func expandParameterManagerParameterVersionDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandParameterManagerParameterVersionPayload(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	transformed := make(map[string]interface{})
	transformedParameterData, err := expandParameterManagerParameterVersionPayloadParameterData(d.Get("parameter_data"), d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParameterData); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["data"] = transformedParameterData
	}

	return transformed, nil
}

func expandParameterManagerParameterVersionPayloadParameterData(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	return base64.StdEncoding.EncodeToString([]byte(v.(string))), nil
}
