// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigquerydatapolicy

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const BigqueryDatapolicyDataPolicyIAMAssetType string = "bigquerydatapolicy.googleapis.com/DataPolicy"

func ResourceConverterBigqueryDatapolicyDataPolicyIamPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         BigqueryDatapolicyDataPolicyIAMAssetType,
		Convert:           GetBigqueryDatapolicyDataPolicyIamPolicyCaiObject,
		MergeCreateUpdate: MergeBigqueryDatapolicyDataPolicyIamPolicy,
	}
}

func ResourceConverterBigqueryDatapolicyDataPolicyIamBinding() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         BigqueryDatapolicyDataPolicyIAMAssetType,
		Convert:           GetBigqueryDatapolicyDataPolicyIamBindingCaiObject,
		FetchFullResource: FetchBigqueryDatapolicyDataPolicyIamPolicy,
		MergeCreateUpdate: MergeBigqueryDatapolicyDataPolicyIamBinding,
		MergeDelete:       MergeBigqueryDatapolicyDataPolicyIamBindingDelete,
	}
}

func ResourceConverterBigqueryDatapolicyDataPolicyIamMember() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         BigqueryDatapolicyDataPolicyIAMAssetType,
		Convert:           GetBigqueryDatapolicyDataPolicyIamMemberCaiObject,
		FetchFullResource: FetchBigqueryDatapolicyDataPolicyIamPolicy,
		MergeCreateUpdate: MergeBigqueryDatapolicyDataPolicyIamMember,
		MergeDelete:       MergeBigqueryDatapolicyDataPolicyIamMemberDelete,
	}
}

func GetBigqueryDatapolicyDataPolicyIamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newBigqueryDatapolicyDataPolicyIamAsset(d, config, cai.ExpandIamPolicyBindings)
}

func GetBigqueryDatapolicyDataPolicyIamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newBigqueryDatapolicyDataPolicyIamAsset(d, config, cai.ExpandIamRoleBindings)
}

func GetBigqueryDatapolicyDataPolicyIamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newBigqueryDatapolicyDataPolicyIamAsset(d, config, cai.ExpandIamMemberBindings)
}

func MergeBigqueryDatapolicyDataPolicyIamPolicy(existing, incoming cai.Asset) cai.Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeBigqueryDatapolicyDataPolicyIamBinding(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAuthoritativeBindings)
}

func MergeBigqueryDatapolicyDataPolicyIamBindingDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAuthoritativeBindings)
}

func MergeBigqueryDatapolicyDataPolicyIamMember(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAdditiveBindings)
}

func MergeBigqueryDatapolicyDataPolicyIamMemberDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAdditiveBindings)
}

func newBigqueryDatapolicyDataPolicyIamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]cai.IAMBinding, error),
) ([]cai.Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []cai.Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := cai.AssetName(d, config, "//bigquerydatapolicy.googleapis.com/projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}

	return []cai.Asset{{
		Name: name,
		Type: BigqueryDatapolicyDataPolicyIAMAssetType,
		IAMPolicy: &cai.IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchBigqueryDatapolicyDataPolicyIamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (cai.Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("location"); !ok {
		return cai.Asset{}, cai.ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("data_policy_id"); !ok {
		return cai.Asset{}, cai.ErrEmptyIdentityField
	}

	return cai.FetchIamPolicy(
		BigqueryDatapolicyDataPolicyIamUpdaterProducer,
		d,
		config,
		"//bigquerydatapolicy.googleapis.com/projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}",
		BigqueryDatapolicyDataPolicyIAMAssetType,
	)
}
