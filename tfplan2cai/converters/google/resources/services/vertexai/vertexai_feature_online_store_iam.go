// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/vertexai/FeatureOnlineStore.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter_iam.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const VertexAIFeatureOnlineStoreIAMAssetType string = "aiplatform.googleapis.com/FeatureOnlineStore"

func ResourceConverterVertexAIFeatureOnlineStoreIamPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         VertexAIFeatureOnlineStoreIAMAssetType,
		Convert:           GetVertexAIFeatureOnlineStoreIamPolicyCaiObject,
		MergeCreateUpdate: MergeVertexAIFeatureOnlineStoreIamPolicy,
	}
}

func ResourceConverterVertexAIFeatureOnlineStoreIamBinding() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         VertexAIFeatureOnlineStoreIAMAssetType,
		Convert:           GetVertexAIFeatureOnlineStoreIamBindingCaiObject,
		FetchFullResource: FetchVertexAIFeatureOnlineStoreIamPolicy,
		MergeCreateUpdate: MergeVertexAIFeatureOnlineStoreIamBinding,
		MergeDelete:       MergeVertexAIFeatureOnlineStoreIamBindingDelete,
	}
}

func ResourceConverterVertexAIFeatureOnlineStoreIamMember() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType:         VertexAIFeatureOnlineStoreIAMAssetType,
		Convert:           GetVertexAIFeatureOnlineStoreIamMemberCaiObject,
		FetchFullResource: FetchVertexAIFeatureOnlineStoreIamPolicy,
		MergeCreateUpdate: MergeVertexAIFeatureOnlineStoreIamMember,
		MergeDelete:       MergeVertexAIFeatureOnlineStoreIamMemberDelete,
	}
}

func GetVertexAIFeatureOnlineStoreIamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newVertexAIFeatureOnlineStoreIamAsset(d, config, cai.ExpandIamPolicyBindings)
}

func GetVertexAIFeatureOnlineStoreIamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newVertexAIFeatureOnlineStoreIamAsset(d, config, cai.ExpandIamRoleBindings)
}

func GetVertexAIFeatureOnlineStoreIamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return newVertexAIFeatureOnlineStoreIamAsset(d, config, cai.ExpandIamMemberBindings)
}

func MergeVertexAIFeatureOnlineStoreIamPolicy(existing, incoming cai.Asset) cai.Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeVertexAIFeatureOnlineStoreIamBinding(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAuthoritativeBindings)
}

func MergeVertexAIFeatureOnlineStoreIamBindingDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAuthoritativeBindings)
}

func MergeVertexAIFeatureOnlineStoreIamMember(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAdditiveBindings)
}

func MergeVertexAIFeatureOnlineStoreIamMemberDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAdditiveBindings)
}

func newVertexAIFeatureOnlineStoreIamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]cai.IAMBinding, error),
) ([]cai.Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []cai.Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := cai.AssetName(d, config, "//aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}")
	if err != nil {
		return []cai.Asset{}, err
	}

	return []cai.Asset{{
		Name: name,
		Type: VertexAIFeatureOnlineStoreIAMAssetType,
		IAMPolicy: &cai.IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchVertexAIFeatureOnlineStoreIamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (cai.Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("region"); !ok {
		return cai.Asset{}, cai.ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("feature_online_store"); !ok {
		return cai.Asset{}, cai.ErrEmptyIdentityField
	}

	return cai.FetchIamPolicy(
		VertexAIFeatureOnlineStoreIamUpdaterProducer,
		d,
		config,
		"//aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}",
		VertexAIFeatureOnlineStoreIAMAssetType,
	)
}
