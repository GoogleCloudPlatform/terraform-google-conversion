// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package integrationconnectors

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const IntegrationConnectorsConnectionAssetType string = "connectors.googleapis.com/Connection"

func ResourceConverterIntegrationConnectorsConnection() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: IntegrationConnectorsConnectionAssetType,
		Convert:   GetIntegrationConnectorsConnectionCaiObject,
	}
}

func GetIntegrationConnectorsConnectionCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//connectors.googleapis.com/projects/{{project}}/locations/{{location}}/connections/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetIntegrationConnectorsConnectionApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: IntegrationConnectorsConnectionAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/connectors/v1/rest",
				DiscoveryName:        "Connection",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetIntegrationConnectorsConnectionApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandIntegrationConnectorsConnectionDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	connectorVersionProp, err := expandIntegrationConnectorsConnectionConnectorVersion(d.Get("connector_version"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("connector_version"); !tpgresource.IsEmptyValue(reflect.ValueOf(connectorVersionProp)) && (ok || !reflect.DeepEqual(v, connectorVersionProp)) {
		obj["connectorVersion"] = connectorVersionProp
	}
	configVariablesProp, err := expandIntegrationConnectorsConnectionConfigVariable(d.Get("config_variable"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("config_variable"); !tpgresource.IsEmptyValue(reflect.ValueOf(configVariablesProp)) && (ok || !reflect.DeepEqual(v, configVariablesProp)) {
		obj["configVariables"] = configVariablesProp
	}
	authConfigProp, err := expandIntegrationConnectorsConnectionAuthConfig(d.Get("auth_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auth_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(authConfigProp)) && (ok || !reflect.DeepEqual(v, authConfigProp)) {
		obj["authConfig"] = authConfigProp
	}
	lockConfigProp, err := expandIntegrationConnectorsConnectionLockConfig(d.Get("lock_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("lock_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(lockConfigProp)) && (ok || !reflect.DeepEqual(v, lockConfigProp)) {
		obj["lockConfig"] = lockConfigProp
	}
	destinationConfigsProp, err := expandIntegrationConnectorsConnectionDestinationConfig(d.Get("destination_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("destination_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(destinationConfigsProp)) && (ok || !reflect.DeepEqual(v, destinationConfigsProp)) {
		obj["destinationConfigs"] = destinationConfigsProp
	}
	serviceAccountProp, err := expandIntegrationConnectorsConnectionServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceAccountProp)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}
	suspendedProp, err := expandIntegrationConnectorsConnectionSuspended(d.Get("suspended"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("suspended"); !tpgresource.IsEmptyValue(reflect.ValueOf(suspendedProp)) && (ok || !reflect.DeepEqual(v, suspendedProp)) {
		obj["suspended"] = suspendedProp
	}
	nodeConfigProp, err := expandIntegrationConnectorsConnectionNodeConfig(d.Get("node_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("node_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(nodeConfigProp)) && (ok || !reflect.DeepEqual(v, nodeConfigProp)) {
		obj["nodeConfig"] = nodeConfigProp
	}
	logConfigProp, err := expandIntegrationConnectorsConnectionLogConfig(d.Get("log_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("log_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(logConfigProp)) && (ok || !reflect.DeepEqual(v, logConfigProp)) {
		obj["logConfig"] = logConfigProp
	}
	sslConfigProp, err := expandIntegrationConnectorsConnectionSslConfig(d.Get("ssl_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("ssl_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(sslConfigProp)) && (ok || !reflect.DeepEqual(v, sslConfigProp)) {
		obj["sslConfig"] = sslConfigProp
	}
	eventingEnablementTypeProp, err := expandIntegrationConnectorsConnectionEventingEnablementType(d.Get("eventing_enablement_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("eventing_enablement_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventingEnablementTypeProp)) && (ok || !reflect.DeepEqual(v, eventingEnablementTypeProp)) {
		obj["eventingEnablementType"] = eventingEnablementTypeProp
	}
	eventingConfigProp, err := expandIntegrationConnectorsConnectionEventingConfig(d.Get("eventing_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("eventing_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventingConfigProp)) && (ok || !reflect.DeepEqual(v, eventingConfigProp)) {
		obj["eventingConfig"] = eventingConfigProp
	}
	labelsProp, err := expandIntegrationConnectorsConnectionEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandIntegrationConnectorsConnectionDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConnectorVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandIntegrationConnectorsConnectionConfigVariableKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedIntegerValue, err := expandIntegrationConnectorsConnectionConfigVariableIntegerValue(original["integer_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIntegerValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["intValue"] = transformedIntegerValue
		}

		transformedStringValue, err := expandIntegrationConnectorsConnectionConfigVariableStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		transformedBooleanValue, err := expandIntegrationConnectorsConnectionConfigVariableBooleanValue(original["boolean_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBooleanValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBooleanValue
		}

		transformedSecretValue, err := expandIntegrationConnectorsConnectionConfigVariableSecretValue(original["secret_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretValue"] = transformedSecretValue
		}

		transformedEncryptionKeyValue, err := expandIntegrationConnectorsConnectionConfigVariableEncryptionKeyValue(original["encryption_key_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEncryptionKeyValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["encryptionKeyValue"] = transformedEncryptionKeyValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionConfigVariableKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariableIntegerValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariableStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariableBooleanValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariableSecretValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionConfigVariableSecretValueSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionConfigVariableSecretValueSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariableEncryptionKeyValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandIntegrationConnectorsConnectionConfigVariableEncryptionKeyValueType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedKmsKeyName, err := expandIntegrationConnectorsConnectionConfigVariableEncryptionKeyValueKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionConfigVariableEncryptionKeyValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionConfigVariableEncryptionKeyValueKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAuthType, err := expandIntegrationConnectorsConnectionAuthConfigAuthType(original["auth_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authType"] = transformedAuthType
	}

	transformedAdditionalVariable, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariable(original["additional_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalVariables"] = transformedAdditionalVariable
	}

	transformedAuthKey, err := expandIntegrationConnectorsConnectionAuthConfigAuthKey(original["auth_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authKey"] = transformedAuthKey
	}

	transformedUserPassword, err := expandIntegrationConnectorsConnectionAuthConfigUserPassword(original["user_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userPassword"] = transformedUserPassword
	}

	transformedOauth2JwtBearer, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearer(original["oauth2_jwt_bearer"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauth2JwtBearer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauth2JwtBearer"] = transformedOauth2JwtBearer
	}

	transformedOauth2ClientCredentials, err := expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentials(original["oauth2_client_credentials"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauth2ClientCredentials); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauth2ClientCredentials"] = transformedOauth2ClientCredentials
	}

	transformedSshPublicKey, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKey(original["ssh_public_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshPublicKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshPublicKey"] = transformedSshPublicKey
	}

	transformedOauth2AuthCodeFlow, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlow(original["oauth2_auth_code_flow"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauth2AuthCodeFlow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauth2AuthCodeFlow"] = transformedOauth2AuthCodeFlow
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAuthType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedIntegerValue, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableIntegerValue(original["integer_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIntegerValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["intValue"] = transformedIntegerValue
		}

		transformedStringValue, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		transformedBooleanValue, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableBooleanValue(original["boolean_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBooleanValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBooleanValue
		}

		transformedSecretValue, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValue(original["secret_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretValue"] = transformedSecretValue
		}

		transformedEncryptionKeyValue, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValue(original["encryption_key_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEncryptionKeyValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["encryptionKeyValue"] = transformedEncryptionKeyValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableIntegerValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableBooleanValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedKmsKeyName, err := expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigAuthKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigUserPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUsername, err := expandIntegrationConnectorsConnectionAuthConfigUserPasswordUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedPassword, err := expandIntegrationConnectorsConnectionAuthConfigUserPasswordPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigUserPasswordUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigUserPasswordPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigUserPasswordPasswordSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigUserPasswordPasswordSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientKey, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKey(original["client_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientKey"] = transformedClientKey
	}

	transformedJwtClaims, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaims(original["jwt_claims"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedJwtClaims); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["jwtClaims"] = transformedJwtClaims
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeySecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeySecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaims(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIssuer, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsIssuer(original["issuer"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIssuer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["issuer"] = transformedIssuer
	}

	transformedSubject, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsSubject(original["subject"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubject); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subject"] = transformedSubject
	}

	transformedAudience, err := expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsAudience(original["audience"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudience); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audience"] = transformedAudience
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsIssuer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsSubject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsAudience(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentials(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientId, err := expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientId(original["client_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientId"] = transformedClientId
	}

	transformedClientSecret, err := expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecret(original["client_secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecret"] = transformedClientSecret
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUsername, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKeyUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedSshClientCert, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCert(original["ssh_client_cert"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshClientCert); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshClientCert"] = transformedSshClientCert
	}

	transformedCertType, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKeyCertType(original["cert_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCertType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["certType"] = transformedCertType
	}

	transformedSshClientCertPass, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPass(original["ssh_client_cert_pass"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshClientCertPass); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshClientCertPass"] = transformedSshClientCertPass
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKeyUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCert(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKeyCertType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPass(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientId, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientId(original["client_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientId"] = transformedClientId
	}

	transformedClientSecret, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecret(original["client_secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecret"] = transformedClientSecret
	}

	transformedScopes, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowScopes(original["scopes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScopes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scopes"] = transformedScopes
	}

	transformedEnablePkce, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowEnablePkce(original["enable_pkce"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnablePkce); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enablePkce"] = transformedEnablePkce
	}

	transformedAuthUri, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowAuthUri(original["auth_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authUri"] = transformedAuthUri
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowScopes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowEnablePkce(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowAuthUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionLockConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocked, err := expandIntegrationConnectorsConnectionLockConfigLocked(original["locked"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocked); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["locked"] = transformedLocked
	}

	transformedReason, err := expandIntegrationConnectorsConnectionLockConfigReason(original["reason"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReason); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["reason"] = transformedReason
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionLockConfigLocked(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionLockConfigReason(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionDestinationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandIntegrationConnectorsConnectionDestinationConfigKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedDestination, err := expandIntegrationConnectorsConnectionDestinationConfigDestination(original["destination"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDestination); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["destinations"] = transformedDestination
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionDestinationConfigKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionDestinationConfigDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPort, err := expandIntegrationConnectorsConnectionDestinationConfigDestinationPort(original["port"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["port"] = transformedPort
		}

		transformedServiceAttachment, err := expandIntegrationConnectorsConnectionDestinationConfigDestinationServiceAttachment(original["service_attachment"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedServiceAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["serviceAttachment"] = transformedServiceAttachment
		}

		transformedHost, err := expandIntegrationConnectorsConnectionDestinationConfigDestinationHost(original["host"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["host"] = transformedHost
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionDestinationConfigDestinationPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionDestinationConfigDestinationServiceAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionDestinationConfigDestinationHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSuspended(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionNodeConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMinNodeCount, err := expandIntegrationConnectorsConnectionNodeConfigMinNodeCount(original["min_node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minNodeCount"] = transformedMinNodeCount
	}

	transformedMaxNodeCount, err := expandIntegrationConnectorsConnectionNodeConfigMaxNodeCount(original["max_node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxNodeCount"] = transformedMaxNodeCount
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionNodeConfigMinNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionNodeConfigMaxNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionLogConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandIntegrationConnectorsConnectionLogConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionLogConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandIntegrationConnectorsConnectionSslConfigType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedTrustModel, err := expandIntegrationConnectorsConnectionSslConfigTrustModel(original["trust_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTrustModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["trustModel"] = transformedTrustModel
	}

	transformedPrivateServerCertificate, err := expandIntegrationConnectorsConnectionSslConfigPrivateServerCertificate(original["private_server_certificate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateServerCertificate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateServerCertificate"] = transformedPrivateServerCertificate
	}

	transformedClientCertificate, err := expandIntegrationConnectorsConnectionSslConfigClientCertificate(original["client_certificate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientCertificate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientCertificate"] = transformedClientCertificate
	}

	transformedClientPrivateKey, err := expandIntegrationConnectorsConnectionSslConfigClientPrivateKey(original["client_private_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientPrivateKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientPrivateKey"] = transformedClientPrivateKey
	}

	transformedClientPrivateKeyPass, err := expandIntegrationConnectorsConnectionSslConfigClientPrivateKeyPass(original["client_private_key_pass"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientPrivateKeyPass); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientPrivateKeyPass"] = transformedClientPrivateKeyPass
	}

	transformedServerCertType, err := expandIntegrationConnectorsConnectionSslConfigServerCertType(original["server_cert_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServerCertType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serverCertType"] = transformedServerCertType
	}

	transformedClientCertType, err := expandIntegrationConnectorsConnectionSslConfigClientCertType(original["client_cert_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientCertType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientCertType"] = transformedClientCertType
	}

	transformedUseSsl, err := expandIntegrationConnectorsConnectionSslConfigUseSsl(original["use_ssl"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUseSsl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["useSsl"] = transformedUseSsl
	}

	transformedAdditionalVariable, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariable(original["additional_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalVariables"] = transformedAdditionalVariable
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigTrustModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigPrivateServerCertificate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionSslConfigPrivateServerCertificateSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigPrivateServerCertificateSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientCertificate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionSslConfigClientCertificateSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientCertificateSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientPrivateKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionSslConfigClientPrivateKeySecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientPrivateKeySecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientPrivateKeyPass(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionSslConfigClientPrivateKeyPassSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientPrivateKeyPassSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigServerCertType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigClientCertType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigUseSsl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedIntegerValue, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableIntegerValue(original["integer_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIntegerValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["intValue"] = transformedIntegerValue
		}

		transformedStringValue, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		transformedBooleanValue, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableBooleanValue(original["boolean_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBooleanValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBooleanValue
		}

		transformedSecretValue, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValue(original["secret_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretValue"] = transformedSecretValue
		}

		transformedEncryptionKeyValue, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValue(original["encryption_key_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEncryptionKeyValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["encryptionKeyValue"] = transformedEncryptionKeyValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableIntegerValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableBooleanValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedKmsKeyName, err := expandIntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingEnablementType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRegistrationDestinationConfig, err := expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfig(original["registration_destination_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegistrationDestinationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["registrationDestinationConfig"] = transformedRegistrationDestinationConfig
	}

	transformedAuthConfig, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfig(original["auth_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authConfig"] = transformedAuthConfig
	}

	transformedAdditionalVariable, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariable(original["additional_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalVariables"] = transformedAdditionalVariable
	}

	transformedEnrichmentEnabled, err := expandIntegrationConnectorsConnectionEventingConfigEnrichmentEnabled(original["enrichment_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnrichmentEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enrichmentEnabled"] = transformedEnrichmentEnabled
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKey, err := expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigKey(original["key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["key"] = transformedKey
	}

	transformedDestination, err := expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestination(original["destination"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDestination); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["destinations"] = transformedDestination
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPort, err := expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationPort(original["port"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPort); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["port"] = transformedPort
		}

		transformedServiceAttachment, err := expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationServiceAttachment(original["service_attachment"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedServiceAttachment); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["serviceAttachment"] = transformedServiceAttachment
		}

		transformedHost, err := expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationHost(original["host"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHost); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["host"] = transformedHost
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationPort(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationServiceAttachment(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationHost(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAuthType, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAuthType(original["auth_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authType"] = transformedAuthType
	}

	transformedAdditionalVariable, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariable(original["additional_variable"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalVariables"] = transformedAdditionalVariable
	}

	transformedAuthKey, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAuthKey(original["auth_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authKey"] = transformedAuthKey
	}

	transformedUserPassword, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPassword(original["user_password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userPassword"] = transformedUserPassword
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAuthType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedIntegerValue, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableIntegerValue(original["integer_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIntegerValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["intValue"] = transformedIntegerValue
		}

		transformedStringValue, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		transformedBooleanValue, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableBooleanValue(original["boolean_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBooleanValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBooleanValue
		}

		transformedSecretValue, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValue(original["secret_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretValue"] = transformedSecretValue
		}

		transformedEncryptionKeyValue, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValue(original["encryption_key_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEncryptionKeyValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["encryptionKeyValue"] = transformedEncryptionKeyValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableIntegerValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableBooleanValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedKmsKeyName, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigAuthKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUsername, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedPassword, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedIntegerValue, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableIntegerValue(original["integer_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIntegerValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["intValue"] = transformedIntegerValue
		}

		transformedStringValue, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableStringValue(original["string_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stringValue"] = transformedStringValue
		}

		transformedBooleanValue, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableBooleanValue(original["boolean_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBooleanValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["boolValue"] = transformedBooleanValue
		}

		transformedSecretValue, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValue(original["secret_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretValue"] = transformedSecretValue
		}

		transformedEncryptionKeyValue, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValue(original["encryption_key_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEncryptionKeyValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["encryptionKeyValue"] = transformedEncryptionKeyValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableIntegerValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableStringValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableBooleanValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	transformedKmsKeyName, err := expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEventingConfigEnrichmentEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIntegrationConnectorsConnectionEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
