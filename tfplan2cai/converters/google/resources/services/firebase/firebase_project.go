// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebase

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

func getExistingFirebaseProjectId(config *transport_tpg.Config, d *schema.ResourceData, billingProject string, userAgent string) (string, error) {
	url, err := tpgresource.ReplaceVars(d, config, "{{FirebaseBasePath}}projects/{{project}}")
	if err != nil {
		return "", err
	}

	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err == nil {
		id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}")
		if err != nil {
			return "", fmt.Errorf("Error constructing id: %s", err)
		}
		return id, nil
	}

	if !transport_tpg.IsGoogleApiErrorWithCode(err, 404) {
		return "", err
	}

	return "", nil
}

const FirebaseProjectAssetType string = "firebase.googleapis.com/Project"

func ResourceConverterFirebaseProject() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType: FirebaseProjectAssetType,
		Convert:   GetFirebaseProjectCaiObject,
	}
}

func GetFirebaseProjectCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	name, err := tpgresource.AssetName(d, config, "//firebase.googleapis.com/projects/{{project}}")
	if err != nil {
		return []tpgresource.Asset{}, err
	}
	if obj, err := GetFirebaseProjectApiObject(d, config); err == nil {
		return []tpgresource.Asset{{
			Name: name,
			Type: FirebaseProjectAssetType,
			Resource: &tpgresource.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/firebase/v1beta1/rest",
				DiscoveryName:        "Project",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []tpgresource.Asset{}, err
	}
}

func GetFirebaseProjectApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})

	return obj, nil
}
