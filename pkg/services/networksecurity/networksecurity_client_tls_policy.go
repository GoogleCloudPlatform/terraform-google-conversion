// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networksecurity/ClientTlsPolicy.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networksecurity

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = fmt.Sprintf
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = schema.Noop
	_ = validation.All
	_ = tgcresource.RemoveTerraformAttributionLabel
	_ = tpgresource.GetRegion
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
)

const NetworkSecurityClientTlsPolicyAssetType string = "networksecurity.googleapis.com/ClientTlsPolicy"

const NetworkSecurityClientTlsPolicySchemaName string = "google_network_security_client_tls_policy"

func ResourceNetworkSecurityClientTlsPolicy() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the ClientTlsPolicy resource.`,
			},
			"client_certificate": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"certificate_provider_instance": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"plugin_instance": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.`,
									},
								},
							},
							ExactlyOneOf: []string{},
						},
						"grpc_endpoint": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `gRPC specific configuration to access the gRPC server to obtain the cert and private key.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"target_uri": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".`,
									},
								},
							},
							ExactlyOneOf: []string{},
						},
					},
				},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `A free-text description of the resource. Max length 1024 characters.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Set of label tags associated with the ClientTlsPolicy resource.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"location": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The location of the client tls policy.
The default value is 'global'.`,
				Default: "global",
			},
			"server_validation_ca": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Defines the mechanism to obtain the Certificate Authority certificate to validate the server certificate. If empty, client does not validate the server certificate.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"certificate_provider_instance": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"plugin_instance": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.`,
									},
								},
							},
							ExactlyOneOf: []string{},
						},
						"grpc_endpoint": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `gRPC specific configuration to access the gRPC server to obtain the cert and private key.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"target_uri": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".`,
									},
								},
							},
							ExactlyOneOf: []string{},
						},
					},
				},
			},
			"sni": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Server Name Indication string to present to the server during TLS handshake. E.g: "secure.example.com".`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the ClientTlsPolicy was created in UTC.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the ClientTlsPolicy was updated in UTC.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
