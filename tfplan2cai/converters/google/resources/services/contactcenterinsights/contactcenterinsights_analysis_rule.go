// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/contactcenterinsights/AnalysisRule.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package contactcenterinsights

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ContactCenterInsightsAnalysisRuleAssetType string = "contactcenterinsights.googleapis.com/AnalysisRule"

func ResourceConverterContactCenterInsightsAnalysisRule() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ContactCenterInsightsAnalysisRuleAssetType,
		Convert:   GetContactCenterInsightsAnalysisRuleCaiObject,
	}
}

func GetContactCenterInsightsAnalysisRuleCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//contactcenterinsights.googleapis.com/projects/{{project}}/locations/{{location}}/analysisRules/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetContactCenterInsightsAnalysisRuleApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ContactCenterInsightsAnalysisRuleAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/contactcenterinsights/v1/rest",
				DiscoveryName:        "AnalysisRule",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetContactCenterInsightsAnalysisRuleApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandContactCenterInsightsAnalysisRuleDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	conversationFilterProp, err := expandContactCenterInsightsAnalysisRuleConversationFilter(d.Get("conversation_filter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("conversation_filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(conversationFilterProp)) && (ok || !reflect.DeepEqual(v, conversationFilterProp)) {
		obj["conversationFilter"] = conversationFilterProp
	}
	annotatorSelectorProp, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelector(d.Get("annotator_selector"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("annotator_selector"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotatorSelectorProp)) && (ok || !reflect.DeepEqual(v, annotatorSelectorProp)) {
		obj["annotatorSelector"] = annotatorSelectorProp
	}
	analysisPercentageProp, err := expandContactCenterInsightsAnalysisRuleAnalysisPercentage(d.Get("analysis_percentage"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("analysis_percentage"); !tpgresource.IsEmptyValue(reflect.ValueOf(analysisPercentageProp)) && (ok || !reflect.DeepEqual(v, analysisPercentageProp)) {
		obj["analysisPercentage"] = analysisPercentageProp
	}
	activeProp, err := expandContactCenterInsightsAnalysisRuleActive(d.Get("active"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("active"); !tpgresource.IsEmptyValue(reflect.ValueOf(activeProp)) && (ok || !reflect.DeepEqual(v, activeProp)) {
		obj["active"] = activeProp
	}

	return obj, nil
}

func expandContactCenterInsightsAnalysisRuleDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleConversationFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelector(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRunInterruptionAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunInterruptionAnnotator(original["run_interruption_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunInterruptionAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runInterruptionAnnotator"] = transformedRunInterruptionAnnotator
	}

	transformedPhraseMatchers, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorPhraseMatchers(original["phrase_matchers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPhraseMatchers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["phraseMatchers"] = transformedPhraseMatchers
	}

	transformedRunEntityAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunEntityAnnotator(original["run_entity_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunEntityAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runEntityAnnotator"] = transformedRunEntityAnnotator
	}

	transformedIssueModels, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorIssueModels(original["issue_models"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIssueModels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["issueModels"] = transformedIssueModels
	}

	transformedRunQaAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunQaAnnotator(original["run_qa_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunQaAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runQaAnnotator"] = transformedRunQaAnnotator
	}

	transformedRunSilenceAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSilenceAnnotator(original["run_silence_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunSilenceAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runSilenceAnnotator"] = transformedRunSilenceAnnotator
	}

	transformedRunPhraseMatcherAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunPhraseMatcherAnnotator(original["run_phrase_matcher_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunPhraseMatcherAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runPhraseMatcherAnnotator"] = transformedRunPhraseMatcherAnnotator
	}

	transformedRunSentimentAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSentimentAnnotator(original["run_sentiment_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunSentimentAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runSentimentAnnotator"] = transformedRunSentimentAnnotator
	}

	transformedRunIntentAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIntentAnnotator(original["run_intent_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunIntentAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runIntentAnnotator"] = transformedRunIntentAnnotator
	}

	transformedRunIssueModelAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIssueModelAnnotator(original["run_issue_model_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunIssueModelAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runIssueModelAnnotator"] = transformedRunIssueModelAnnotator
	}

	transformedRunSummarizationAnnotator, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSummarizationAnnotator(original["run_summarization_annotator"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunSummarizationAnnotator); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runSummarizationAnnotator"] = transformedRunSummarizationAnnotator
	}

	transformedSummarizationConfig, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfig(original["summarization_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSummarizationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["summarizationConfig"] = transformedSummarizationConfig
	}

	transformedQaConfig, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfig(original["qa_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQaConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["qaConfig"] = transformedQaConfig
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunInterruptionAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorPhraseMatchers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunEntityAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorIssueModels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunQaAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSilenceAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunPhraseMatcherAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSentimentAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIntentAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunIssueModelAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorRunSummarizationAnnotator(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedConversationProfile, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigConversationProfile(original["conversation_profile"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConversationProfile); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["conversationProfile"] = transformedConversationProfile
	}

	transformedSummarizationModel, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigSummarizationModel(original["summarization_model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSummarizationModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["summarizationModel"] = transformedSummarizationModel
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigConversationProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorSummarizationConfigSummarizationModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScorecardList, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardList(original["scorecard_list"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScorecardList); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scorecardList"] = transformedScorecardList
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardList(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedQaScorecardRevisions, err := expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardListQaScorecardRevisions(original["qa_scorecard_revisions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQaScorecardRevisions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["qaScorecardRevisions"] = transformedQaScorecardRevisions
	}

	return transformed, nil
}

func expandContactCenterInsightsAnalysisRuleAnnotatorSelectorQaConfigScorecardListQaScorecardRevisions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleAnalysisPercentage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContactCenterInsightsAnalysisRuleActive(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
