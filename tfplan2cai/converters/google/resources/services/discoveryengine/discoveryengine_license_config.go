// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/LicenseConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DiscoveryEngineLicenseConfigAssetType string = "{{location}}-discoveryengine.googleapis.com/LicenseConfig"

func ResourceConverterDiscoveryEngineLicenseConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DiscoveryEngineLicenseConfigAssetType,
		Convert:   GetDiscoveryEngineLicenseConfigCaiObject,
	}
}

func GetDiscoveryEngineLicenseConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-discoveryengine.googleapis.com/projects/{{project}}/locations/{{location}}/licenseConfigs/{{license_config_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDiscoveryEngineLicenseConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DiscoveryEngineLicenseConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-discoveryengine/v1/rest",
				DiscoveryName:        "LicenseConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDiscoveryEngineLicenseConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	licenseCountProp, err := expandDiscoveryEngineLicenseConfigLicenseCount(d.Get("license_count"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("license_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(licenseCountProp)) && (ok || !reflect.DeepEqual(v, licenseCountProp)) {
		obj["licenseCount"] = licenseCountProp
	}
	subscriptionTierProp, err := expandDiscoveryEngineLicenseConfigSubscriptionTier(d.Get("subscription_tier"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("subscription_tier"); !tpgresource.IsEmptyValue(reflect.ValueOf(subscriptionTierProp)) && (ok || !reflect.DeepEqual(v, subscriptionTierProp)) {
		obj["subscriptionTier"] = subscriptionTierProp
	}
	autoRenewProp, err := expandDiscoveryEngineLicenseConfigAutoRenew(d.Get("auto_renew"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auto_renew"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoRenewProp)) && (ok || !reflect.DeepEqual(v, autoRenewProp)) {
		obj["autoRenew"] = autoRenewProp
	}
	startDateProp, err := expandDiscoveryEngineLicenseConfigStartDate(d.Get("start_date"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("start_date"); !tpgresource.IsEmptyValue(reflect.ValueOf(startDateProp)) && (ok || !reflect.DeepEqual(v, startDateProp)) {
		obj["startDate"] = startDateProp
	}
	endDateProp, err := expandDiscoveryEngineLicenseConfigEndDate(d.Get("end_date"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("end_date"); !tpgresource.IsEmptyValue(reflect.ValueOf(endDateProp)) && (ok || !reflect.DeepEqual(v, endDateProp)) {
		obj["endDate"] = endDateProp
	}
	subscriptionTermProp, err := expandDiscoveryEngineLicenseConfigSubscriptionTerm(d.Get("subscription_term"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("subscription_term"); !tpgresource.IsEmptyValue(reflect.ValueOf(subscriptionTermProp)) && (ok || !reflect.DeepEqual(v, subscriptionTermProp)) {
		obj["subscriptionTerm"] = subscriptionTermProp
	}
	freeTrialProp, err := expandDiscoveryEngineLicenseConfigFreeTrial(d.Get("free_trial"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("free_trial"); !tpgresource.IsEmptyValue(reflect.ValueOf(freeTrialProp)) && (ok || !reflect.DeepEqual(v, freeTrialProp)) {
		obj["freeTrial"] = freeTrialProp
	}

	return obj, nil
}

func expandDiscoveryEngineLicenseConfigLicenseCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigSubscriptionTier(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigAutoRenew(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigStartDate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedYear, err := expandDiscoveryEngineLicenseConfigStartDateYear(original["year"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedYear); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["year"] = transformedYear
	}

	transformedMonth, err := expandDiscoveryEngineLicenseConfigStartDateMonth(original["month"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonth); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["month"] = transformedMonth
	}

	transformedDay, err := expandDiscoveryEngineLicenseConfigStartDateDay(original["day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["day"] = transformedDay
	}

	return transformed, nil
}

func expandDiscoveryEngineLicenseConfigStartDateYear(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigStartDateMonth(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigStartDateDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigEndDate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedYear, err := expandDiscoveryEngineLicenseConfigEndDateYear(original["year"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedYear); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["year"] = transformedYear
	}

	transformedMonth, err := expandDiscoveryEngineLicenseConfigEndDateMonth(original["month"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMonth); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["month"] = transformedMonth
	}

	transformedDay, err := expandDiscoveryEngineLicenseConfigEndDateDay(original["day"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDay); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["day"] = transformedDay
	}

	return transformed, nil
}

func expandDiscoveryEngineLicenseConfigEndDateYear(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigEndDateMonth(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigEndDateDay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigSubscriptionTerm(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineLicenseConfigFreeTrial(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
