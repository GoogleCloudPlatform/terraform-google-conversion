// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/iamworkforcepool/OauthClient.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package iamworkforcepool

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const IAMWorkforcePoolOauthClientAssetType string = "iam.googleapis.com/OauthClient"

func ResourceConverterIAMWorkforcePoolOauthClient() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: IAMWorkforcePoolOauthClientAssetType,
		Convert:   GetIAMWorkforcePoolOauthClientCaiObject,
	}
}

func GetIAMWorkforcePoolOauthClientCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//iam.googleapis.com/projects/{{project}}/locations/{{location}}/oauthClients/{{oauth_client_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetIAMWorkforcePoolOauthClientApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: IAMWorkforcePoolOauthClientAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/iam/v1/rest",
				DiscoveryName:        "OauthClient",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetIAMWorkforcePoolOauthClientApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	allowedScopesProp, err := expandIAMWorkforcePoolOauthClientAllowedScopes(d.Get("allowed_scopes"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("allowed_scopes"); !tpgresource.IsEmptyValue(reflect.ValueOf(allowedScopesProp)) && (ok || !reflect.DeepEqual(v, allowedScopesProp)) {
		obj["allowedScopes"] = allowedScopesProp
	}
	disabledProp, err := expandIAMWorkforcePoolOauthClientDisabled(d.Get("disabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("disabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(disabledProp)) && (ok || !reflect.DeepEqual(v, disabledProp)) {
		obj["disabled"] = disabledProp
	}
	displayNameProp, err := expandIAMWorkforcePoolOauthClientDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandIAMWorkforcePoolOauthClientDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	allowedGrantTypesProp, err := expandIAMWorkforcePoolOauthClientAllowedGrantTypes(d.Get("allowed_grant_types"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("allowed_grant_types"); !tpgresource.IsEmptyValue(reflect.ValueOf(allowedGrantTypesProp)) && (ok || !reflect.DeepEqual(v, allowedGrantTypesProp)) {
		obj["allowedGrantTypes"] = allowedGrantTypesProp
	}
	clientTypeProp, err := expandIAMWorkforcePoolOauthClientClientType(d.Get("client_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("client_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(clientTypeProp)) && (ok || !reflect.DeepEqual(v, clientTypeProp)) {
		obj["clientType"] = clientTypeProp
	}
	allowedRedirectUrisProp, err := expandIAMWorkforcePoolOauthClientAllowedRedirectUris(d.Get("allowed_redirect_uris"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("allowed_redirect_uris"); !tpgresource.IsEmptyValue(reflect.ValueOf(allowedRedirectUrisProp)) && (ok || !reflect.DeepEqual(v, allowedRedirectUrisProp)) {
		obj["allowedRedirectUris"] = allowedRedirectUrisProp
	}

	return obj, nil
}

func expandIAMWorkforcePoolOauthClientAllowedScopes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMWorkforcePoolOauthClientDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMWorkforcePoolOauthClientDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMWorkforcePoolOauthClientDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMWorkforcePoolOauthClientAllowedGrantTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMWorkforcePoolOauthClientClientType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMWorkforcePoolOauthClientAllowedRedirectUris(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
