// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/DataConnector.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DiscoveryEngineDataConnectorAssetType string = "{{location}}-discoveryengine.googleapis.com/DataConnector"

func ResourceConverterDiscoveryEngineDataConnector() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DiscoveryEngineDataConnectorAssetType,
		Convert:   GetDiscoveryEngineDataConnectorCaiObject,
	}
}

func GetDiscoveryEngineDataConnectorCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-discoveryengine.googleapis.com/projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDiscoveryEngineDataConnectorApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DiscoveryEngineDataConnectorAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-discoveryengine/v1/rest",
				DiscoveryName:        "DataConnector",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDiscoveryEngineDataConnectorApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	dataSourceProp, err := expandDiscoveryEngineDataConnectorDataSource(d.Get("data_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("data_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(dataSourceProp)) && (ok || !reflect.DeepEqual(v, dataSourceProp)) {
		obj["dataSource"] = dataSourceProp
	}
	paramsProp, err := expandDiscoveryEngineDataConnectorParams(d.Get("params"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("params"); !tpgresource.IsEmptyValue(reflect.ValueOf(paramsProp)) && (ok || !reflect.DeepEqual(v, paramsProp)) {
		obj["params"] = paramsProp
	}
	jsonParamsProp, err := expandDiscoveryEngineDataConnectorJsonParams(d.Get("json_params"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("json_params"); !tpgresource.IsEmptyValue(reflect.ValueOf(jsonParamsProp)) && (ok || !reflect.DeepEqual(v, jsonParamsProp)) {
		obj["jsonParams"] = jsonParamsProp
	}
	refreshIntervalProp, err := expandDiscoveryEngineDataConnectorRefreshInterval(d.Get("refresh_interval"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("refresh_interval"); !tpgresource.IsEmptyValue(reflect.ValueOf(refreshIntervalProp)) && (ok || !reflect.DeepEqual(v, refreshIntervalProp)) {
		obj["refreshInterval"] = refreshIntervalProp
	}
	entitiesProp, err := expandDiscoveryEngineDataConnectorEntities(d.Get("entities"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("entities"); !tpgresource.IsEmptyValue(reflect.ValueOf(entitiesProp)) && (ok || !reflect.DeepEqual(v, entitiesProp)) {
		obj["entities"] = entitiesProp
	}
	kmsKeyNameProp, err := expandDiscoveryEngineDataConnectorKmsKeyName(d.Get("kms_key_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("kms_key_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(kmsKeyNameProp)) && (ok || !reflect.DeepEqual(v, kmsKeyNameProp)) {
		obj["kmsKeyName"] = kmsKeyNameProp
	}
	staticIpEnabledProp, err := expandDiscoveryEngineDataConnectorStaticIpEnabled(d.Get("static_ip_enabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("static_ip_enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(staticIpEnabledProp)) && (ok || !reflect.DeepEqual(v, staticIpEnabledProp)) {
		obj["staticIpEnabled"] = staticIpEnabledProp
	}

	return obj, nil
}

func expandDiscoveryEngineDataConnectorDataSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataConnectorParams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDiscoveryEngineDataConnectorJsonParams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataConnectorRefreshInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataConnectorEntities(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedEntityName, err := expandDiscoveryEngineDataConnectorEntitiesEntityName(original["entity_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEntityName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["entityName"] = transformedEntityName
		}

		transformedKeyPropertyMappings, err := expandDiscoveryEngineDataConnectorEntitiesKeyPropertyMappings(original["key_property_mappings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKeyPropertyMappings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["keyPropertyMappings"] = transformedKeyPropertyMappings
		}

		transformedDataStore, err := expandDiscoveryEngineDataConnectorEntitiesDataStore(original["data_store"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDataStore); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["dataStore"] = transformedDataStore
		}

		transformedParams, err := expandDiscoveryEngineDataConnectorEntitiesParams(original["params"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParams); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["params"] = transformedParams
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineDataConnectorEntitiesEntityName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataConnectorEntitiesKeyPropertyMappings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDiscoveryEngineDataConnectorEntitiesDataStore(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataConnectorEntitiesParams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDiscoveryEngineDataConnectorKmsKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataConnectorStaticIpEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
