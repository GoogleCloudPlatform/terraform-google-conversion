// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apihub/PluginInstance.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apihub

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApihubPluginInstanceAssetType string = "apihub.googleapis.com/PluginInstance"

func ResourceConverterApihubPluginInstance() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApihubPluginInstanceAssetType,
		Convert:   GetApihubPluginInstanceCaiObject,
	}
}

func GetApihubPluginInstanceCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apihub.googleapis.com/projects/{{project}}/locations/{{location}}/plugins/{{plugin}}/instances/{{plugin_instance_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApihubPluginInstanceApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApihubPluginInstanceAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apihub/v1/rest",
				DiscoveryName:        "PluginInstance",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApihubPluginInstanceApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	disableProp, err := expandApihubPluginInstanceDisable(d.Get("disable"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("disable"); !tpgresource.IsEmptyValue(reflect.ValueOf(disableProp)) && (ok || !reflect.DeepEqual(v, disableProp)) {
		obj["disable"] = disableProp
	}
	authConfigProp, err := expandApihubPluginInstanceAuthConfig(d.Get("auth_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auth_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(authConfigProp)) && (ok || !reflect.DeepEqual(v, authConfigProp)) {
		obj["authConfig"] = authConfigProp
	}
	displayNameProp, err := expandApihubPluginInstanceDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	actionsProp, err := expandApihubPluginInstanceActions(d.Get("actions"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("actions"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionsProp)) && (ok || !reflect.DeepEqual(v, actionsProp)) {
		obj["actions"] = actionsProp
	}

	return obj, nil
}

func expandApihubPluginInstanceDisable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGoogleServiceAccountConfig, err := expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfig(original["google_service_account_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGoogleServiceAccountConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["googleServiceAccountConfig"] = transformedGoogleServiceAccountConfig
	}

	transformedUserPasswordConfig, err := expandApihubPluginInstanceAuthConfigUserPasswordConfig(original["user_password_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserPasswordConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userPasswordConfig"] = transformedUserPasswordConfig
	}

	transformedApiKeyConfig, err := expandApihubPluginInstanceAuthConfigApiKeyConfig(original["api_key_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKeyConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKeyConfig"] = transformedApiKeyConfig
	}

	transformedOauth2ClientCredentialsConfig, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfig(original["oauth2_client_credentials_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauth2ClientCredentialsConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["oauth2ClientCredentialsConfig"] = transformedOauth2ClientCredentialsConfig
	}

	transformedAuthType, err := expandApihubPluginInstanceAuthConfigAuthType(original["auth_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authType"] = transformedAuthType
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAccount, err := expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfigServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigGoogleServiceAccountConfigServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUsername, err := expandApihubPluginInstanceAuthConfigUserPasswordConfigUsername(original["username"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["username"] = transformedUsername
	}

	transformedPassword, err := expandApihubPluginInstanceAuthConfigUserPasswordConfigPassword(original["password"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPassword); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["password"] = transformedPassword
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfigUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfigPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandApihubPluginInstanceAuthConfigUserPasswordConfigPasswordSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigUserPasswordConfigPasswordSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandApihubPluginInstanceAuthConfigApiKeyConfigName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedApiKey, err := expandApihubPluginInstanceAuthConfigApiKeyConfigApiKey(original["api_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApiKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apiKey"] = transformedApiKey
	}

	transformedHttpElementLocation, err := expandApihubPluginInstanceAuthConfigApiKeyConfigHttpElementLocation(original["http_element_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpElementLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["httpElementLocation"] = transformedHttpElementLocation
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigApiKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandApihubPluginInstanceAuthConfigApiKeyConfigApiKeySecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigApiKeySecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigApiKeyConfigHttpElementLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedClientSecret, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecret(original["client_secret"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientSecret); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientSecret"] = transformedClientSecret
	}

	transformedClientId, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientId(original["client_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedClientId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["clientId"] = transformedClientId
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecret(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecretSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientSecretSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigOauth2ClientCredentialsConfigClientId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceAuthConfigAuthType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedHubInstanceAction, err := expandApihubPluginInstanceActionsHubInstanceAction(original["hub_instance_action"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHubInstanceAction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hubInstanceAction"] = transformedHubInstanceAction
		}

		transformedActionId, err := expandApihubPluginInstanceActionsActionId(original["action_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedActionId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["actionId"] = transformedActionId
		}

		transformedState, err := expandApihubPluginInstanceActionsState(original["state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["state"] = transformedState
		}

		transformedScheduleCronExpression, err := expandApihubPluginInstanceActionsScheduleCronExpression(original["schedule_cron_expression"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedScheduleCronExpression); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["scheduleCronExpression"] = transformedScheduleCronExpression
		}

		transformedCurationConfig, err := expandApihubPluginInstanceActionsCurationConfig(original["curation_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCurationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["curationConfig"] = transformedCurationConfig
		}

		transformedScheduleTimeZone, err := expandApihubPluginInstanceActionsScheduleTimeZone(original["schedule_time_zone"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedScheduleTimeZone); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["scheduleTimeZone"] = transformedScheduleTimeZone
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginInstanceActionsHubInstanceAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCurrentExecutionState, err := expandApihubPluginInstanceActionsHubInstanceActionCurrentExecutionState(original["current_execution_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCurrentExecutionState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["currentExecutionState"] = transformedCurrentExecutionState
	}

	transformedLastExecution, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecution(original["last_execution"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLastExecution); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lastExecution"] = transformedLastExecution
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionCurrentExecutionState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecution(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedResult, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionResult(original["result"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResult); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["result"] = transformedResult
	}

	transformedErrorMessage, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionErrorMessage(original["error_message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedErrorMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["errorMessage"] = transformedErrorMessage
	}

	transformedStartTime, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionStartTime(original["start_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["startTime"] = transformedStartTime
	}

	transformedEndTime, err := expandApihubPluginInstanceActionsHubInstanceActionLastExecutionEndTime(original["end_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endTime"] = transformedEndTime
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionResult(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsHubInstanceActionLastExecutionEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsActionId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsScheduleCronExpression(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsCurationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCustomCuration, err := expandApihubPluginInstanceActionsCurationConfigCustomCuration(original["custom_curation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomCuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customCuration"] = transformedCustomCuration
	}

	transformedCurationType, err := expandApihubPluginInstanceActionsCurationConfigCurationType(original["curation_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCurationType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["curationType"] = transformedCurationType
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsCurationConfigCustomCuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCuration, err := expandApihubPluginInstanceActionsCurationConfigCustomCurationCuration(original["curation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["curation"] = transformedCuration
	}

	return transformed, nil
}

func expandApihubPluginInstanceActionsCurationConfigCustomCurationCuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsCurationConfigCurationType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginInstanceActionsScheduleTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
