// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/pubsub/Topic.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package pubsub

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

const PubsubTopicAssetType string = "pubsub.googleapis.com/Topic"

const PubsubTopicSchemaName string = "google_pubsub_topic"

func ResourcePubsubTopic() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
				Description:      `Name of the topic.`,
			},
			"ingestion_data_source_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for ingestion from a data source into this topic.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"aws_kinesis": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings for ingestion from Amazon Kinesis Data Streams.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"aws_role_arn": {
										Type:     schema.TypeString,
										Required: true,
										Description: `AWS role ARN to be used for Federated Identity authentication with
Kinesis. Check the Pub/Sub docs for how to set up this role and the
required permissions that need to be attached to it.`,
									},
									"consumer_arn": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The Kinesis consumer ARN to used for ingestion in
Enhanced Fan-Out mode. The consumer must be already
created and ready to be used.`,
									},
									"gcp_service_account": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The GCP service account to be used for Federated Identity authentication
with Kinesis (via a 'AssumeRoleWithWebIdentity' call for the provided
role). The 'awsRoleArn' must be set up with 'accounts.google.com:sub'
equals to this service account number.`,
									},
									"stream_arn": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The Kinesis stream ARN to ingest data from.`,
									},
								},
							},
							ConflictsWith: []string{},
						},
						"aws_msk": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings for ingestion from Amazon Managed Streaming for Apache Kafka.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"aws_role_arn": {
										Type:     schema.TypeString,
										Required: true,
										Description: `AWS role ARN to be used for Federated Identity authentication with
MSK. Check the Pub/Sub docs for how to set up this role and the
required permissions that need to be attached to it.`,
									},
									"cluster_arn": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `ARN that uniquely identifies the MSK cluster.`,
									},
									"gcp_service_account": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The GCP service account to be used for Federated Identity authentication
with MSK (via a 'AssumeRoleWithWebIdentity' call for the provided
role). The 'awsRoleArn' must be set up with 'accounts.google.com:sub'
equals to this service account number.`,
									},
									"topic": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The name of the MSK topic that Pub/Sub will import from.`,
									},
								},
							},
							ConflictsWith: []string{},
						},
						"azure_event_hubs": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings for ingestion from Azure Event Hubs.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"client_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Azure event hub client ID to use for ingestion.`,
									},
									"event_hub": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Azure event hub to ingest data from.`,
									},
									"gcp_service_account": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The GCP service account to be used for Federated Identity authentication
with Azure (via a 'AssumeRoleWithWebIdentity' call for the provided
role).`,
									},
									"namespace": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Azure event hub namespace to ingest data from.`,
									},
									"resource_group": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The name of the resource group within an Azure subscription.`,
									},
									"subscription_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Azure event hub subscription ID to use for ingestion.`,
									},
									"tenant_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Azure event hub tenant ID to use for ingestion.`,
									},
								},
							},
							ConflictsWith: []string{},
						},
						"cloud_storage": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings for ingestion from Cloud Storage.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"bucket": {
										Type:     schema.TypeString,
										Required: true,
										Description: `Cloud Storage bucket. The bucket name must be without any
prefix like "gs://". See the bucket naming requirements:
https://cloud.google.com/storage/docs/buckets#naming.`,
									},
									"avro_format": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Configuration for reading Cloud Storage data in Avro binary format. The
bytes of each object will be set to the 'data' field of a Pub/Sub message.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ExactlyOneOf: []string{},
									},
									"match_glob": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Glob pattern used to match objects that will be ingested. If unset, all
objects will be ingested. See the supported patterns:
https://cloud.google.com/storage/docs/json_api/v1/objects/list#list-objects-and-prefixes-using-glob`,
									},
									"minimum_object_create_time": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The timestamp set in RFC3339 text format. If set, only objects with a
larger or equal timestamp will be ingested. Unset by default, meaning
all objects will be ingested.`,
									},
									"pubsub_avro_format": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Configuration for reading Cloud Storage data written via Cloud Storage
subscriptions(See https://cloud.google.com/pubsub/docs/cloudstorage). The
data and attributes fields of the originally exported Pub/Sub message
will be restored when publishing.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ExactlyOneOf: []string{},
									},
									"text_format": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `Configuration for reading Cloud Storage data in text format. Each line of
text as specified by the delimiter will be set to the 'data' field of a
Pub/Sub message.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"delimiter": {
													Type:     schema.TypeString,
													Optional: true,
													Description: `The delimiter to use when using the 'text' format. Each line of text as
specified by the delimiter will be set to the 'data' field of a Pub/Sub
message. When unset, '\n' is used.`,
													Default: "\n",
												},
											},
										},
										ExactlyOneOf: []string{},
									},
								},
							},
							ConflictsWith: []string{},
						},
						"confluent_cloud": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Settings for ingestion from Confluent Cloud.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"bootstrap_server": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The Confluent Cloud bootstrap server. The format is url:port.`,
									},
									"gcp_service_account": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The GCP service account to be used for Federated Identity authentication
with Confluent Cloud.`,
									},
									"identity_pool_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Identity pool ID to be used for Federated Identity authentication with Confluent Cloud.`,
									},
									"topic": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Name of the Confluent Cloud topic that Pub/Sub will import from.`,
									},
									"cluster_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The Confluent Cloud cluster ID.`,
									},
								},
							},
							ConflictsWith: []string{},
						},
						"platform_logs_settings": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Settings for Platform Logs regarding ingestion to Pub/Sub. If unset,
no Platform Logs will be generated.'`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"severity": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"SEVERITY_UNSPECIFIED", "DISABLED", "DEBUG", "INFO", "WARNING", "ERROR", ""}),
										Description: `The minimum severity level of Platform Logs that will be written. If unspecified,
no Platform Logs will be written. Default value: "SEVERITY_UNSPECIFIED" Possible values: ["SEVERITY_UNSPECIFIED", "DISABLED", "DEBUG", "INFO", "WARNING", "ERROR"]`,
										Default: "SEVERITY_UNSPECIFIED",
									},
								},
							},
						},
					},
				},
			},
			"kms_key_name": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The resource name of the Cloud KMS CryptoKey to be used to protect access
to messages published on this topic. Your project's PubSub service account
('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com') must have
'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature.
The expected format is 'projects/*/locations/*/keyRings/*/cryptoKeys/*'`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `A set of key/value label pairs to assign to this Topic.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"message_retention_duration": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Indicates the minimum duration to retain a message after it is published
to the topic. If this field is set, messages published to the topic in
the last messageRetentionDuration are always available to subscribers.
For instance, it allows any attached subscription to seek to a timestamp
that is up to messageRetentionDuration in the past. If this field is not
set, message retention is controlled by settings on individual subscriptions.
The rotation period has the format of a decimal number, followed by the
letter 's' (seconds). Cannot be more than 31 days or less than 10 minutes.`,
			},
			"message_storage_policy": {
				Type:     schema.TypeList,
				Computed: true,
				Optional: true,
				Description: `Policy constraining the set of Google Cloud Platform regions where
messages published to the topic may be stored. If not present, then no
constraints are in effect.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allowed_persistence_regions": {
							Type:     schema.TypeSet,
							Required: true,
							Description: `A list of IDs of GCP regions where messages that are published to
the topic may be persisted in storage. Messages published by
publishers running in non-allowed GCP regions (or running outside
of GCP altogether) will be routed for storage in one of the
allowed regions. An empty list means that no regions are allowed,
and is not a valid configuration.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Set: schema.HashString,
						},
						"enforce_in_transit": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `If true, 'allowedPersistenceRegions' is also used to enforce in-transit
guarantees for messages. That is, Pub/Sub will fail topics.publish
operations on this topic and subscribe operations on any subscription
attached to this topic in any region that is not in 'allowedPersistenceRegions'.`,
						},
					},
				},
			},
			"message_transforms": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Transforms to be applied to messages published to the topic. Transforms are applied in the
order specified.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `Controls whether or not to use this transform. If not set or 'false',
the transform will be applied to messages. Default: 'true'.`,
							Default: false,
						},
						"javascript_udf": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Javascript User Defined Function. If multiple Javascript UDFs are specified on a resource,
each one must have a unique 'function_name'.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"code": {
										Type:     schema.TypeString,
										Required: true,
										Description: `JavaScript code that contains a function 'function_name' with the
following signature:
'''
  /**
  * Transforms a Pub/Sub message.
  *
  * @return {(Object<string, (string | Object<string, string>)>|null)} - To
  * filter a message, return 'null'. To transform a message return a map
  * with the following keys:
  *   - (required) 'data' : {string}
  *   - (optional) 'attributes' : {Object<string, string>}
  * Returning empty 'attributes' will remove all attributes from the
  * message.
  *
  * @param  {(Object<string, (string | Object<string, string>)>} Pub/Sub
  * message. Keys:
  *   - (required) 'data' : {string}
  *   - (required) 'attributes' : {Object<string, string>}
  *
  * @param  {Object<string, any>} metadata - Pub/Sub message metadata.
  * Keys:
  *   - (required) 'message_id'  : {string}
  *   - (optional) 'publish_time': {string} YYYY-MM-DDTHH:MM:SSZ format
  *   - (optional) 'ordering_key': {string}
  */
  function <function_name>(message, metadata) {
  }
'''`,
									},
									"function_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Name of the JavaScript function that should be applied to Pub/Sub messages.`,
									},
								},
							},
						},
					},
				},
			},
			"schema_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for validating messages published against a schema.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"schema": {
							Type:     schema.TypeString,
							Required: true,
							Description: `The name of the schema that messages published should be
validated against. Format is projects/{project}/schemas/{schema}.
The value of this field will be _deleted-schema_
if the schema has been deleted.`,
						},
						"encoding": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidateEnum([]string{"ENCODING_UNSPECIFIED", "JSON", "BINARY", ""}),
							Description:  `The encoding of messages validated against schema. Default value: "ENCODING_UNSPECIFIED" Possible values: ["ENCODING_UNSPECIFIED", "JSON", "BINARY"]`,
							Default:      "ENCODING_UNSPECIFIED",
						},
					},
				},
			},
			"tags": {
				Type:     schema.TypeMap,
				Optional: true,
				ForceNew: true,
				Description: `Input only. Resource manager tags to be bound to the topic. Tag keys and
values have the same definition as resource manager tags. Keys must be in
the format tagKeys/{tag_key_id}, and values are in the format
tagValues/456. The field is ignored when empty. The field is immutable and
causes resource replacement when mutated. This field is only set at create
time and modifying this field after creation will trigger recreation. To
apply tags to an existing resource, see the 'google_tags_tag_value'
resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
