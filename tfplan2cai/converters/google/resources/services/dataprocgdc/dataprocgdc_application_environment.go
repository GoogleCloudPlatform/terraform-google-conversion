// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataprocgdc

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DataprocGdcApplicationEnvironmentAssetType string = "dataprocgdc.googleapis.com/ApplicationEnvironment"

func ResourceConverterDataprocGdcApplicationEnvironment() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DataprocGdcApplicationEnvironmentAssetType,
		Convert:   GetDataprocGdcApplicationEnvironmentCaiObject,
	}
}

func GetDataprocGdcApplicationEnvironmentCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//dataprocgdc.googleapis.com/projects/{{project}}/locations/{{location}}/serviceInstances/{{serviceinstance}}/applicationEnvironments/{{application_environment_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDataprocGdcApplicationEnvironmentApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DataprocGdcApplicationEnvironmentAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/dataprocgdc/v1/rest",
				DiscoveryName:        "ApplicationEnvironment",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDataprocGdcApplicationEnvironmentApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDataprocGdcApplicationEnvironmentDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	sparkApplicationEnvironmentConfigProp, err := expandDataprocGdcApplicationEnvironmentSparkApplicationEnvironmentConfig(d.Get("spark_application_environment_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("spark_application_environment_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(sparkApplicationEnvironmentConfigProp)) && (ok || !reflect.DeepEqual(v, sparkApplicationEnvironmentConfigProp)) {
		obj["sparkApplicationEnvironmentConfig"] = sparkApplicationEnvironmentConfigProp
	}
	namespaceProp, err := expandDataprocGdcApplicationEnvironmentNamespace(d.Get("namespace"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("namespace"); !tpgresource.IsEmptyValue(reflect.ValueOf(namespaceProp)) && (ok || !reflect.DeepEqual(v, namespaceProp)) {
		obj["namespace"] = namespaceProp
	}
	labelsProp, err := expandDataprocGdcApplicationEnvironmentEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	annotationsProp, err := expandDataprocGdcApplicationEnvironmentEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}

	return obj, nil
}

func expandDataprocGdcApplicationEnvironmentDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcApplicationEnvironmentSparkApplicationEnvironmentConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDefaultProperties, err := expandDataprocGdcApplicationEnvironmentSparkApplicationEnvironmentConfigDefaultProperties(original["default_properties"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultProperties); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultProperties"] = transformedDefaultProperties
	}

	transformedDefaultVersion, err := expandDataprocGdcApplicationEnvironmentSparkApplicationEnvironmentConfigDefaultVersion(original["default_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultVersion"] = transformedDefaultVersion
	}

	return transformed, nil
}

func expandDataprocGdcApplicationEnvironmentSparkApplicationEnvironmentConfigDefaultProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDataprocGdcApplicationEnvironmentSparkApplicationEnvironmentConfigDefaultVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcApplicationEnvironmentNamespace(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcApplicationEnvironmentEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDataprocGdcApplicationEnvironmentEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
