// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const VertexAIFeatureOnlineStoreFeatureviewAssetType string = "{{region}}-aiplatform.googleapis.com/FeatureOnlineStoreFeatureview"

func ResourceConverterVertexAIFeatureOnlineStoreFeatureview() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: VertexAIFeatureOnlineStoreFeatureviewAssetType,
		Convert:   GetVertexAIFeatureOnlineStoreFeatureviewCaiObject,
	}
}

func GetVertexAIFeatureOnlineStoreFeatureviewCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{region}}-aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetVertexAIFeatureOnlineStoreFeatureviewApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: VertexAIFeatureOnlineStoreFeatureviewAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{region}}-aiplatform/v1beta1/rest",
				DiscoveryName:        "FeatureOnlineStoreFeatureview",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetVertexAIFeatureOnlineStoreFeatureviewApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	syncConfigProp, err := expandVertexAIFeatureOnlineStoreFeatureviewSyncConfig(d.Get("sync_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("sync_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(syncConfigProp)) && (ok || !reflect.DeepEqual(v, syncConfigProp)) {
		obj["syncConfig"] = syncConfigProp
	}
	bigQuerySourceProp, err := expandVertexAIFeatureOnlineStoreFeatureviewBigQuerySource(d.Get("big_query_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("big_query_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(bigQuerySourceProp)) && (ok || !reflect.DeepEqual(v, bigQuerySourceProp)) {
		obj["bigQuerySource"] = bigQuerySourceProp
	}
	labelsProp, err := expandVertexAIFeatureOnlineStoreFeatureviewEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandVertexAIFeatureOnlineStoreFeatureviewSyncConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCron, err := expandVertexAIFeatureOnlineStoreFeatureviewSyncConfigCron(original["cron"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCron); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cron"] = transformedCron
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlineStoreFeatureviewSyncConfigCron(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlineStoreFeatureviewBigQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandVertexAIFeatureOnlineStoreFeatureviewBigQuerySourceUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedEntityIdColumns, err := expandVertexAIFeatureOnlineStoreFeatureviewBigQuerySourceEntityIdColumns(original["entity_id_columns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntityIdColumns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["entityIdColumns"] = transformedEntityIdColumns
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlineStoreFeatureviewBigQuerySourceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlineStoreFeatureviewBigQuerySourceEntityIdColumns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlineStoreFeatureviewEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
