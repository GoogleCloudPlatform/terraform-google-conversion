// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/Release.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package saasruntime

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SaasRuntimeReleaseAssetType string = "saasservicemgmt.googleapis.com/Release"

func ResourceConverterSaasRuntimeRelease() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SaasRuntimeReleaseAssetType,
		Convert:   GetSaasRuntimeReleaseCaiObject,
	}
}

func GetSaasRuntimeReleaseCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//saasservicemgmt.googleapis.com/projects/{{project}}/locations/{{location}}/releases/{{release_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSaasRuntimeReleaseApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SaasRuntimeReleaseAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/saasservicemgmt/v1beta1/rest",
				DiscoveryName:        "Release",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSaasRuntimeReleaseApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	blueprintProp, err := expandSaasRuntimeReleaseBlueprint(d.Get("blueprint"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("blueprint"); !tpgresource.IsEmptyValue(reflect.ValueOf(blueprintProp)) && (ok || !reflect.DeepEqual(v, blueprintProp)) {
		obj["blueprint"] = blueprintProp
	}
	inputVariableDefaultsProp, err := expandSaasRuntimeReleaseInputVariableDefaults(d.Get("input_variable_defaults"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("input_variable_defaults"); !tpgresource.IsEmptyValue(reflect.ValueOf(inputVariableDefaultsProp)) && (ok || !reflect.DeepEqual(v, inputVariableDefaultsProp)) {
		obj["inputVariableDefaults"] = inputVariableDefaultsProp
	}
	releaseRequirementsProp, err := expandSaasRuntimeReleaseReleaseRequirements(d.Get("release_requirements"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("release_requirements"); !tpgresource.IsEmptyValue(reflect.ValueOf(releaseRequirementsProp)) && (ok || !reflect.DeepEqual(v, releaseRequirementsProp)) {
		obj["releaseRequirements"] = releaseRequirementsProp
	}
	unitKindProp, err := expandSaasRuntimeReleaseUnitKind(d.Get("unit_kind"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("unit_kind"); !tpgresource.IsEmptyValue(reflect.ValueOf(unitKindProp)) && (ok || !reflect.DeepEqual(v, unitKindProp)) {
		obj["unitKind"] = unitKindProp
	}
	effectiveAnnotationsProp, err := expandSaasRuntimeReleaseEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveAnnotationsProp)) && (ok || !reflect.DeepEqual(v, effectiveAnnotationsProp)) {
		obj["annotations"] = effectiveAnnotationsProp
	}
	effectiveLabelsProp, err := expandSaasRuntimeReleaseEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandSaasRuntimeReleaseBlueprint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEngine, err := expandSaasRuntimeReleaseBlueprintEngine(original["engine"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEngine); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["engine"] = transformedEngine
	}

	transformedPackage, err := expandSaasRuntimeReleaseBlueprintPackage(original["package"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPackage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["package"] = transformedPackage
	}

	transformedVersion, err := expandSaasRuntimeReleaseBlueprintVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	return transformed, nil
}

func expandSaasRuntimeReleaseBlueprintEngine(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseBlueprintPackage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseBlueprintVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseInputVariableDefaults(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedType, err := expandSaasRuntimeReleaseInputVariableDefaultsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedValue, err := expandSaasRuntimeReleaseInputVariableDefaultsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedVariable, err := expandSaasRuntimeReleaseInputVariableDefaultsVariable(original["variable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVariable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["variable"] = transformedVariable
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandSaasRuntimeReleaseInputVariableDefaultsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseInputVariableDefaultsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseInputVariableDefaultsVariable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseReleaseRequirements(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUpgradeableFromReleases, err := expandSaasRuntimeReleaseReleaseRequirementsUpgradeableFromReleases(original["upgradeable_from_releases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUpgradeableFromReleases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["upgradeableFromReleases"] = transformedUpgradeableFromReleases
	}

	return transformed, nil
}

func expandSaasRuntimeReleaseReleaseRequirementsUpgradeableFromReleases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseUnitKind(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeReleaseEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandSaasRuntimeReleaseEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
