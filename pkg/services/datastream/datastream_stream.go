// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/datastream/Stream.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package datastream

import (
	"context"
	"fmt"
	"regexp"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

const DatastreamStreamAssetType string = "datastream.googleapis.com/Stream"

const DatastreamStreamSchemaName string = "google_datastream_stream"

func resourceDatastreamStreamCustomDiffFunc(diff tpgresource.TerraformResourceDiff) error {
	if diff.HasChange("desired_state") {
		old, new := diff.GetChange("desired_state")
		oldState := old.(string)
		newState := new.(string)

		if tpgresource.IsNewResource(diff) {
			if newState != "NOT_STARTED" && newState != "RUNNING" {
				return fmt.Errorf("`desired_state` can only be set to `NOT_STARTED` or `RUNNING` when creating a new Stream")
			}
		} else {
			if newState == "NOT_STARTED" && oldState != newState {
				return fmt.Errorf("Field `desired_state` cannot be changed to `NOT_STARTED` for an already-created Stream")
			}

			if oldState == "NOT_STARTED" && newState != "RUNNING" {
				return fmt.Errorf("Field `desired_state` can only be set to `RUNNING` from `NOT_STARTED`")
			}

			if newState != "RUNNING" && newState != "PAUSED" {
				return fmt.Errorf("`desired_state` can only be set to `RUNNING` or `PAUSED` when updating a Stream")
			}
		}
	}
	return nil
}
func resourceDatastreamStreamCustomDiff(_ context.Context, diff *schema.ResourceDiff, meta interface{}) error {
	// separate func to allow unit testing
	return resourceDatastreamStreamCustomDiffFunc(diff)
}

func resourceDatastreamStreamDatabaseIdDiffSuppress(_, old, new string, _ *schema.ResourceData) bool {
	re := regexp.MustCompile(`projects/(.+)/datasets/([^\.\?\#]+)`)
	paths := re.FindStringSubmatch(new)

	// db returns value in form <project>:<dataset_id>
	if len(paths) == 3 {
		project := paths[1]
		datasetId := paths[2]
		new = fmt.Sprintf("%s:%s", project, datasetId)
	}

	return old == new
}

func ResourceDatastreamStream() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"destination_config": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Destination connection profile configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"destination_connection_profile": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
							Description:      `Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}`,
						},
						"bigquery_destination_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `A configuration for how data should be loaded to Google BigQuery.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"append_only": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										Description: `AppendOnly mode defines that the stream of changes (INSERT, UPDATE-INSERT, UPDATE-DELETE and DELETE
events) to a source table will be written to the destination Google BigQuery table, retaining the
historical state of the data.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ConflictsWith: []string{"destination_config.0.bigquery_destination_config.0.merge"},
									},
									"blmt_config": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `BigLake Managed Tables configuration for BigQuery streams.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"bucket": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The Cloud Storage bucket name.`,
												},
												"connection_name": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The bigquery connection. Format: '{project}.{location}.{name}'`,
												},
												"file_format": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The file format.`,
												},
												"table_format": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `The table format.`,
												},
												"root_path": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `The root path inside the Cloud Storage bucket.`,
												},
											},
										},
									},
									"data_freshness": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The guaranteed data freshness (in seconds) when querying tables created by the stream.
Editing this field will only affect new tables created in the future, but existing tables
will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.`,
									},
									"merge": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										Description: `Merge mode defines that all changes to a table will be merged at the destination Google BigQuery
table. This is the default write mode. When selected, BigQuery reflects the way the data is stored
in the source database. With Merge mode, no historical record of the change events is kept.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ConflictsWith: []string{"destination_config.0.bigquery_destination_config.0.append_only"},
									},
									"single_target_dataset": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `A single target dataset to which all data will be streamed.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"dataset_id": {
													Type:             schema.TypeString,
													Required:         true,
													DiffSuppressFunc: resourceDatastreamStreamDatabaseIdDiffSuppress,
													Description: `Dataset ID in the format projects/{project}/datasets/{dataset_id} or
{project}:{dataset_id}`,
												},
											},
										},
										ExactlyOneOf: []string{"destination_config.0.bigquery_destination_config.0.single_target_dataset", "destination_config.0.bigquery_destination_config.0.source_hierarchy_datasets"},
									},
									"source_hierarchy_datasets": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"dataset_template": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `Dataset template used for dynamic dataset creation.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"location": {
																Type:     schema.TypeString,
																Required: true,
																Description: `The geographic location where the dataset should reside.
See https://cloud.google.com/bigquery/docs/locations for supported locations.`,
															},
															"dataset_id_prefix": {
																Type:     schema.TypeString,
																Optional: true,
																Description: `If supplied, every created dataset will have its name prefixed by the provided value.
The prefix and name will be separated by an underscore. i.e. _.`,
															},
															"kms_key_name": {
																Type:     schema.TypeString,
																Optional: true,
																ForceNew: true,
																Description: `Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
table. The BigQuery Service Account associated with your project requires access to this
encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.`,
															},
														},
													},
												},
												"project_id": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Optional. The project id of the BigQuery dataset. If not specified, the project will be inferred from the stream resource.`,
												},
											},
										},
										ExactlyOneOf: []string{"destination_config.0.bigquery_destination_config.0.single_target_dataset", "destination_config.0.bigquery_destination_config.0.source_hierarchy_datasets"},
									},
								},
							},
							ExactlyOneOf: []string{"destination_config.0.gcs_destination_config", "destination_config.0.bigquery_destination_config"},
						},
						"gcs_destination_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `A configuration for how data should be loaded to Cloud Storage.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"avro_file_format": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `AVRO file format configuration.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ExactlyOneOf: []string{"destination_config.0.gcs_destination_config.0.avro_file_format", "destination_config.0.gcs_destination_config.0.json_file_format"},
									},
									"file_rotation_interval": {
										Type:     schema.TypeString,
										Computed: true,
										Optional: true,
										Description: `The maximum duration for which new events are added before a file is closed and a new file is created.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.`,
									},
									"file_rotation_mb": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										Description: `The maximum file size to be saved in the bucket.`,
									},
									"json_file_format": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `JSON file format configuration.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"compression": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NO_COMPRESSION", "GZIP", ""}),
													Description:  `Compression of the loaded JSON file. Possible values: ["NO_COMPRESSION", "GZIP"]`,
												},
												"schema_file_format": {
													Type:         schema.TypeString,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NO_SCHEMA_FILE", "AVRO_SCHEMA_FILE", ""}),
													Description:  `The schema file format along JSON data files. Possible values: ["NO_SCHEMA_FILE", "AVRO_SCHEMA_FILE"]`,
												},
											},
										},
										ExactlyOneOf: []string{"destination_config.0.gcs_destination_config.0.avro_file_format", "destination_config.0.gcs_destination_config.0.json_file_format"},
									},
									"path": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Path inside the Cloud Storage bucket to write data to.`,
									},
								},
							},
							ExactlyOneOf: []string{"destination_config.0.gcs_destination_config", "destination_config.0.bigquery_destination_config"},
						},
					},
				},
			},
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Display name.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the location this stream is located in.`,
			},
			"source_config": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Source connection profile configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"source_connection_profile": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
							Description:      `Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}`,
						},
						"mongodb_source_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `MongoDB source configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"exclude_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `MongoDB collections to include in the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"databases": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `MongoDB databases in the cluster.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"collections": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Collections in the database.`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"collection": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Collection name.`,
																		},
																		"fields": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Fields in the collection.`,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"field": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Field name.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
															"database": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Database name.`,
															},
														},
													},
												},
											},
										},
									},
									"include_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `MongoDB collections to include in the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"databases": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `MongoDB databases in the cluster.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"collections": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Collections in the database.`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"collection": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Collection name.`,
																		},
																		"fields": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Fields in the collection.`,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"field": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Field name.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
															"database": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Database name.`,
															},
														},
													},
												},
											},
										},
									},
									"max_concurrent_backfill_tasks": {
										Type:     schema.TypeInt,
										Optional: true,
										Description: `Optional. Maximum number of concurrent backfill tasks. The number
should be non-negative and less than or equal to 50. If not set
(or set to 0), the system''s default value is used`,
									},
								},
							},
							ExactlyOneOf: []string{"source_config.0.mysql_source_config", "source_config.0.oracle_source_config", "source_config.0.postgresql_source_config", "source_config.0.sql_server_source_config", "source_config.0.salesforce_source_config", "source_config.0.mongodb_source_config"},
						},
						"mysql_source_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `MySQL data source configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"binary_log_position": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `CDC reader reads from binary logs replication cdc method.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ConflictsWith: []string{},
									},
									"exclude_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `MySQL objects to exclude from the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"mysql_databases": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `MySQL databases on the server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"database": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Database name.`,
															},
															"mysql_tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the database.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"mysql_columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"collation": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column collation.`,
																					},
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The MySQL data type. Full data types list can be found here:
https://dev.mysql.com/doc/refman/8.0/en/data-types.html`,
																					},
																					"nullable": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column can accept a null value.`,
																					},
																					"ordinal_position": {
																						Type:        schema.TypeInt,
																						Optional:    true,
																						Description: `The ordinal position of the column in the table.`,
																					},
																					"primary_key": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column represents a primary key.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"gtid": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `CDC reader reads from gtid based replication.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ConflictsWith: []string{},
									},
									"include_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `MySQL objects to retrieve from the source.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"mysql_databases": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `MySQL databases on the server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"database": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Database name.`,
															},
															"mysql_tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the database.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"mysql_columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"collation": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column collation.`,
																					},
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The MySQL data type. Full data types list can be found here:
https://dev.mysql.com/doc/refman/8.0/en/data-types.html`,
																					},
																					"nullable": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column can accept a null value.`,
																					},
																					"ordinal_position": {
																						Type:        schema.TypeInt,
																						Optional:    true,
																						Description: `The ordinal position of the column in the table.`,
																					},
																					"primary_key": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column represents a primary key.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"max_concurrent_backfill_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description: `Maximum number of concurrent backfill tasks. The number should be non negative.
If not set (or set to 0), the system's default value will be used.`,
									},
									"max_concurrent_cdc_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description: `Maximum number of concurrent CDC tasks. The number should be non negative.
If not set (or set to 0), the system's default value will be used.`,
									},
								},
							},
							ExactlyOneOf: []string{"source_config.0.mysql_source_config", "source_config.0.oracle_source_config", "source_config.0.postgresql_source_config", "source_config.0.sql_server_source_config", "source_config.0.salesforce_source_config", "source_config.0.mongodb_source_config"},
						},
						"oracle_source_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `MySQL data source configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"drop_large_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Configuration to drop large object values.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},
									"exclude_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Oracle objects to exclude from the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"oracle_schemas": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `Oracle schemas/databases in the database server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"schema": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Schema name.`,
															},
															"oracle_tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the database.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"oracle_columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The Oracle data type. Full data types list can be found here:
https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"include_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Oracle objects to retrieve from the source.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"oracle_schemas": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `Oracle schemas/databases in the database server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"schema": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Schema name.`,
															},
															"oracle_tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the database.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"oracle_columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The Oracle data type. Full data types list can be found here:
https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"max_concurrent_backfill_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description: `Maximum number of concurrent backfill tasks. The number should be non negative.
If not set (or set to 0), the system's default value will be used.`,
									},
									"max_concurrent_cdc_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description: `Maximum number of concurrent CDC tasks. The number should be non negative.
If not set (or set to 0), the system's default value will be used.`,
									},
									"stream_large_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Configuration to drop large object values.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},
								},
							},
							ExactlyOneOf: []string{"source_config.0.mysql_source_config", "source_config.0.oracle_source_config", "source_config.0.postgresql_source_config", "source_config.0.sql_server_source_config", "source_config.0.salesforce_source_config", "source_config.0.mongodb_source_config"},
						},
						"postgresql_source_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `PostgreSQL data source configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"publication": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The name of the publication that includes the set of all tables
that are defined in the stream's include_objects.`,
									},
									"replication_slot": {
										Type:     schema.TypeString,
										Required: true,
										Description: `The name of the logical replication slot that's configured with
the pgoutput plugin.`,
									},
									"exclude_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `PostgreSQL objects to exclude from the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"postgresql_schemas": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `PostgreSQL schemas on the server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"schema": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Database name.`,
															},
															"postgresql_tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the schema.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"postgresql_columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The PostgreSQL data type. Full data types list can be found here:
https://www.postgresql.org/docs/current/datatype.html`,
																					},
																					"nullable": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column can accept a null value.`,
																					},
																					"ordinal_position": {
																						Type:        schema.TypeInt,
																						Optional:    true,
																						Description: `The ordinal position of the column in the table.`,
																					},
																					"primary_key": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column represents a primary key.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"include_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `PostgreSQL objects to retrieve from the source.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"postgresql_schemas": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `PostgreSQL schemas on the server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"schema": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Database name.`,
															},
															"postgresql_tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the schema.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"postgresql_columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The PostgreSQL data type. Full data types list can be found here:
https://www.postgresql.org/docs/current/datatype.html`,
																					},
																					"nullable": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column can accept a null value.`,
																					},
																					"ordinal_position": {
																						Type:        schema.TypeInt,
																						Optional:    true,
																						Description: `The ordinal position of the column in the table.`,
																					},
																					"primary_key": {
																						Type:        schema.TypeBool,
																						Optional:    true,
																						Description: `Whether or not the column represents a primary key.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"max_concurrent_backfill_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description: `Maximum number of concurrent backfill tasks. The number should be non
negative. If not set (or set to 0), the system's default value will be used.`,
									},
								},
							},
							ExactlyOneOf: []string{"source_config.0.mysql_source_config", "source_config.0.oracle_source_config", "source_config.0.postgresql_source_config", "source_config.0.sql_server_source_config", "source_config.0.salesforce_source_config", "source_config.0.mongodb_source_config"},
						},
						"salesforce_source_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Salesforce data source configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"polling_interval": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Salesforce objects polling interval. The interval at which new changes will be polled for each object. The duration must be between 5 minutes and 24 hours.`,
									},
									"exclude_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Salesforce objects to exclude from the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"objects": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `Salesforce objects in data source.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"fields": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Field name.`,
																		},
																	},
																},
															},
															"object_name": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Name of object in Salesforce Org.`,
															},
														},
													},
												},
											},
										},
									},
									"include_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Salesforce objects to retrieve from the source.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"objects": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `Salesforce objects in Salesforce Org.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"fields": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Field name.`,
																		},
																	},
																},
															},
															"object_name": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Name of object in Salesforce Org.`,
															},
														},
													},
												},
											},
										},
									},
								},
							},
							ExactlyOneOf: []string{"source_config.0.mysql_source_config", "source_config.0.oracle_source_config", "source_config.0.postgresql_source_config", "source_config.0.sql_server_source_config", "source_config.0.salesforce_source_config", "source_config.0.mongodb_source_config"},
						},
						"sql_server_source_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `SQL Server data source configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"change_tables": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `CDC reader reads from change tables.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},
									"exclude_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `SQL Server objects to exclude from the stream.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"schemas": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `SQL Server schemas/databases in the database server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"schema": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Schema name.`,
															},
															"tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the database.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The SQL Server data type. Full data types list can be found here:
https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver16`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"include_objects": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `SQL Server objects to retrieve from the source.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"schemas": {
													Type:        schema.TypeList,
													Required:    true,
													Description: `SQL Server schemas/databases in the database server`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"schema": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Schema name.`,
															},
															"tables": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Tables in the database.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"table": {
																			Type:        schema.TypeString,
																			Required:    true,
																			Description: `Table name.`,
																		},
																		"columns": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																			MinItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"column": {
																						Type:        schema.TypeString,
																						Optional:    true,
																						Description: `Column name.`,
																					},
																					"data_type": {
																						Type:     schema.TypeString,
																						Optional: true,
																						Description: `The SQL Server data type. Full data types list can be found here:
https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver16`,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"max_concurrent_backfill_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description:  `Max concurrent backfill tasks.`,
									},
									"max_concurrent_cdc_tasks": {
										Type:         schema.TypeInt,
										Computed:     true,
										Optional:     true,
										ValidateFunc: validation.IntAtLeast(0),
										Description:  `Max concurrent CDC tasks.`,
									},
									"transaction_logs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `CDC reader reads from transaction logs.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},
								},
							},
							ExactlyOneOf: []string{"source_config.0.mysql_source_config", "source_config.0.oracle_source_config", "source_config.0.postgresql_source_config", "source_config.0.sql_server_source_config", "source_config.0.salesforce_source_config", "source_config.0.mongodb_source_config"},
						},
					},
				},
			},
			"stream_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The stream identifier.`,
			},
			"backfill_all": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"mongodb_excluded_objects": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `MongoDB data source objects to avoid backfilling.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"databases": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `MongoDB databases in the cluster.`,
										MinItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"database": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Database name.`,
												},
												"collections": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Collections in the database.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"collection": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Collection name.`,
															},
															"fields": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Fields in the collection.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"field": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Field name.`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"mysql_excluded_objects": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `MySQL data source objects to avoid backfilling.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"mysql_databases": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `MySQL databases on the server`,
										MinItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"database": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Database name.`,
												},
												"mysql_tables": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Tables in the database.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"table": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Table name.`,
															},
															"mysql_columns": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"collation": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Column collation.`,
																		},
																		"column": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Column name.`,
																		},
																		"data_type": {
																			Type:     schema.TypeString,
																			Optional: true,
																			Description: `The MySQL data type. Full data types list can be found here:
https://dev.mysql.com/doc/refman/8.0/en/data-types.html`,
																		},
																		"nullable": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `Whether or not the column can accept a null value.`,
																		},
																		"ordinal_position": {
																			Type:        schema.TypeInt,
																			Optional:    true,
																			Description: `The ordinal position of the column in the table.`,
																		},
																		"primary_key": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `Whether or not the column represents a primary key.`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"oracle_excluded_objects": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `PostgreSQL data source objects to avoid backfilling.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"oracle_schemas": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Oracle schemas/databases in the database server`,
										MinItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"schema": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Schema name.`,
												},
												"oracle_tables": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Tables in the database.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"table": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Table name.`,
															},
															"oracle_columns": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"column": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Column name.`,
																		},
																		"data_type": {
																			Type:     schema.TypeString,
																			Optional: true,
																			Description: `The Oracle data type. Full data types list can be found here:
https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"postgresql_excluded_objects": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `PostgreSQL data source objects to avoid backfilling.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"postgresql_schemas": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `PostgreSQL schemas on the server`,
										MinItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"schema": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Database name.`,
												},
												"postgresql_tables": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Tables in the schema.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"table": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Table name.`,
															},
															"postgresql_columns": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"column": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Column name.`,
																		},
																		"data_type": {
																			Type:     schema.TypeString,
																			Optional: true,
																			Description: `The PostgreSQL data type. Full data types list can be found here:
https://www.postgresql.org/docs/current/datatype.html`,
																		},
																		"nullable": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `Whether or not the column can accept a null value.`,
																		},
																		"ordinal_position": {
																			Type:        schema.TypeInt,
																			Optional:    true,
																			Description: `The ordinal position of the column in the table.`,
																		},
																		"primary_key": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `Whether or not the column represents a primary key.`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"salesforce_excluded_objects": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Salesforce objects to avoid backfilling.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"objects": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Salesforce objects in Salesforce Org.`,
										MinItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"fields": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"name": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Field name.`,
															},
														},
													},
												},
												"object_name": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `Name of object in Salesforce Org.`,
												},
											},
										},
									},
								},
							},
						},
						"sql_server_excluded_objects": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `SQL Server data source objects to avoid backfilling.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"schemas": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `SQL Server schemas/databases in the database server`,
										MinItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"schema": {
													Type:        schema.TypeString,
													Required:    true,
													Description: `Schema name.`,
												},
												"tables": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Tables in the database.`,
													MinItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"table": {
																Type:        schema.TypeString,
																Required:    true,
																Description: `Table name.`,
															},
															"columns": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.`,
																MinItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"column": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `Column name.`,
																		},
																		"data_type": {
																			Type:     schema.TypeString,
																			Optional: true,
																			Description: `The SQL Server data type. Full data types list can be found here:
https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver16`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
				ExactlyOneOf: []string{"backfill_all", "backfill_none"},
			},
			"backfill_none": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Backfill strategy to disable automatic backfill for the Stream's objects.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
				ExactlyOneOf: []string{"backfill_all", "backfill_none"},
			},
			"create_without_validation": {
				Type:        schema.TypeBool,
				Optional:    true,
				ForceNew:    true,
				Description: `Create the stream without validating it.`,
				Default:     false,
			},
			"customer_managed_encryption_key": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
will be encrypted using an internal Stream-specific encryption key provisioned through KMS.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Labels.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The stream's name.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The state of the stream.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"desired_state": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Desired state of the Stream. Set this field to 'RUNNING' to start the stream,
'NOT_STARTED' to create the stream without starting and 'PAUSED' to pause
the stream from a 'RUNNING' state.
Possible values: NOT_STARTED, RUNNING, PAUSED. Default: NOT_STARTED`,
				Default: "NOT_STARTED",
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
