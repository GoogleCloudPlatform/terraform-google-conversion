// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apihub/Plugin.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apihub

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const ApihubPluginAssetType string = "apihub.googleapis.com/Plugin"

func ResourceConverterApihubPlugin() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApihubPluginAssetType,
		Convert:   GetApihubPluginCaiObject,
	}
}

func GetApihubPluginCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apihub.googleapis.com/projects/{{project}}/locations/{{location}}/plugins/{{plugin_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApihubPluginApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApihubPluginAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apihub/v1/rest",
				DiscoveryName:        "Plugin",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApihubPluginApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandApihubPluginDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	actionsConfigProp, err := expandApihubPluginActionsConfig(d.Get("actions_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("actions_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionsConfigProp)) && (ok || !reflect.DeepEqual(v, actionsConfigProp)) {
		obj["actionsConfig"] = actionsConfigProp
	}
	documentationProp, err := expandApihubPluginDocumentation(d.Get("documentation"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("documentation"); !tpgresource.IsEmptyValue(reflect.ValueOf(documentationProp)) && (ok || !reflect.DeepEqual(v, documentationProp)) {
		obj["documentation"] = documentationProp
	}
	pluginCategoryProp, err := expandApihubPluginPluginCategory(d.Get("plugin_category"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("plugin_category"); !tpgresource.IsEmptyValue(reflect.ValueOf(pluginCategoryProp)) && (ok || !reflect.DeepEqual(v, pluginCategoryProp)) {
		obj["pluginCategory"] = pluginCategoryProp
	}
	configTemplateProp, err := expandApihubPluginConfigTemplate(d.Get("config_template"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("config_template"); !tpgresource.IsEmptyValue(reflect.ValueOf(configTemplateProp)) && (ok || !reflect.DeepEqual(v, configTemplateProp)) {
		obj["configTemplate"] = configTemplateProp
	}
	displayNameProp, err := expandApihubPluginDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	hostingServiceProp, err := expandApihubPluginHostingService(d.Get("hosting_service"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("hosting_service"); !tpgresource.IsEmptyValue(reflect.ValueOf(hostingServiceProp)) && (ok || !reflect.DeepEqual(v, hostingServiceProp)) {
		obj["hostingService"] = hostingServiceProp
	}

	return obj, nil
}

func expandApihubPluginDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandApihubPluginActionsConfigId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDisplayName, err := expandApihubPluginActionsConfigDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedDescription, err := expandApihubPluginActionsConfigDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedTriggerMode, err := expandApihubPluginActionsConfigTriggerMode(original["trigger_mode"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTriggerMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["triggerMode"] = transformedTriggerMode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginActionsConfigId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfigDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfigDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginActionsConfigTriggerMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginDocumentation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExternalUri, err := expandApihubPluginDocumentationExternalUri(original["external_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExternalUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["externalUri"] = transformedExternalUri
	}

	return transformed, nil
}

func expandApihubPluginDocumentationExternalUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginPluginCategory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAuthConfigTemplate, err := expandApihubPluginConfigTemplateAuthConfigTemplate(original["auth_config_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthConfigTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authConfigTemplate"] = transformedAuthConfigTemplate
	}

	transformedAdditionalConfigTemplate, err := expandApihubPluginConfigTemplateAdditionalConfigTemplate(original["additional_config_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalConfigTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalConfigTemplate"] = transformedAdditionalConfigTemplate
	}

	return transformed, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSupportedAuthTypes, err := expandApihubPluginConfigTemplateAuthConfigTemplateSupportedAuthTypes(original["supported_auth_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSupportedAuthTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["supportedAuthTypes"] = transformedSupportedAuthTypes
	}

	transformedServiceAccount, err := expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplateSupportedAuthTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceAccount, err := expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccountServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandApihubPluginConfigTemplateAuthConfigTemplateServiceAccountServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedRequired, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateRequired(original["required"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["required"] = transformedRequired
		}

		transformedEnumOptions, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptions(original["enum_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnumOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enumOptions"] = transformedEnumOptions
		}

		transformedMultiSelectOptions, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptions(original["multi_select_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMultiSelectOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["multiSelectOptions"] = transformedMultiSelectOptions
		}

		transformedId, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedValueType, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateValueType(original["value_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValueType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["valueType"] = transformedValueType
		}

		transformedDescription, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		transformedValidationRegex, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateValidationRegex(original["validation_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValidationRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["validationRegex"] = transformedValidationRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDisplayName, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedDescription, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateEnumOptionsDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDisplayName, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedDescription, err := expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDescription(original["description"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["description"] = transformedDescription
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateMultiSelectOptionsDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateValueType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginConfigTemplateAdditionalConfigTemplateValidationRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubPluginHostingService(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedServiceUri, err := expandApihubPluginHostingServiceServiceUri(original["service_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceUri"] = transformedServiceUri
	}

	return transformed, nil
}

func expandApihubPluginHostingServiceServiceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
