// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package documentaiwarehouse

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DocumentAIWarehouseDocumentSchemaAssetType string = "contentwarehouse.googleapis.com/DocumentSchema"

func ResourceConverterDocumentAIWarehouseDocumentSchema() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DocumentAIWarehouseDocumentSchemaAssetType,
		Convert:   GetDocumentAIWarehouseDocumentSchemaCaiObject,
	}
}

func GetDocumentAIWarehouseDocumentSchemaCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//contentwarehouse.googleapis.com/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDocumentAIWarehouseDocumentSchemaApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DocumentAIWarehouseDocumentSchemaAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/contentwarehouse/v1/rest",
				DiscoveryName:        "DocumentSchema",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDocumentAIWarehouseDocumentSchemaApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDocumentAIWarehouseDocumentSchemaDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	documentIsFolderProp, err := expandDocumentAIWarehouseDocumentSchemaDocumentIsFolder(d.Get("document_is_folder"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("document_is_folder"); !tpgresource.IsEmptyValue(reflect.ValueOf(documentIsFolderProp)) && (ok || !reflect.DeepEqual(v, documentIsFolderProp)) {
		obj["documentIsFolder"] = documentIsFolderProp
	}
	propertyDefinitionsProp, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitions(d.Get("property_definitions"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("property_definitions"); !tpgresource.IsEmptyValue(reflect.ValueOf(propertyDefinitionsProp)) && (ok || !reflect.DeepEqual(v, propertyDefinitionsProp)) {
		obj["propertyDefinitions"] = propertyDefinitionsProp
	}

	return obj, nil
}

func expandDocumentAIWarehouseDocumentSchemaDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaDocumentIsFolder(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedDisplayName, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedIsRepeatable, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRepeatable(original["is_repeatable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRepeatable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRepeatable"] = transformedIsRepeatable
		}

		transformedIsFilterable, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsFilterable(original["is_filterable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsFilterable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isFilterable"] = transformedIsFilterable
		}

		transformedIsSearchable, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsSearchable(original["is_searchable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsSearchable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isSearchable"] = transformedIsSearchable
		}

		transformedIsMetadata, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsMetadata(original["is_metadata"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isMetadata"] = transformedIsMetadata
		}

		transformedIsRequired, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRequired(original["is_required"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRequired"] = transformedIsRequired
		}

		transformedRetrievalImportance, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsRetrievalImportance(original["retrieval_importance"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRetrievalImportance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["retrievalImportance"] = transformedRetrievalImportance
		}

		transformedSchemaSources, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSources(original["schema_sources"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSchemaSources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["schemaSources"] = transformedSchemaSources
		}

		transformedIntegerTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptions(original["integer_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["integerTypeOptions"] = transformedIntegerTypeOptions
		}

		transformedFloatTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptions(original["float_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["floatTypeOptions"] = transformedFloatTypeOptions
		}

		transformedTextTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptions(original["text_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["textTypeOptions"] = transformedTextTypeOptions
		}

		transformedPropertyTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptions(original["property_type_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPropertyTypeOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["propertyTypeOptions"] = transformedPropertyTypeOptions
		}

		transformedEnumTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptions(original["enum_type_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnumTypeOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enumTypeOptions"] = transformedEnumTypeOptions
		}

		transformedDateTimeTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptions(original["date_time_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["dateTimeTypeOptions"] = transformedDateTimeTypeOptions
		}

		transformedMapTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptions(original["map_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["mapTypeOptions"] = transformedMapTypeOptions
		}

		transformedTimestampTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptions(original["timestamp_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["timestampTypeOptions"] = transformedTimestampTypeOptions
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRepeatable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsFilterable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsSearchable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsRetrievalImportance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedProcessorType, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesProcessorType(original["processor_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProcessorType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["processorType"] = transformedProcessorType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesProcessorType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPropertyDefinitions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitions(original["property_definitions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPropertyDefinitions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["propertyDefinitions"] = transformedPropertyDefinitions
	}

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedDisplayName, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedIsRepeatable, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRepeatable(original["is_repeatable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRepeatable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRepeatable"] = transformedIsRepeatable
		}

		transformedIsFilterable, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsFilterable(original["is_filterable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsFilterable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isFilterable"] = transformedIsFilterable
		}

		transformedIsSearchable, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsSearchable(original["is_searchable"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsSearchable); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isSearchable"] = transformedIsSearchable
		}

		transformedIsMetadata, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsMetadata(original["is_metadata"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsMetadata); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isMetadata"] = transformedIsMetadata
		}

		transformedIsRequired, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRequired(original["is_required"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRequired"] = transformedIsRequired
		}

		transformedRetrievalImportance, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsRetrievalImportance(original["retrieval_importance"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRetrievalImportance); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["retrievalImportance"] = transformedRetrievalImportance
		}

		transformedSchemaSources, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSources(original["schema_sources"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSchemaSources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["schemaSources"] = transformedSchemaSources
		}

		transformedIntegerTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptions(original["integer_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["integerTypeOptions"] = transformedIntegerTypeOptions
		}

		transformedFloatTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptions(original["float_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["floatTypeOptions"] = transformedFloatTypeOptions
		}

		transformedTextTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptions(original["text_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["textTypeOptions"] = transformedTextTypeOptions
		}

		transformedEnumTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptions(original["enum_type_options"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnumTypeOptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enumTypeOptions"] = transformedEnumTypeOptions
		}

		transformedDateTimeTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptions(original["date_time_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["dateTimeTypeOptions"] = transformedDateTimeTypeOptions
		}

		transformedMapTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptions(original["map_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["mapTypeOptions"] = transformedMapTypeOptions
		}

		transformedTimestampTypeOptions, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptions(original["timestamp_type_options"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["timestampTypeOptions"] = transformedTimestampTypeOptions
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRepeatable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsFilterable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsSearchable(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsMetadata(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsRetrievalImportance(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedProcessorType, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesProcessorType(original["processor_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProcessorType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["processorType"] = transformedProcessorType
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesProcessorType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPossibleValues, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsPossibleValues(original["possible_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPossibleValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["possibleValues"] = transformedPossibleValues
	}

	transformedValidationCheckDisabled, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(original["validation_check_disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValidationCheckDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["validationCheckDisabled"] = transformedValidationCheckDisabled
	}

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsPossibleValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPossibleValues, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsPossibleValues(original["possible_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPossibleValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["possibleValues"] = transformedPossibleValues
	}

	transformedValidationCheckDisabled, err := expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(original["validation_check_disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedValidationCheckDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["validationCheckDisabled"] = transformedValidationCheckDisabled
	}

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsPossibleValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}
