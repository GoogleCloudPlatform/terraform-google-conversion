// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

const ApigeeSyncAuthorizationAssetType string = "apigee.googleapis.com/SyncAuthorization"

func ResourceConverterApigeeSyncAuthorization() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType: ApigeeSyncAuthorizationAssetType,
		Convert:   GetApigeeSyncAuthorizationCaiObject,
	}
}

func GetApigeeSyncAuthorizationCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	name, err := tpgresource.AssetName(d, config, "//apigee.googleapis.com/organizations/{{name}}:getSyncAuthorization")
	if err != nil {
		return []tpgresource.Asset{}, err
	}
	if obj, err := GetApigeeSyncAuthorizationApiObject(d, config); err == nil {
		return []tpgresource.Asset{{
			Name: name,
			Type: ApigeeSyncAuthorizationAssetType,
			Resource: &tpgresource.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apigee/v1/rest",
				DiscoveryName:        "SyncAuthorization",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []tpgresource.Asset{}, err
	}
}

func GetApigeeSyncAuthorizationApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	identitiesProp, err := expandApigeeSyncAuthorizationIdentities(d.Get("identities"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("identities"); ok || !reflect.DeepEqual(v, identitiesProp) {
		obj["identities"] = identitiesProp
	}
	etagProp, err := expandApigeeSyncAuthorizationEtag(d.Get("etag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}

	return obj, nil
}

func expandApigeeSyncAuthorizationIdentities(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApigeeSyncAuthorizationEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
