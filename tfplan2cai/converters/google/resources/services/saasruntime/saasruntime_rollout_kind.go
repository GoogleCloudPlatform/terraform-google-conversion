// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/saasservicemgmt/RolloutKind.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package saasruntime

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SaasRuntimeRolloutKindAssetType string = "saasservicemgmt.googleapis.com/RolloutKind"

func ResourceConverterSaasRuntimeRolloutKind() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SaasRuntimeRolloutKindAssetType,
		Convert:   GetSaasRuntimeRolloutKindCaiObject,
	}
}

func GetSaasRuntimeRolloutKindCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//saasservicemgmt.googleapis.com/projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSaasRuntimeRolloutKindApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SaasRuntimeRolloutKindAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/saasservicemgmt/v1beta1/rest",
				DiscoveryName:        "RolloutKind",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSaasRuntimeRolloutKindApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	errorBudgetProp, err := expandSaasRuntimeRolloutKindErrorBudget(d.Get("error_budget"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("error_budget"); !tpgresource.IsEmptyValue(reflect.ValueOf(errorBudgetProp)) && (ok || !reflect.DeepEqual(v, errorBudgetProp)) {
		obj["errorBudget"] = errorBudgetProp
	}
	rolloutOrchestrationStrategyProp, err := expandSaasRuntimeRolloutKindRolloutOrchestrationStrategy(d.Get("rollout_orchestration_strategy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("rollout_orchestration_strategy"); !tpgresource.IsEmptyValue(reflect.ValueOf(rolloutOrchestrationStrategyProp)) && (ok || !reflect.DeepEqual(v, rolloutOrchestrationStrategyProp)) {
		obj["rolloutOrchestrationStrategy"] = rolloutOrchestrationStrategyProp
	}
	unitFilterProp, err := expandSaasRuntimeRolloutKindUnitFilter(d.Get("unit_filter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("unit_filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(unitFilterProp)) && (ok || !reflect.DeepEqual(v, unitFilterProp)) {
		obj["unitFilter"] = unitFilterProp
	}
	unitKindProp, err := expandSaasRuntimeRolloutKindUnitKind(d.Get("unit_kind"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("unit_kind"); !tpgresource.IsEmptyValue(reflect.ValueOf(unitKindProp)) && (ok || !reflect.DeepEqual(v, unitKindProp)) {
		obj["unitKind"] = unitKindProp
	}
	updateUnitKindStrategyProp, err := expandSaasRuntimeRolloutKindUpdateUnitKindStrategy(d.Get("update_unit_kind_strategy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("update_unit_kind_strategy"); !tpgresource.IsEmptyValue(reflect.ValueOf(updateUnitKindStrategyProp)) && (ok || !reflect.DeepEqual(v, updateUnitKindStrategyProp)) {
		obj["updateUnitKindStrategy"] = updateUnitKindStrategyProp
	}
	effectiveAnnotationsProp, err := expandSaasRuntimeRolloutKindEffectiveAnnotations(d.Get("effective_annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveAnnotationsProp)) && (ok || !reflect.DeepEqual(v, effectiveAnnotationsProp)) {
		obj["annotations"] = effectiveAnnotationsProp
	}
	effectiveLabelsProp, err := expandSaasRuntimeRolloutKindEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandSaasRuntimeRolloutKindErrorBudget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedCount, err := expandSaasRuntimeRolloutKindErrorBudgetAllowedCount(original["allowed_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedCount"] = transformedAllowedCount
	}

	transformedAllowedPercentage, err := expandSaasRuntimeRolloutKindErrorBudgetAllowedPercentage(original["allowed_percentage"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedPercentage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedPercentage"] = transformedAllowedPercentage
	}

	return transformed, nil
}

func expandSaasRuntimeRolloutKindErrorBudgetAllowedCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeRolloutKindErrorBudgetAllowedPercentage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeRolloutKindRolloutOrchestrationStrategy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeRolloutKindUnitFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeRolloutKindUnitKind(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeRolloutKindUpdateUnitKindStrategy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSaasRuntimeRolloutKindEffectiveAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandSaasRuntimeRolloutKindEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
