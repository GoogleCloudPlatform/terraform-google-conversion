// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/iambeta/WorkloadIdentityPoolNamespace.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package iambeta

import (
	"fmt"
	"reflect"
	"regexp"
	"strings"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const workloadIdentityPoolNamespaceIdRegexp = `^[0-9a-z-]+$`

func ValidateWorkloadIdentityPoolNamespaceId(v interface{}, k string) (ws []string, errors []error) {
	value := v.(string)

	if !regexp.MustCompile(workloadIdentityPoolNamespaceIdRegexp).MatchString(value) {
		errors = append(errors, fmt.Errorf(
			"%q must contain only lowercase letters (a-z), numbers (0-9), or dashes (-)", k))
	}

	if len(value) < 2 {
		errors = append(errors, fmt.Errorf(
			"%q cannot be less than 2 characters", k))
		return
	}

	if len(value) > 63 {
		errors = append(errors, fmt.Errorf(
			"%q cannot be greater than 63 characters", k))
	}

	isLowerAlphaNumeric := func(r byte) bool {
		return (r >= '0' && r <= '9') || (r >= 'a' && r <= 'z')
	}

	firstChar := value[0]
	if !isLowerAlphaNumeric(firstChar) {
		errors = append(errors, fmt.Errorf(
			"%q must start with an alphanumeric character", k))
	}

	lastChar := value[len(value)-1]
	if !isLowerAlphaNumeric(lastChar) {
		errors = append(errors, fmt.Errorf(
			"%q must end with an alphanumeric character", k))
	}

	if strings.HasPrefix(value, "gcp-") {
		errors = append(errors, fmt.Errorf(
			"%q (%q) can not start with \"gcp-\"", k, value))
	}

	return
}

const IAMBetaWorkloadIdentityPoolNamespaceAssetType string = "iam.googleapis.com/WorkloadIdentityPoolNamespace"

func ResourceConverterIAMBetaWorkloadIdentityPoolNamespace() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: IAMBetaWorkloadIdentityPoolNamespaceAssetType,
		Convert:   GetIAMBetaWorkloadIdentityPoolNamespaceCaiObject,
	}
}

func GetIAMBetaWorkloadIdentityPoolNamespaceCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//iam.googleapis.com/projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/namespaces/{{workload_identity_pool_namespace_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetIAMBetaWorkloadIdentityPoolNamespaceApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: IAMBetaWorkloadIdentityPoolNamespaceAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/iam/v1/rest",
				DiscoveryName:        "WorkloadIdentityPoolNamespace",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetIAMBetaWorkloadIdentityPoolNamespaceApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandIAMBetaWorkloadIdentityPoolNamespaceDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	disabledProp, err := expandIAMBetaWorkloadIdentityPoolNamespaceDisabled(d.Get("disabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("disabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(disabledProp)) && (ok || !reflect.DeepEqual(v, disabledProp)) {
		obj["disabled"] = disabledProp
	}

	return obj, nil
}

func expandIAMBetaWorkloadIdentityPoolNamespaceDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandIAMBetaWorkloadIdentityPoolNamespaceDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
