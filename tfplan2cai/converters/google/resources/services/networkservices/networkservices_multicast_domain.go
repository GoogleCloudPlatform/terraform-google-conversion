// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networkservices/MulticastDomain.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkServicesMulticastDomainAssetType string = "networkservices.googleapis.com/MulticastDomain"

func ResourceConverterNetworkServicesMulticastDomain() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: NetworkServicesMulticastDomainAssetType,
		Convert:   GetNetworkServicesMulticastDomainCaiObject,
	}
}

func GetNetworkServicesMulticastDomainCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//networkservices.googleapis.com/projects/{{project}}/locations/{{location}}/multicastDomains/{{multicast_domain_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetNetworkServicesMulticastDomainApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: NetworkServicesMulticastDomainAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/networkservices/v1/rest",
				DiscoveryName:        "MulticastDomain",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetNetworkServicesMulticastDomainApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	adminNetworkProp, err := expandNetworkServicesMulticastDomainAdminNetwork(d.Get("admin_network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("admin_network"); !tpgresource.IsEmptyValue(reflect.ValueOf(adminNetworkProp)) && (ok || !reflect.DeepEqual(v, adminNetworkProp)) {
		obj["adminNetwork"] = adminNetworkProp
	}
	connectionConfigProp, err := expandNetworkServicesMulticastDomainConnectionConfig(d.Get("connection_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("connection_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(connectionConfigProp)) && (ok || !reflect.DeepEqual(v, connectionConfigProp)) {
		obj["connection"] = connectionConfigProp
	}
	descriptionProp, err := expandNetworkServicesMulticastDomainDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	multicastDomainGroupProp, err := expandNetworkServicesMulticastDomainMulticastDomainGroup(d.Get("multicast_domain_group"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("multicast_domain_group"); !tpgresource.IsEmptyValue(reflect.ValueOf(multicastDomainGroupProp)) && (ok || !reflect.DeepEqual(v, multicastDomainGroupProp)) {
		obj["multicastDomainGroup"] = multicastDomainGroupProp
	}
	effectiveLabelsProp, err := expandNetworkServicesMulticastDomainEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	return obj, nil
}

func expandNetworkServicesMulticastDomainAdminNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainConnectionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedConnectionType, err := expandNetworkServicesMulticastDomainConnectionConfigConnectionType(original["connection_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionType"] = transformedConnectionType
	}

	transformedNccHub, err := expandNetworkServicesMulticastDomainConnectionConfigNccHub(original["ncc_hub"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNccHub); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nccHub"] = transformedNccHub
	}

	return transformed, nil
}

func expandNetworkServicesMulticastDomainConnectionConfigConnectionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainConnectionConfigNccHub(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainMulticastDomainGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesMulticastDomainEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
