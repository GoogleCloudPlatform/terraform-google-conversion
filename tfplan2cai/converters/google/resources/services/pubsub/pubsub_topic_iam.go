// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package pubsub

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgiamresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const PubsubTopicIAMAssetType string = "pubsub.googleapis.com/Topic"

func ResourceConverterPubsubTopicIamPolicy() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType:         PubsubTopicIAMAssetType,
		Convert:           GetPubsubTopicIamPolicyCaiObject,
		MergeCreateUpdate: MergePubsubTopicIamPolicy,
	}
}

func ResourceConverterPubsubTopicIamBinding() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType:         PubsubTopicIAMAssetType,
		Convert:           GetPubsubTopicIamBindingCaiObject,
		FetchFullResource: FetchPubsubTopicIamPolicy,
		MergeCreateUpdate: MergePubsubTopicIamBinding,
		MergeDelete:       MergePubsubTopicIamBindingDelete,
	}
}

func ResourceConverterPubsubTopicIamMember() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType:         PubsubTopicIAMAssetType,
		Convert:           GetPubsubTopicIamMemberCaiObject,
		FetchFullResource: FetchPubsubTopicIamPolicy,
		MergeCreateUpdate: MergePubsubTopicIamMember,
		MergeDelete:       MergePubsubTopicIamMemberDelete,
	}
}

func GetPubsubTopicIamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	return newPubsubTopicIamAsset(d, config, tpgiamresource.ExpandIamPolicyBindings)
}

func GetPubsubTopicIamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	return newPubsubTopicIamAsset(d, config, tpgiamresource.ExpandIamRoleBindings)
}

func GetPubsubTopicIamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	return newPubsubTopicIamAsset(d, config, tpgiamresource.ExpandIamMemberBindings)
}

func MergePubsubTopicIamPolicy(existing, incoming tpgresource.Asset) tpgresource.Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergePubsubTopicIamBinding(existing, incoming tpgresource.Asset) tpgresource.Asset {
	return tpgiamresource.MergeIamAssets(existing, incoming, tpgiamresource.MergeAuthoritativeBindings)
}

func MergePubsubTopicIamBindingDelete(existing, incoming tpgresource.Asset) tpgresource.Asset {
	return tpgiamresource.MergeDeleteIamAssets(existing, incoming, tpgiamresource.MergeDeleteAuthoritativeBindings)
}

func MergePubsubTopicIamMember(existing, incoming tpgresource.Asset) tpgresource.Asset {
	return tpgiamresource.MergeIamAssets(existing, incoming, tpgiamresource.MergeAdditiveBindings)
}

func MergePubsubTopicIamMemberDelete(existing, incoming tpgresource.Asset) tpgresource.Asset {
	return tpgiamresource.MergeDeleteIamAssets(existing, incoming, tpgiamresource.MergeDeleteAdditiveBindings)
}

func newPubsubTopicIamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]tpgresource.IAMBinding, error),
) ([]tpgresource.Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []tpgresource.Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := tpgresource.AssetName(d, config, "//pubsub.googleapis.com/projects/{{project}}/topics/{{topic}}")
	if err != nil {
		return []tpgresource.Asset{}, err
	}

	return []tpgresource.Asset{{
		Name: name,
		Type: PubsubTopicIAMAssetType,
		IAMPolicy: &tpgresource.IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchPubsubTopicIamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (tpgresource.Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("topic"); !ok {
		return tpgresource.Asset{}, tpgresource.ErrEmptyIdentityField
	}

	return tpgiamresource.FetchIamPolicy(
		PubsubTopicIamUpdaterProducer,
		d,
		config,
		"//pubsub.googleapis.com/projects/{{project}}/topics/{{topic}}",
		PubsubTopicIAMAssetType,
	)
}
