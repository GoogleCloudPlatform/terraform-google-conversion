// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/apphub/Service.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/cai2hcl/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package apphub

import (
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/converters/utils"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/models"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/caiasset"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/transport"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/transport"
)

type ApphubServiceCai2hclConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewApphubServiceCai2hclConverter(provider *schema.Provider) models.Cai2hclConverter {
	schema := provider.ResourcesMap[ApphubServiceSchemaName].Schema

	return &ApphubServiceCai2hclConverter{
		name:   ApphubServiceSchemaName,
		schema: schema,
	}
}

// Convert converts asset to HCL resource blocks.
func (c *ApphubServiceCai2hclConverter) Convert(asset caiasset.Asset) ([]*models.TerraformResourceBlock, error) {
	var blocks []*models.TerraformResourceBlock
	block, err := c.convertResourceData(asset)
	if err != nil {
		return nil, err
	}
	blocks = append(blocks, block)
	return blocks, nil
}

func (c *ApphubServiceCai2hclConverter) convertResourceData(asset caiasset.Asset) (*models.TerraformResourceBlock, error) {
	if asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	var err error
	res := asset.Resource.Data
	config := transport.NewConfig()
	d := &schema.ResourceData{}

	assetNameParts := strings.Split(asset.Name, "/")
	hclBlockName := assetNameParts[len(assetNameParts)-1]

	hclData := make(map[string]interface{})

	outputFields := map[string]struct{}{"create_time": struct{}{}, "name": struct{}{}, "service_properties": struct{}{}, "service_reference": struct{}{}, "state": struct{}{}, "uid": struct{}{}, "update_time": struct{}{}}
	utils.ParseUrlParamValuesFromAssetName(asset.Name, "//apphub.googleapis.com/projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}", outputFields, hclData)

	hclData["display_name"] = flattenApphubServiceDisplayName(res["displayName"], d, config)
	hclData["description"] = flattenApphubServiceDescription(res["description"], d, config)
	hclData["attributes"] = flattenApphubServiceAttributes(res["attributes"], d, config)
	hclData["discovered_service"] = flattenApphubServiceDiscoveredService(res["discoveredService"], d, config)

	ctyVal, err := utils.MapToCtyValWithSchema(hclData, c.schema)
	if err != nil {
		return nil, err
	}
	return &models.TerraformResourceBlock{
		Labels: []string{c.name, hclBlockName},
		Value:  ctyVal,
	}, nil
}

func flattenApphubServiceDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["criticality"] =
		flattenApphubServiceAttributesCriticality(original["criticality"], d, config)
	transformed["environment"] =
		flattenApphubServiceAttributesEnvironment(original["environment"], d, config)
	transformed["developer_owners"] =
		flattenApphubServiceAttributesDeveloperOwners(original["developerOwners"], d, config)
	transformed["operator_owners"] =
		flattenApphubServiceAttributesOperatorOwners(original["operatorOwners"], d, config)
	transformed["business_owners"] =
		flattenApphubServiceAttributesBusinessOwners(original["businessOwners"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenApphubServiceAttributesCriticality(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenApphubServiceAttributesCriticalityType(original["type"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenApphubServiceAttributesCriticalityType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesEnvironment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenApphubServiceAttributesEnvironmentType(original["type"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenApphubServiceAttributesEnvironmentType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesDeveloperOwners(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"display_name": flattenApphubServiceAttributesDeveloperOwnersDisplayName(original["displayName"], d, config),
			"email":        flattenApphubServiceAttributesDeveloperOwnersEmail(original["email"], d, config),
		})
	}
	return transformed
}

func flattenApphubServiceAttributesDeveloperOwnersDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesDeveloperOwnersEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesOperatorOwners(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"display_name": flattenApphubServiceAttributesOperatorOwnersDisplayName(original["displayName"], d, config),
			"email":        flattenApphubServiceAttributesOperatorOwnersEmail(original["email"], d, config),
		})
	}
	return transformed
}

func flattenApphubServiceAttributesOperatorOwnersDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesOperatorOwnersEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesBusinessOwners(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"display_name": flattenApphubServiceAttributesBusinessOwnersDisplayName(original["displayName"], d, config),
			"email":        flattenApphubServiceAttributesBusinessOwnersEmail(original["email"], d, config),
		})
	}
	return transformed
}

func flattenApphubServiceAttributesBusinessOwnersDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceAttributesBusinessOwnersEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApphubServiceDiscoveredService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
