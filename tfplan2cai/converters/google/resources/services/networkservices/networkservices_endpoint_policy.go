// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkServicesEndpointPolicyAssetType string = "networkservices.googleapis.com/EndpointPolicy"

func ResourceConverterNetworkServicesEndpointPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: NetworkServicesEndpointPolicyAssetType,
		Convert:   GetNetworkServicesEndpointPolicyCaiObject,
	}
}

func GetNetworkServicesEndpointPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//networkservices.googleapis.com/projects/{{project}}/locations/global/endpointPolicies/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetNetworkServicesEndpointPolicyApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: NetworkServicesEndpointPolicyAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/networkservices/v1/rest",
				DiscoveryName:        "EndpointPolicy",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetNetworkServicesEndpointPolicyApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	labelsProp, err := expandNetworkServicesEndpointPolicyLabels(d.Get("labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	descriptionProp, err := expandNetworkServicesEndpointPolicyDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	authorizationPolicyProp, err := expandNetworkServicesEndpointPolicyAuthorizationPolicy(d.Get("authorization_policy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("authorization_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(authorizationPolicyProp)) && (ok || !reflect.DeepEqual(v, authorizationPolicyProp)) {
		obj["authorizationPolicy"] = authorizationPolicyProp
	}
	serverTlsPolicyProp, err := expandNetworkServicesEndpointPolicyServerTlsPolicy(d.Get("server_tls_policy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("server_tls_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(serverTlsPolicyProp)) && (ok || !reflect.DeepEqual(v, serverTlsPolicyProp)) {
		obj["serverTlsPolicy"] = serverTlsPolicyProp
	}
	clientTlsPolicyProp, err := expandNetworkServicesEndpointPolicyClientTlsPolicy(d.Get("client_tls_policy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("client_tls_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(clientTlsPolicyProp)) && (ok || !reflect.DeepEqual(v, clientTlsPolicyProp)) {
		obj["clientTlsPolicy"] = clientTlsPolicyProp
	}
	typeProp, err := expandNetworkServicesEndpointPolicyType(d.Get("type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("type"); !tpgresource.IsEmptyValue(reflect.ValueOf(typeProp)) && (ok || !reflect.DeepEqual(v, typeProp)) {
		obj["type"] = typeProp
	}
	trafficPortSelectorProp, err := expandNetworkServicesEndpointPolicyTrafficPortSelector(d.Get("traffic_port_selector"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("traffic_port_selector"); !tpgresource.IsEmptyValue(reflect.ValueOf(trafficPortSelectorProp)) && (ok || !reflect.DeepEqual(v, trafficPortSelectorProp)) {
		obj["trafficPortSelector"] = trafficPortSelectorProp
	}
	endpointMatcherProp, err := expandNetworkServicesEndpointPolicyEndpointMatcher(d.Get("endpoint_matcher"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("endpoint_matcher"); !tpgresource.IsEmptyValue(reflect.ValueOf(endpointMatcherProp)) && (ok || !reflect.DeepEqual(v, endpointMatcherProp)) {
		obj["endpointMatcher"] = endpointMatcherProp
	}

	return obj, nil
}

func expandNetworkServicesEndpointPolicyLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkServicesEndpointPolicyDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyAuthorizationPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyServerTlsPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyClientTlsPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyTrafficPortSelector(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPorts, err := expandNetworkServicesEndpointPolicyTrafficPortSelectorPorts(original["ports"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPorts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ports"] = transformedPorts
	}

	return transformed, nil
}

func expandNetworkServicesEndpointPolicyTrafficPortSelectorPorts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyEndpointMatcher(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadataLabelMatcher, err := expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcher(original["metadata_label_matcher"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadataLabelMatcher); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadataLabelMatcher"] = transformedMetadataLabelMatcher
	}

	return transformed, nil
}

func expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcher(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMetadataLabelMatchCriteria, err := expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteria(original["metadata_label_match_criteria"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadataLabelMatchCriteria); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadataLabelMatchCriteria"] = transformedMetadataLabelMatchCriteria
	}

	transformedMetadataLabels, err := expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabels(original["metadata_labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetadataLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metadataLabels"] = transformedMetadataLabels
	}

	return transformed, nil
}

func expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteria(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedLabelName, err := expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabelsLabelName(original["label_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLabelName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["labelName"] = transformedLabelName
		}

		transformedLabelValue, err := expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabelsLabelValue(original["label_value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLabelValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["labelValue"] = transformedLabelValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabelsLabelName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkServicesEndpointPolicyEndpointMatcherMetadataLabelMatcherMetadataLabelsLabelValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
