// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataprocgdc

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DataprocGdcServiceInstanceAssetType string = "dataprocgdc.googleapis.com/ServiceInstance"

func ResourceConverterDataprocGdcServiceInstance() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DataprocGdcServiceInstanceAssetType,
		Convert:   GetDataprocGdcServiceInstanceCaiObject,
	}
}

func GetDataprocGdcServiceInstanceCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//dataprocgdc.googleapis.com/projects/{{project}}/locations/{{location}}/serviceInstances/{{service_instance_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDataprocGdcServiceInstanceApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DataprocGdcServiceInstanceAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/dataprocgdc/v1/rest",
				DiscoveryName:        "ServiceInstance",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDataprocGdcServiceInstanceApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	gdceClusterProp, err := expandDataprocGdcServiceInstanceGdceCluster(d.Get("gdce_cluster"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("gdce_cluster"); !tpgresource.IsEmptyValue(reflect.ValueOf(gdceClusterProp)) && (ok || !reflect.DeepEqual(v, gdceClusterProp)) {
		obj["gdceCluster"] = gdceClusterProp
	}
	displayNameProp, err := expandDataprocGdcServiceInstanceDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	sparkServiceInstanceConfigProp, err := expandDataprocGdcServiceInstanceSparkServiceInstanceConfig(d.Get("spark_service_instance_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("spark_service_instance_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(sparkServiceInstanceConfigProp)) && (ok || !reflect.DeepEqual(v, sparkServiceInstanceConfigProp)) {
		obj["sparkServiceInstanceConfig"] = sparkServiceInstanceConfigProp
	}
	serviceAccountProp, err := expandDataprocGdcServiceInstanceServiceAccount(d.Get("service_account"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("service_account"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceAccountProp)) && (ok || !reflect.DeepEqual(v, serviceAccountProp)) {
		obj["serviceAccount"] = serviceAccountProp
	}
	labelsProp, err := expandDataprocGdcServiceInstanceEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandDataprocGdcServiceInstanceGdceCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGdceCluster, err := expandDataprocGdcServiceInstanceGdceClusterGdceCluster(original["gdce_cluster"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGdceCluster); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gdceCluster"] = transformedGdceCluster
	}

	return transformed, nil
}

func expandDataprocGdcServiceInstanceGdceClusterGdceCluster(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcServiceInstanceDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcServiceInstanceSparkServiceInstanceConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcServiceInstanceServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataprocGdcServiceInstanceEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
