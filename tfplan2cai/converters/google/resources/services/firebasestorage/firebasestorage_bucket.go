// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebasestorage

import (
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

const FirebaseStorageBucketAssetType string = "firebasestorage.googleapis.com/Bucket"

func ResourceConverterFirebaseStorageBucket() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType: FirebaseStorageBucketAssetType,
		Convert:   GetFirebaseStorageBucketCaiObject,
	}
}

func GetFirebaseStorageBucketCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	name, err := tpgresource.AssetName(d, config, "//firebasestorage.googleapis.com/projects/{{project}}/buckets/{{bucket_id}}")
	if err != nil {
		return []tpgresource.Asset{}, err
	}
	if obj, err := GetFirebaseStorageBucketApiObject(d, config); err == nil {
		return []tpgresource.Asset{{
			Name: name,
			Type: FirebaseStorageBucketAssetType,
			Resource: &tpgresource.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/firebasestorage/v1beta/rest",
				DiscoveryName:        "Bucket",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []tpgresource.Asset{}, err
	}
}

func GetFirebaseStorageBucketApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})

	return obj, nil
}
