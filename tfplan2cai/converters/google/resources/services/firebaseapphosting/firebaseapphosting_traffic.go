// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/firebaseapphosting/Traffic.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package firebaseapphosting

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const FirebaseAppHostingTrafficAssetType string = "firebaseapphosting.googleapis.com/Traffic"

func ResourceConverterFirebaseAppHostingTraffic() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: FirebaseAppHostingTrafficAssetType,
		Convert:   GetFirebaseAppHostingTrafficCaiObject,
	}
}

func GetFirebaseAppHostingTrafficCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//firebaseapphosting.googleapis.com/projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetFirebaseAppHostingTrafficApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: FirebaseAppHostingTrafficAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/firebaseapphosting/v1beta/rest",
				DiscoveryName:        "Traffic",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetFirebaseAppHostingTrafficApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	etagProp, err := expandFirebaseAppHostingTrafficEtag(d.Get("etag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("etag"); !tpgresource.IsEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	targetProp, err := expandFirebaseAppHostingTrafficTarget(d.Get("target"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("target"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetProp)) && (ok || !reflect.DeepEqual(v, targetProp)) {
		obj["target"] = targetProp
	}
	rolloutPolicyProp, err := expandFirebaseAppHostingTrafficRolloutPolicy(d.Get("rollout_policy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("rollout_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(rolloutPolicyProp)) && (ok || !reflect.DeepEqual(v, rolloutPolicyProp)) {
		obj["rolloutPolicy"] = rolloutPolicyProp
	}

	return obj, nil
}

func expandFirebaseAppHostingTrafficEtag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSplits, err := expandFirebaseAppHostingTrafficTargetSplits(original["splits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSplits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["splits"] = transformedSplits
	}

	return transformed, nil
}

func expandFirebaseAppHostingTrafficTargetSplits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBuild, err := expandFirebaseAppHostingTrafficTargetSplitsBuild(original["build"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBuild); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["build"] = transformedBuild
		}

		transformedPercent, err := expandFirebaseAppHostingTrafficTargetSplitsPercent(original["percent"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPercent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["percent"] = transformedPercent
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandFirebaseAppHostingTrafficTargetSplitsBuild(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficTargetSplitsPercent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisabled, err := expandFirebaseAppHostingTrafficRolloutPolicyDisabled(original["disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disabled"] = transformedDisabled
	}

	transformedDisabledTime, err := expandFirebaseAppHostingTrafficRolloutPolicyDisabledTime(original["disabled_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisabledTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disabledTime"] = transformedDisabledTime
	}

	transformedCodebaseBranch, err := expandFirebaseAppHostingTrafficRolloutPolicyCodebaseBranch(original["codebase_branch"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCodebaseBranch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["codebaseBranch"] = transformedCodebaseBranch
	}

	return transformed, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicyDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicyDisabledTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseAppHostingTrafficRolloutPolicyCodebaseBranch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
