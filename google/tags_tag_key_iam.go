// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "fmt"

func GetTagsTagKeyIamPolicyCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newTagsTagKeyIamAsset(d, config, expandIamPolicyBindings)
}

func GetTagsTagKeyIamBindingCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newTagsTagKeyIamAsset(d, config, expandIamRoleBindings)
}

func GetTagsTagKeyIamMemberCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newTagsTagKeyIamAsset(d, config, expandIamMemberBindings)
}

func MergeTagsTagKeyIamPolicy(existing, incoming Asset) Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeTagsTagKeyIamBinding(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAuthoritativeBindings)
}

func MergeTagsTagKeyIamBindingDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAuthoritativeBindings)
}

func MergeTagsTagKeyIamMember(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAdditiveBindings)
}

func MergeTagsTagKeyIamMemberDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAdditiveBindings)
}

func newTagsTagKeyIamAsset(
	d TerraformResourceData,
	config *Config,
	expandBindings func(d TerraformResourceData) ([]IAMBinding, error),
) ([]Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := assetName(d, config, "//tags.googleapis.com/{{tagkey}}")
	if err != nil {
		return []Asset{}, err
	}

	return []Asset{{
		Name: name,
		Type: "tags.googleapis.com/TagKey",
		IAMPolicy: &IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchTagsTagKeyIamPolicy(d TerraformResourceData, config *Config) (Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("{{tagkey}}"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}

	return fetchIamPolicy(
		TagsTagKeyIamUpdaterProducer,
		d,
		config,
		"//tags.googleapis.com/{{tagkey}}",
		"tags.googleapis.com/TagKey",
	)
}
