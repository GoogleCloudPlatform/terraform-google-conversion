// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apihub

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApihubApiHubInstanceAssetType string = "apihub.googleapis.com/ApiHubInstance"

func ResourceConverterApihubApiHubInstance() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ApihubApiHubInstanceAssetType,
		Convert:   GetApihubApiHubInstanceCaiObject,
	}
}

func GetApihubApiHubInstanceCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//apihub.googleapis.com/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetApihubApiHubInstanceApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ApihubApiHubInstanceAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apihub/v1/rest",
				DiscoveryName:        "ApiHubInstance",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetApihubApiHubInstanceApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandApihubApiHubInstanceDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	configProp, err := expandApihubApiHubInstanceConfig(d.Get("config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("config"); !tpgresource.IsEmptyValue(reflect.ValueOf(configProp)) && (ok || !reflect.DeepEqual(v, configProp)) {
		obj["config"] = configProp
	}
	labelsProp, err := expandApihubApiHubInstanceEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandApihubApiHubInstanceDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubApiHubInstanceConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEncryptionType, err := expandApihubApiHubInstanceConfigEncryptionType(original["encryption_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEncryptionType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["encryptionType"] = transformedEncryptionType
	}

	transformedCmekKeyName, err := expandApihubApiHubInstanceConfigCmekKeyName(original["cmek_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCmekKeyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cmekKeyName"] = transformedCmekKeyName
	}

	transformedDisableSearch, err := expandApihubApiHubInstanceConfigDisableSearch(original["disable_search"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableSearch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableSearch"] = transformedDisableSearch
	}

	transformedVertexLocation, err := expandApihubApiHubInstanceConfigVertexLocation(original["vertex_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVertexLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vertexLocation"] = transformedVertexLocation
	}

	return transformed, nil
}

func expandApihubApiHubInstanceConfigEncryptionType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubApiHubInstanceConfigCmekKeyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubApiHubInstanceConfigDisableSearch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubApiHubInstanceConfigVertexLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandApihubApiHubInstanceEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
