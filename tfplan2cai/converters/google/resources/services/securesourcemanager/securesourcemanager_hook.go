// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/securesourcemanager/Hook.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package securesourcemanager

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SecureSourceManagerHookAssetType string = "securesourcemanager.googleapis.com/Hook"

func ResourceConverterSecureSourceManagerHook() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: SecureSourceManagerHookAssetType,
		Convert:   GetSecureSourceManagerHookCaiObject,
	}
}

func GetSecureSourceManagerHookCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//securesourcemanager.googleapis.com/projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetSecureSourceManagerHookApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: SecureSourceManagerHookAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/securesourcemanager/v1/rest",
				DiscoveryName:        "Hook",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetSecureSourceManagerHookApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	targetUriProp, err := expandSecureSourceManagerHookTargetUri(d.Get("target_uri"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("target_uri"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetUriProp)) && (ok || !reflect.DeepEqual(v, targetUriProp)) {
		obj["targetUri"] = targetUriProp
	}
	disabledProp, err := expandSecureSourceManagerHookDisabled(d.Get("disabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("disabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(disabledProp)) && (ok || !reflect.DeepEqual(v, disabledProp)) {
		obj["disabled"] = disabledProp
	}
	eventsProp, err := expandSecureSourceManagerHookEvents(d.Get("events"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("events"); !tpgresource.IsEmptyValue(reflect.ValueOf(eventsProp)) && (ok || !reflect.DeepEqual(v, eventsProp)) {
		obj["events"] = eventsProp
	}
	sensitiveQueryStringProp, err := expandSecureSourceManagerHookSensitiveQueryString(d.Get("sensitive_query_string"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("sensitive_query_string"); !tpgresource.IsEmptyValue(reflect.ValueOf(sensitiveQueryStringProp)) && (ok || !reflect.DeepEqual(v, sensitiveQueryStringProp)) {
		obj["sensitiveQueryString"] = sensitiveQueryStringProp
	}
	pushOptionProp, err := expandSecureSourceManagerHookPushOption(d.Get("push_option"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("push_option"); ok || !reflect.DeepEqual(v, pushOptionProp) {
		obj["pushOption"] = pushOptionProp
	}

	return obj, nil
}

func expandSecureSourceManagerHookTargetUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookEvents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookSensitiveQueryString(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandSecureSourceManagerHookPushOption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBranchFilter, err := expandSecureSourceManagerHookPushOptionBranchFilter(original["branch_filter"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBranchFilter); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["branchFilter"] = transformedBranchFilter
	}

	return transformed, nil
}

func expandSecureSourceManagerHookPushOptionBranchFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
