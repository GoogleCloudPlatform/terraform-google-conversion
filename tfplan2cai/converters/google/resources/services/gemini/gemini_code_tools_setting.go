// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/gemini/CodeToolsSetting.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package gemini

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GeminiCodeToolsSettingAssetType string = "cloudaicompanion.googleapis.com/CodeToolsSetting"

func ResourceConverterGeminiCodeToolsSetting() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: GeminiCodeToolsSettingAssetType,
		Convert:   GetGeminiCodeToolsSettingCaiObject,
	}
}

func GetGeminiCodeToolsSettingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//cloudaicompanion.googleapis.com/projects/{{project}}/locations/{{location}}/codeToolsSettings/{{code_tools_setting_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetGeminiCodeToolsSettingApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: GeminiCodeToolsSettingAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/cloudaicompanion/v1/rest",
				DiscoveryName:        "CodeToolsSetting",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetGeminiCodeToolsSettingApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	enabledToolProp, err := expandGeminiCodeToolsSettingEnabledTool(d.Get("enabled_tool"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("enabled_tool"); !tpgresource.IsEmptyValue(reflect.ValueOf(enabledToolProp)) && (ok || !reflect.DeepEqual(v, enabledToolProp)) {
		obj["enabledTool"] = enabledToolProp
	}
	labelsProp, err := expandGeminiCodeToolsSettingEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandGeminiCodeToolsSettingEnabledTool(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAccountConnector, err := expandGeminiCodeToolsSettingEnabledToolAccountConnector(original["account_connector"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAccountConnector); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["accountConnector"] = transformedAccountConnector
		}

		transformedHandle, err := expandGeminiCodeToolsSettingEnabledToolHandle(original["handle"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHandle); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["handle"] = transformedHandle
		}

		transformedTool, err := expandGeminiCodeToolsSettingEnabledToolTool(original["tool"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTool); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tool"] = transformedTool
		}

		transformedConfig, err := expandGeminiCodeToolsSettingEnabledToolConfig(original["config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["config"] = transformedConfig
		}

		transformedUriOverride, err := expandGeminiCodeToolsSettingEnabledToolUriOverride(original["uri_override"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUriOverride); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["uriOverride"] = transformedUriOverride
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGeminiCodeToolsSettingEnabledToolAccountConnector(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiCodeToolsSettingEnabledToolHandle(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiCodeToolsSettingEnabledToolTool(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiCodeToolsSettingEnabledToolConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandGeminiCodeToolsSettingEnabledToolConfigKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedValue, err := expandGeminiCodeToolsSettingEnabledToolConfigValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandGeminiCodeToolsSettingEnabledToolConfigKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiCodeToolsSettingEnabledToolConfigValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiCodeToolsSettingEnabledToolUriOverride(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandGeminiCodeToolsSettingEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
