// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const DataplexAssetIAMAssetType string = "dataplex.googleapis.com/Asset"

func resourceConverterDataplexAssetIamPolicy() ResourceConverter {
	return ResourceConverter{
		AssetType:         DataplexAssetIAMAssetType,
		Convert:           GetDataplexAssetIamPolicyCaiObject,
		MergeCreateUpdate: MergeDataplexAssetIamPolicy,
	}
}

func resourceConverterDataplexAssetIamBinding() ResourceConverter {
	return ResourceConverter{
		AssetType:         DataplexAssetIAMAssetType,
		Convert:           GetDataplexAssetIamBindingCaiObject,
		FetchFullResource: FetchDataplexAssetIamPolicy,
		MergeCreateUpdate: MergeDataplexAssetIamBinding,
		MergeDelete:       MergeDataplexAssetIamBindingDelete,
	}
}

func resourceConverterDataplexAssetIamMember() ResourceConverter {
	return ResourceConverter{
		AssetType:         DataplexAssetIAMAssetType,
		Convert:           GetDataplexAssetIamMemberCaiObject,
		FetchFullResource: FetchDataplexAssetIamPolicy,
		MergeCreateUpdate: MergeDataplexAssetIamMember,
		MergeDelete:       MergeDataplexAssetIamMemberDelete,
	}
}

func GetDataplexAssetIamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]Asset, error) {
	return newDataplexAssetIamAsset(d, config, expandIamPolicyBindings)
}

func GetDataplexAssetIamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]Asset, error) {
	return newDataplexAssetIamAsset(d, config, expandIamRoleBindings)
}

func GetDataplexAssetIamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]Asset, error) {
	return newDataplexAssetIamAsset(d, config, expandIamMemberBindings)
}

func MergeDataplexAssetIamPolicy(existing, incoming Asset) Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeDataplexAssetIamBinding(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAuthoritativeBindings)
}

func MergeDataplexAssetIamBindingDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAuthoritativeBindings)
}

func MergeDataplexAssetIamMember(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAdditiveBindings)
}

func MergeDataplexAssetIamMemberDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAdditiveBindings)
}

func newDataplexAssetIamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]IAMBinding, error),
) ([]Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := assetName(d, config, "//dataplex.googleapis.com/projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{dataplex_zone}}/assets/{{asset}}")
	if err != nil {
		return []Asset{}, err
	}

	return []Asset{{
		Name: name,
		Type: DataplexAssetIAMAssetType,
		IAMPolicy: &IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchDataplexAssetIamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("location"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("lake"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("dataplex_zone"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("asset"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}

	return fetchIamPolicy(
		DataplexAssetIamUpdaterProducer,
		d,
		config,
		"//dataplex.googleapis.com/projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{dataplex_zone}}/assets/{{asset}}",
		DataplexAssetIAMAssetType,
	)
}
