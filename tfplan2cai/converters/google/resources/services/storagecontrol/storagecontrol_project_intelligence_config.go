// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/storagecontrol/ProjectIntelligenceConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package storagecontrol

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// API returns empty objects for nested empty lists so this behavior is
// generating unnecessary diff. The below four functions mitigates that diff for
// each individual filter fields.
func intelligenceFilterExcludedCloudStorageLocationsDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	if new == "1" && old == "0" {
		if v, ok := d.GetOkExists("filter.0.excluded_cloud_storage_locations.0.locations"); ok {
			l := v.([]interface{})
			if len(l) == 0 {
				return true
			}
		}
	}
	return false
}

func intelligenceFilterExcludedCloudStorageBucketsDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	if new == "1" && old == "0" {
		if v, ok := d.GetOkExists("filter.0.excluded_cloud_storage_buckets.0.bucket_id_regexes"); ok {
			l := v.([]interface{})
			if len(l) == 0 {
				return true
			}
		}
	}
	return false
}

func intelligenceFilterincludedCloudStorageLocationsDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	if new == "1" && old == "0" {
		if v, ok := d.GetOkExists("filter.0.included_cloud_storage_locations.0.locations"); ok {
			l := v.([]interface{})
			if len(l) == 0 {
				return true
			}
		}
	}
	return false
}

func intelligenceFilterincludedCloudStorageBucketsDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	if new == "1" && old == "0" {
		if v, ok := d.GetOkExists("filter.0.included_cloud_storage_buckets.0.bucket_id_regexes"); ok {
			l := v.([]interface{})
			if len(l) == 0 {
				return true
			}
		}
	}
	return false
}

// This is required to mitigate a diff generated by nested Diff Suppressions.
// AtLeastOneOf prevents empty `filter` object but the nested diff suppressions
// of suppressing empty list's diff can generate unnecessary empty `filter`
// object.
func intelligenceFilterDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	if new == "1" && old == "0" {
		empty := true
		if _, ok := d.GetOkExists("filter.0.included_cloud_storage_buckets"); ok {
			if v, ok := d.GetOkExists("filter.0.included_cloud_storage_buckets.0.bucket_id_regexes"); ok {
				l := v.([]interface{})
				if len(l) != 0 {
					empty = false
				}
			}
		}
		if _, ok := d.GetOkExists("filter.0.excluded_cloud_storage_buckets"); ok {
			if v, ok := d.GetOkExists("filter.0.excluded_cloud_storage_buckets.0.bucket_id_regexes"); ok {
				l := v.([]interface{})
				if len(l) != 0 {
					empty = false
				}
			}
		}
		if _, ok := d.GetOkExists("filter.0.included_cloud_storage_locations"); ok {
			if v, ok := d.GetOkExists("filter.0.included_cloud_storage_locations.0.locations"); ok {
				l := v.([]interface{})
				if len(l) != 0 {
					empty = false
				}
			}
		}
		if _, ok := d.GetOkExists("filter.0.excluded_cloud_storage_locations"); ok {
			if v, ok := d.GetOkExists("filter.0.excluded_cloud_storage_locations.0.locations"); ok {
				l := v.([]interface{})
				if len(l) != 0 {
					empty = false
				}
			}
		}
		if empty {
			return true
		}
	}
	return false
}

const StorageControlProjectIntelligenceConfigAssetType string = "storage.googleapis.com/ProjectIntelligenceConfig"

func ResourceConverterStorageControlProjectIntelligenceConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: StorageControlProjectIntelligenceConfigAssetType,
		Convert:   GetStorageControlProjectIntelligenceConfigCaiObject,
	}
}

func GetStorageControlProjectIntelligenceConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//storage.googleapis.com/projects/{{name}}/locations/global/intelligenceConfig")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetStorageControlProjectIntelligenceConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: StorageControlProjectIntelligenceConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v2",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/storage/v2/rest",
				DiscoveryName:        "ProjectIntelligenceConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetStorageControlProjectIntelligenceConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	editionConfigProp, err := expandStorageControlProjectIntelligenceConfigEditionConfig(d.Get("edition_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("edition_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(editionConfigProp)) && (ok || !reflect.DeepEqual(v, editionConfigProp)) {
		obj["editionConfig"] = editionConfigProp
	}
	filterProp, err := expandStorageControlProjectIntelligenceConfigFilter(d.Get("filter"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterProp)) && (ok || !reflect.DeepEqual(v, filterProp)) {
		obj["filter"] = filterProp
	}

	return obj, nil
}

func expandStorageControlProjectIntelligenceConfigEditionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlProjectIntelligenceConfigFilter(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedExcludedCloudStorageBuckets, err := expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageBuckets(original["excluded_cloud_storage_buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExcludedCloudStorageBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["excludedCloudStorageBuckets"] = transformedExcludedCloudStorageBuckets
	}

	transformedIncludedCloudStorageBuckets, err := expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageBuckets(original["included_cloud_storage_buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedCloudStorageBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedCloudStorageBuckets"] = transformedIncludedCloudStorageBuckets
	}

	transformedExcludedCloudStorageLocations, err := expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageLocations(original["excluded_cloud_storage_locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExcludedCloudStorageLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["excludedCloudStorageLocations"] = transformedExcludedCloudStorageLocations
	}

	transformedIncludedCloudStorageLocations, err := expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageLocations(original["included_cloud_storage_locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIncludedCloudStorageLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["includedCloudStorageLocations"] = transformedIncludedCloudStorageLocations
	}

	return transformed, nil
}

func expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBucketIdRegexes, err := expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageBucketsBucketIdRegexes(original["bucket_id_regexes"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["bucketIdRegexes"] = transformedBucketIdRegexes
	}

	return transformed, nil
}

func expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageBucketsBucketIdRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBucketIdRegexes, err := expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageBucketsBucketIdRegexes(original["bucket_id_regexes"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["bucketIdRegexes"] = transformedBucketIdRegexes
	}

	return transformed, nil
}

func expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageBucketsBucketIdRegexes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocations, err := expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageLocationsLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandStorageControlProjectIntelligenceConfigFilterExcludedCloudStorageLocationsLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocations, err := expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageLocationsLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandStorageControlProjectIntelligenceConfigFilterIncludedCloudStorageLocationsLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
