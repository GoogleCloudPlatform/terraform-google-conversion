// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package colab

import (
	"fmt"
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func modifyScheduleState(config *transport_tpg.Config, d *schema.ResourceData, project string, billingProject string, userAgent string, state string) (map[string]interface{}, error) {
	url, err := tpgresource.ReplaceVars(d, config, "{{ColabBasePath}}projects/{{project}}/locations/{{location}}/schedules/{{name}}:"+state)
	if err != nil {
		return nil, err
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return nil, fmt.Errorf("Unable to %q google_colab_schedule %q: %s", state, d.Id(), err)
	}
	return res, nil
}

const ColabScheduleAssetType string = "aiplatform.googleapis.com/Schedule"

func ResourceConverterColabSchedule() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ColabScheduleAssetType,
		Convert:   GetColabScheduleCaiObject,
	}
}

func GetColabScheduleCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//aiplatform.googleapis.com/projects/{{project}}/locations/{{location}}/schedules/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetColabScheduleApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ColabScheduleAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/aiplatform/v1beta1/rest",
				DiscoveryName:        "Schedule",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetColabScheduleApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandColabScheduleDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	startTimeProp, err := expandColabScheduleStartTime(d.Get("start_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("start_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(startTimeProp)) && (ok || !reflect.DeepEqual(v, startTimeProp)) {
		obj["startTime"] = startTimeProp
	}
	endTimeProp, err := expandColabScheduleEndTime(d.Get("end_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("end_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(endTimeProp)) && (ok || !reflect.DeepEqual(v, endTimeProp)) {
		obj["endTime"] = endTimeProp
	}
	maxRunCountProp, err := expandColabScheduleMaxRunCount(d.Get("max_run_count"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("max_run_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(maxRunCountProp)) && (ok || !reflect.DeepEqual(v, maxRunCountProp)) {
		obj["maxRunCount"] = maxRunCountProp
	}
	cronProp, err := expandColabScheduleCron(d.Get("cron"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("cron"); !tpgresource.IsEmptyValue(reflect.ValueOf(cronProp)) && (ok || !reflect.DeepEqual(v, cronProp)) {
		obj["cron"] = cronProp
	}
	maxConcurrentRunCountProp, err := expandColabScheduleMaxConcurrentRunCount(d.Get("max_concurrent_run_count"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("max_concurrent_run_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(maxConcurrentRunCountProp)) && (ok || !reflect.DeepEqual(v, maxConcurrentRunCountProp)) {
		obj["maxConcurrentRunCount"] = maxConcurrentRunCountProp
	}
	allowQueueingProp, err := expandColabScheduleAllowQueueing(d.Get("allow_queueing"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("allow_queueing"); ok || !reflect.DeepEqual(v, allowQueueingProp) {
		obj["allowQueueing"] = allowQueueingProp
	}
	createNotebookExecutionJobRequestProp, err := expandColabScheduleCreateNotebookExecutionJobRequest(d.Get("create_notebook_execution_job_request"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("create_notebook_execution_job_request"); !tpgresource.IsEmptyValue(reflect.ValueOf(createNotebookExecutionJobRequestProp)) && (ok || !reflect.DeepEqual(v, createNotebookExecutionJobRequestProp)) {
		obj["createNotebookExecutionJobRequest"] = createNotebookExecutionJobRequestProp
	}

	return resourceColabScheduleEncoder(d, config, obj)
}

func resourceColabScheduleEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	config := meta.(*transport_tpg.Config)
	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return nil, err
	}

	location, err := tpgresource.GetRegion(d, config)
	if err != nil {
		return nil, err
	}

	// createNotebookExecutionJobRequest does not exist in update requests
	if obj["createNotebookExecutionJobRequest"] == nil {
		return obj, nil
	}

	jobRequest, ok := obj["createNotebookExecutionJobRequest"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("createNotebookExecutionJobRequest is not of type map[string]interface{} or is nil")
	}
	jobRequest["parent"] = fmt.Sprintf("projects/%s/locations/%s", project, location)

	return obj, nil
}

func expandColabScheduleDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleMaxRunCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCron(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleMaxConcurrentRunCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleAllowQueueing(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequest(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNotebookExecutionJob, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob(original["notebook_execution_job"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNotebookExecutionJob); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["notebookExecutionJob"] = transformedNotebookExecutionJob
	}

	return transformed, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisplayName, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDisplayName(original["display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["displayName"] = transformedDisplayName
	}

	transformedDataformRepositorySource, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource(original["dataform_repository_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataformRepositorySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataformRepositorySource"] = transformedDataformRepositorySource
	}

	transformedGcsNotebookSource, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource(original["gcs_notebook_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcsNotebookSource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcsNotebookSource"] = transformedGcsNotebookSource
	}

	transformedExecutionTimeout, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobExecutionTimeout(original["execution_timeout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExecutionTimeout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["executionTimeout"] = transformedExecutionTimeout
	}

	transformedNotebookRuntimeTemplateResourceName, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobNotebookRuntimeTemplateResourceName(original["notebook_runtime_template_resource_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNotebookRuntimeTemplateResourceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["notebookRuntimeTemplateResourceName"] = transformedNotebookRuntimeTemplateResourceName
	}

	transformedGcsOutputUri, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsOutputUri(original["gcs_output_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcsOutputUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcsOutputUri"] = transformedGcsOutputUri
	}

	transformedExecutionUser, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobExecutionUser(original["execution_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExecutionUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["executionUser"] = transformedExecutionUser
	}

	transformedServiceAccount, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	return transformed, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDataformRepositoryResourceName, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceDataformRepositoryResourceName(original["dataform_repository_resource_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataformRepositoryResourceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataformRepositoryResourceName"] = transformedDataformRepositoryResourceName
	}

	transformedCommitSha, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceCommitSha(original["commit_sha"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitSha); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitSha"] = transformedCommitSha
	}

	return transformed, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceDataformRepositoryResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceCommitSha(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedGeneration, err := expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceGeneration(original["generation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGeneration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generation"] = transformedGeneration
	}

	return transformed, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceGeneration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobExecutionTimeout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobNotebookRuntimeTemplateResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsOutputUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobExecutionUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandColabScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
