// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/FutureReservation.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ComputeFutureReservationAssetType string = "compute.googleapis.com/FutureReservation"

func ResourceConverterComputeFutureReservation() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ComputeFutureReservationAssetType,
		Convert:   GetComputeFutureReservationCaiObject,
	}
}

func GetComputeFutureReservationCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//compute.googleapis.com/projects/{{project}}/zones/{{zone}}/futureReservations/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetComputeFutureReservationApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ComputeFutureReservationAssetType,
			Resource: &cai.AssetResource{
				Version:              "beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/compute/beta/rest",
				DiscoveryName:        "FutureReservation",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetComputeFutureReservationApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandComputeFutureReservationDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	timeWindowProp, err := expandComputeFutureReservationTimeWindow(d.Get("time_window"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("time_window"); !tpgresource.IsEmptyValue(reflect.ValueOf(timeWindowProp)) && (ok || !reflect.DeepEqual(v, timeWindowProp)) {
		obj["timeWindow"] = timeWindowProp
	}
	shareSettingsProp, err := expandComputeFutureReservationShareSettings(d.Get("share_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("share_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(shareSettingsProp)) && (ok || !reflect.DeepEqual(v, shareSettingsProp)) {
		obj["shareSettings"] = shareSettingsProp
	}
	namePrefixProp, err := expandComputeFutureReservationNamePrefix(d.Get("name_prefix"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name_prefix"); !tpgresource.IsEmptyValue(reflect.ValueOf(namePrefixProp)) && (ok || !reflect.DeepEqual(v, namePrefixProp)) {
		obj["namePrefix"] = namePrefixProp
	}
	planningStatusProp, err := expandComputeFutureReservationPlanningStatus(d.Get("planning_status"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("planning_status"); !tpgresource.IsEmptyValue(reflect.ValueOf(planningStatusProp)) && (ok || !reflect.DeepEqual(v, planningStatusProp)) {
		obj["planningStatus"] = planningStatusProp
	}
	autoDeleteAutoCreatedReservationsProp, err := expandComputeFutureReservationAutoDeleteAutoCreatedReservations(d.Get("auto_delete_auto_created_reservations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auto_delete_auto_created_reservations"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoDeleteAutoCreatedReservationsProp)) && (ok || !reflect.DeepEqual(v, autoDeleteAutoCreatedReservationsProp)) {
		obj["autoDeleteAutoCreatedReservations"] = autoDeleteAutoCreatedReservationsProp
	}
	specificReservationRequiredProp, err := expandComputeFutureReservationSpecificReservationRequired(d.Get("specific_reservation_required"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("specific_reservation_required"); !tpgresource.IsEmptyValue(reflect.ValueOf(specificReservationRequiredProp)) && (ok || !reflect.DeepEqual(v, specificReservationRequiredProp)) {
		obj["specificReservationRequired"] = specificReservationRequiredProp
	}
	reservationNameProp, err := expandComputeFutureReservationReservationName(d.Get("reservation_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("reservation_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(reservationNameProp)) && (ok || !reflect.DeepEqual(v, reservationNameProp)) {
		obj["reservationName"] = reservationNameProp
	}
	deploymentTypeProp, err := expandComputeFutureReservationDeploymentType(d.Get("deployment_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("deployment_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(deploymentTypeProp)) && (ok || !reflect.DeepEqual(v, deploymentTypeProp)) {
		obj["deploymentType"] = deploymentTypeProp
	}
	reservationModeProp, err := expandComputeFutureReservationReservationMode(d.Get("reservation_mode"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("reservation_mode"); !tpgresource.IsEmptyValue(reflect.ValueOf(reservationModeProp)) && (ok || !reflect.DeepEqual(v, reservationModeProp)) {
		obj["reservationMode"] = reservationModeProp
	}
	commitmentInfoProp, err := expandComputeFutureReservationCommitmentInfo(d.Get("commitment_info"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("commitment_info"); !tpgresource.IsEmptyValue(reflect.ValueOf(commitmentInfoProp)) && (ok || !reflect.DeepEqual(v, commitmentInfoProp)) {
		obj["commitmentInfo"] = commitmentInfoProp
	}
	schedulingTypeProp, err := expandComputeFutureReservationSchedulingType(d.Get("scheduling_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("scheduling_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(schedulingTypeProp)) && (ok || !reflect.DeepEqual(v, schedulingTypeProp)) {
		obj["schedulingType"] = schedulingTypeProp
	}
	specificSkuPropertiesProp, err := expandComputeFutureReservationSpecificSkuProperties(d.Get("specific_sku_properties"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("specific_sku_properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(specificSkuPropertiesProp)) && (ok || !reflect.DeepEqual(v, specificSkuPropertiesProp)) {
		obj["specificSkuProperties"] = specificSkuPropertiesProp
	}
	autoCreatedReservationsDeleteTimeProp, err := expandComputeFutureReservationAutoCreatedReservationsDeleteTime(d.Get("auto_created_reservations_delete_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auto_created_reservations_delete_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoCreatedReservationsDeleteTimeProp)) && (ok || !reflect.DeepEqual(v, autoCreatedReservationsDeleteTimeProp)) {
		obj["autoCreatedReservationsDeleteTime"] = autoCreatedReservationsDeleteTimeProp
	}
	autoCreatedReservationsDurationProp, err := expandComputeFutureReservationAutoCreatedReservationsDuration(d.Get("auto_created_reservations_duration"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("auto_created_reservations_duration"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoCreatedReservationsDurationProp)) && (ok || !reflect.DeepEqual(v, autoCreatedReservationsDurationProp)) {
		obj["autoCreatedReservationsDuration"] = autoCreatedReservationsDurationProp
	}
	nameProp, err := expandComputeFutureReservationName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	return obj, nil
}

func expandComputeFutureReservationDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationTimeWindow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStartTime, err := expandComputeFutureReservationTimeWindowStartTime(original["start_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["startTime"] = transformedStartTime
	}

	transformedEndTime, err := expandComputeFutureReservationTimeWindowEndTime(original["end_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endTime"] = transformedEndTime
	}

	transformedDuration, err := expandComputeFutureReservationTimeWindowDuration(original["duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["duration"] = transformedDuration
	}

	return transformed, nil
}

func expandComputeFutureReservationTimeWindowStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationTimeWindowEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationTimeWindowDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSeconds, err := expandComputeFutureReservationTimeWindowDurationSeconds(original["seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["seconds"] = transformedSeconds
	}

	transformedNanos, err := expandComputeFutureReservationTimeWindowDurationNanos(original["nanos"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNanos); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nanos"] = transformedNanos
	}

	return transformed, nil
}

func expandComputeFutureReservationTimeWindowDurationSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationTimeWindowDurationNanos(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationShareSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedShareType, err := expandComputeFutureReservationShareSettingsShareType(original["share_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedShareType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["shareType"] = transformedShareType
	}

	transformedProjects, err := expandComputeFutureReservationShareSettingsProjects(original["projects"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjects); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projects"] = transformedProjects
	}

	transformedProjectMap, err := expandComputeFutureReservationShareSettingsProjectMap(original["project_map"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectMap); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectMap"] = transformedProjectMap
	}

	return transformed, nil
}

func expandComputeFutureReservationShareSettingsShareType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationShareSettingsProjects(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationShareSettingsProjectMap(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedProjectId, err := expandComputeFutureReservationShareSettingsProjectMapProjectId(original["project_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["projectId"] = transformedProjectId
		}

		transformedId, err := tpgresource.ExpandString(original["id"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedId] = transformed
	}
	return m, nil
}

func expandComputeFutureReservationShareSettingsProjectMapProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationNamePrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationPlanningStatus(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationAutoDeleteAutoCreatedReservations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificReservationRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationReservationName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationDeploymentType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationReservationMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationCommitmentInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCommitmentPlan, err := expandComputeFutureReservationCommitmentInfoCommitmentPlan(original["commitment_plan"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitmentPlan); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitmentPlan"] = transformedCommitmentPlan
	}

	transformedCommitmentName, err := expandComputeFutureReservationCommitmentInfoCommitmentName(original["commitment_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommitmentName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["commitmentName"] = transformedCommitmentName
	}

	transformedPreviousCommitmentTerms, err := expandComputeFutureReservationCommitmentInfoPreviousCommitmentTerms(original["previous_commitment_terms"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPreviousCommitmentTerms); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["previousCommitmentTerms"] = transformedPreviousCommitmentTerms
	}

	return transformed, nil
}

func expandComputeFutureReservationCommitmentInfoCommitmentPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationCommitmentInfoCommitmentName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationCommitmentInfoPreviousCommitmentTerms(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSchedulingType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInstanceProperties, err := expandComputeFutureReservationSpecificSkuPropertiesInstanceProperties(original["instance_properties"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstanceProperties); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instanceProperties"] = transformedInstanceProperties
	}

	transformedTotalCount, err := expandComputeFutureReservationSpecificSkuPropertiesTotalCount(original["total_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTotalCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["totalCount"] = transformedTotalCount
	}

	transformedSourceInstanceTemplate, err := expandComputeFutureReservationSpecificSkuPropertiesSourceInstanceTemplate(original["source_instance_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSourceInstanceTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sourceInstanceTemplate"] = transformedSourceInstanceTemplate
	}

	return transformed, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstanceProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMachineType, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMachineType(original["machine_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineType"] = transformedMachineType
	}

	transformedGuestAccelerators, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesGuestAccelerators(original["guest_accelerators"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGuestAccelerators); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["guestAccelerators"] = transformedGuestAccelerators
	}

	transformedMinCpuPlatform, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMinCpuPlatform(original["min_cpu_platform"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinCpuPlatform); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minCpuPlatform"] = transformedMinCpuPlatform
	}

	transformedLocalSsds, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocalSsds(original["local_ssds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalSsds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localSsds"] = transformedLocalSsds
	}

	transformedMaintenanceFreezeDurationHours, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMaintenanceFreezeDurationHours(original["maintenance_freeze_duration_hours"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceFreezeDurationHours); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceFreezeDurationHours"] = transformedMaintenanceFreezeDurationHours
	}

	transformedLocationHint, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocationHint(original["location_hint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocationHint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["locationHint"] = transformedLocationHint
	}

	transformedMaintenanceInterval, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMaintenanceInterval(original["maintenance_interval"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceInterval); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceInterval"] = transformedMaintenanceInterval
	}

	return transformed, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMachineType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesGuestAccelerators(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAcceleratorType, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesGuestAcceleratorsAcceleratorType(original["accelerator_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAcceleratorType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["acceleratorType"] = transformedAcceleratorType
		}

		transformedAcceleratorCount, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesGuestAcceleratorsAcceleratorCount(original["accelerator_count"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAcceleratorCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["acceleratorCount"] = transformedAcceleratorCount
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesGuestAcceleratorsAcceleratorType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesGuestAcceleratorsAcceleratorCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMinCpuPlatform(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocalSsds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDiskSizeGb, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocalSsdsDiskSizeGb(original["disk_size_gb"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDiskSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["diskSizeGb"] = transformedDiskSizeGb
		}

		transformedInterface, err := expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocalSsdsInterface(original["interface"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInterface); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["interface"] = transformedInterface
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocalSsdsDiskSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocalSsdsInterface(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMaintenanceFreezeDurationHours(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesLocationHint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesInstancePropertiesMaintenanceInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesTotalCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationSpecificSkuPropertiesSourceInstanceTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationAutoCreatedReservationsDeleteTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationAutoCreatedReservationsDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSeconds, err := expandComputeFutureReservationAutoCreatedReservationsDurationSeconds(original["seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["seconds"] = transformedSeconds
	}

	transformedNanos, err := expandComputeFutureReservationAutoCreatedReservationsDurationNanos(original["nanos"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNanos); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nanos"] = transformedNanos
	}

	return transformed, nil
}

func expandComputeFutureReservationAutoCreatedReservationsDurationSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationAutoCreatedReservationsDurationNanos(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeFutureReservationName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
