// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/tpuv2/QueuedResource.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package tpuv2

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const TpuV2QueuedResourceAssetType string = "tpu.googleapis.com/QueuedResource"

func ResourceConverterTpuV2QueuedResource() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: TpuV2QueuedResourceAssetType,
		Convert:   GetTpuV2QueuedResourceCaiObject,
	}
}

func GetTpuV2QueuedResourceCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//tpu.googleapis.com/projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetTpuV2QueuedResourceApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: TpuV2QueuedResourceAssetType,
			Resource: &cai.AssetResource{
				Version:              "v2alpha1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/tpu/v2alpha1/rest",
				DiscoveryName:        "QueuedResource",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetTpuV2QueuedResourceApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandTpuV2QueuedResourceName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	tpuProp, err := expandTpuV2QueuedResourceTpu(d.Get("tpu"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("tpu"); !tpgresource.IsEmptyValue(reflect.ValueOf(tpuProp)) && (ok || !reflect.DeepEqual(v, tpuProp)) {
		obj["tpu"] = tpuProp
	}

	return obj, nil
}

func expandTpuV2QueuedResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpu(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNodeSpec, err := expandTpuV2QueuedResourceTpuNodeSpec(original["node_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeSpec"] = transformedNodeSpec
	}

	return transformed, nil
}

func expandTpuV2QueuedResourceTpuNodeSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedParent, err := expandTpuV2QueuedResourceTpuNodeSpecParent(original["parent"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parent"] = transformedParent
		}

		transformedNodeId, err := expandTpuV2QueuedResourceTpuNodeSpecNodeId(original["node_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNodeId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["nodeId"] = transformedNodeId
		}

		transformedNode, err := expandTpuV2QueuedResourceTpuNodeSpecNode(original["node"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["node"] = transformedNode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecParent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRuntimeVersion, err := expandTpuV2QueuedResourceTpuNodeSpecNodeRuntimeVersion(original["runtime_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRuntimeVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runtimeVersion"] = transformedRuntimeVersion
	}

	transformedAcceleratorType, err := expandTpuV2QueuedResourceTpuNodeSpecNodeAcceleratorType(original["accelerator_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["acceleratorType"] = transformedAcceleratorType
	}

	transformedDescription, err := expandTpuV2QueuedResourceTpuNodeSpecNodeDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedNetworkConfig, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfig(original["network_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkConfig"] = transformedNetworkConfig
	}

	return transformed, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeRuntimeVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeAcceleratorType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNetwork, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedSubnetwork, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigSubnetwork(original["subnetwork"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubnetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subnetwork"] = transformedSubnetwork
	}

	transformedEnableExternalIps, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigEnableExternalIps(original["enable_external_ips"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableExternalIps"] = transformedEnableExternalIps
	}

	transformedCanIpForward, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigCanIpForward(original["can_ip_forward"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["canIpForward"] = transformedCanIpForward
	}

	transformedQueueCount, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigQueueCount(original["queue_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQueueCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["queueCount"] = transformedQueueCount
	}

	return transformed, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigSubnetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigEnableExternalIps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigCanIpForward(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigQueueCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
