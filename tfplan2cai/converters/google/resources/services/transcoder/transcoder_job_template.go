// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package transcoder

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const TranscoderJobTemplateAssetType string = "transcoder.googleapis.com/JobTemplate"

func ResourceConverterTranscoderJobTemplate() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: TranscoderJobTemplateAssetType,
		Convert:   GetTranscoderJobTemplateCaiObject,
	}
}

func GetTranscoderJobTemplateCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//transcoder.googleapis.com/projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetTranscoderJobTemplateApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: TranscoderJobTemplateAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/transcoder/v1/rest",
				DiscoveryName:        "JobTemplate",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetTranscoderJobTemplateApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	configProp, err := expandTranscoderJobTemplateConfig(d.Get("config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("config"); !tpgresource.IsEmptyValue(reflect.ValueOf(configProp)) && (ok || !reflect.DeepEqual(v, configProp)) {
		obj["config"] = configProp
	}
	labelsProp, err := expandTranscoderJobTemplateEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandTranscoderJobTemplateConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInputs, err := expandTranscoderJobTemplateConfigInputs(original["inputs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInputs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inputs"] = transformedInputs
	}

	transformedEditList, err := expandTranscoderJobTemplateConfigEditList(original["edit_list"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEditList); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["editList"] = transformedEditList
	}

	transformedElementaryStreams, err := expandTranscoderJobTemplateConfigElementaryStreams(original["elementary_streams"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedElementaryStreams); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["elementaryStreams"] = transformedElementaryStreams
	}

	transformedMuxStreams, err := expandTranscoderJobTemplateConfigMuxStreams(original["mux_streams"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMuxStreams); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["muxStreams"] = transformedMuxStreams
	}

	transformedManifests, err := expandTranscoderJobTemplateConfigManifests(original["manifests"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedManifests); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["manifests"] = transformedManifests
	}

	transformedOutput, err := expandTranscoderJobTemplateConfigOutput(original["output"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOutput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["output"] = transformedOutput
	}

	transformedAdBreaks, err := expandTranscoderJobTemplateConfigAdBreaks(original["ad_breaks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdBreaks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adBreaks"] = transformedAdBreaks
	}

	transformedPubsubDestination, err := expandTranscoderJobTemplateConfigPubsubDestination(original["pubsub_destination"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPubsubDestination); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pubsubDestination"] = transformedPubsubDestination
	}

	transformedOverlays, err := expandTranscoderJobTemplateConfigOverlays(original["overlays"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOverlays); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["overlays"] = transformedOverlays
	}

	transformedEncryptions, err := expandTranscoderJobTemplateConfigEncryptions(original["encryptions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEncryptions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["encryptions"] = transformedEncryptions
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigInputs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandTranscoderJobTemplateConfigInputsKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedUri, err := expandTranscoderJobTemplateConfigInputsUri(original["uri"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["uri"] = transformedUri
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigInputsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigInputsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigEditList(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandTranscoderJobTemplateConfigEditListKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedInputs, err := expandTranscoderJobTemplateConfigEditListInputs(original["inputs"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInputs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["inputs"] = transformedInputs
		}

		transformedStartTimeOffset, err := expandTranscoderJobTemplateConfigEditListStartTimeOffset(original["start_time_offset"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTimeOffset); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTimeOffset"] = transformedStartTimeOffset
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigEditListKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigEditListInputs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigEditListStartTimeOffset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandTranscoderJobTemplateConfigElementaryStreamsKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedVideoStream, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStream(original["video_stream"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedVideoStream); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["videoStream"] = transformedVideoStream
		}

		transformedAudioStream, err := expandTranscoderJobTemplateConfigElementaryStreamsAudioStream(original["audio_stream"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAudioStream); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["audioStream"] = transformedAudioStream
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStream(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedH264, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264(original["h264"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedH264); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["h264"] = transformedH264
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedWidthPixels, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264WidthPixels(original["width_pixels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWidthPixels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["widthPixels"] = transformedWidthPixels
	}

	transformedHeightPixels, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264HeightPixels(original["height_pixels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHeightPixels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["heightPixels"] = transformedHeightPixels
	}

	transformedFrameRate, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264FrameRate(original["frame_rate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFrameRate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["frameRate"] = transformedFrameRate
	}

	transformedBitrateBps, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264BitrateBps(original["bitrate_bps"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBitrateBps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bitrateBps"] = transformedBitrateBps
	}

	transformedPixelFormat, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264PixelFormat(original["pixel_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPixelFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pixelFormat"] = transformedPixelFormat
	}

	transformedRateControlMode, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264RateControlMode(original["rate_control_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRateControlMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rateControlMode"] = transformedRateControlMode
	}

	transformedCrfLevel, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264CrfLevel(original["crf_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCrfLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["crfLevel"] = transformedCrfLevel
	}

	transformedVbvSizeBits, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264VbvSizeBits(original["vbv_size_bits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVbvSizeBits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vbvSizeBits"] = transformedVbvSizeBits
	}

	transformedVbvFullnessBits, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264VbvFullnessBits(original["vbv_fullness_bits"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVbvFullnessBits); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vbvFullnessBits"] = transformedVbvFullnessBits
	}

	transformedEntropyCoder, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264EntropyCoder(original["entropy_coder"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntropyCoder); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["entropyCoder"] = transformedEntropyCoder
	}

	transformedProfile, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Profile(original["profile"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfile); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profile"] = transformedProfile
	}

	transformedPreset, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Preset(original["preset"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPreset); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["preset"] = transformedPreset
	}

	transformedGopDuration, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264GopDuration(original["gop_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGopDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gopDuration"] = transformedGopDuration
	}

	transformedSdr, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Sdr(original["sdr"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["sdr"] = transformedSdr
	}

	transformedHlg, err := expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Hlg(original["hlg"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["hlg"] = transformedHlg
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264WidthPixels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264HeightPixels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264FrameRate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264BitrateBps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264PixelFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264RateControlMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264CrfLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264VbvSizeBits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264VbvFullnessBits(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264EntropyCoder(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Profile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Preset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264GopDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Sdr(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsVideoStreamH264Hlg(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsAudioStream(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCodec, err := expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamCodec(original["codec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCodec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["codec"] = transformedCodec
	}

	transformedBitrateBps, err := expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamBitrateBps(original["bitrate_bps"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBitrateBps); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bitrateBps"] = transformedBitrateBps
	}

	transformedChannelCount, err := expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamChannelCount(original["channel_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedChannelCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["channelCount"] = transformedChannelCount
	}

	transformedChannelLayout, err := expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamChannelLayout(original["channel_layout"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedChannelLayout); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["channelLayout"] = transformedChannelLayout
	}

	transformedSampleRateHertz, err := expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamSampleRateHertz(original["sample_rate_hertz"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSampleRateHertz); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sampleRateHertz"] = transformedSampleRateHertz
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamCodec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamBitrateBps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamChannelCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamChannelLayout(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigElementaryStreamsAudioStreamSampleRateHertz(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigMuxStreams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandTranscoderJobTemplateConfigMuxStreamsKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedFileName, err := expandTranscoderJobTemplateConfigMuxStreamsFileName(original["file_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFileName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fileName"] = transformedFileName
		}

		transformedContainer, err := expandTranscoderJobTemplateConfigMuxStreamsContainer(original["container"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContainer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["container"] = transformedContainer
		}

		transformedElementaryStreams, err := expandTranscoderJobTemplateConfigMuxStreamsElementaryStreams(original["elementary_streams"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedElementaryStreams); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["elementaryStreams"] = transformedElementaryStreams
		}

		transformedSegmentSettings, err := expandTranscoderJobTemplateConfigMuxStreamsSegmentSettings(original["segment_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSegmentSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["segmentSettings"] = transformedSegmentSettings
		}

		transformedEncryptionId, err := expandTranscoderJobTemplateConfigMuxStreamsEncryptionId(original["encryption_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEncryptionId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["encryptionId"] = transformedEncryptionId
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsFileName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsContainer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsElementaryStreams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsSegmentSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSegmentDuration, err := expandTranscoderJobTemplateConfigMuxStreamsSegmentSettingsSegmentDuration(original["segment_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSegmentDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["segmentDuration"] = transformedSegmentDuration
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsSegmentSettingsSegmentDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigMuxStreamsEncryptionId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigManifests(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFileName, err := expandTranscoderJobTemplateConfigManifestsFileName(original["file_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFileName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["fileName"] = transformedFileName
		}

		transformedType, err := expandTranscoderJobTemplateConfigManifestsType(original["type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["type"] = transformedType
		}

		transformedMuxStreams, err := expandTranscoderJobTemplateConfigManifestsMuxStreams(original["mux_streams"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMuxStreams); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["muxStreams"] = transformedMuxStreams
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigManifestsFileName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigManifestsType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigManifestsMuxStreams(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOutput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandTranscoderJobTemplateConfigOutputUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigOutputUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigAdBreaks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedStartTimeOffset, err := expandTranscoderJobTemplateConfigAdBreaksStartTimeOffset(original["start_time_offset"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTimeOffset); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTimeOffset"] = transformedStartTimeOffset
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigAdBreaksStartTimeOffset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigPubsubDestination(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandTranscoderJobTemplateConfigPubsubDestinationTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigPubsubDestinationTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOverlays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedImage, err := expandTranscoderJobTemplateConfigOverlaysImage(original["image"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedImage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["image"] = transformedImage
		}

		transformedAnimations, err := expandTranscoderJobTemplateConfigOverlaysAnimations(original["animations"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAnimations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["animations"] = transformedAnimations
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigOverlaysImage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandTranscoderJobTemplateConfigOverlaysImageUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigOverlaysImageUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedAnimationFade, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFade(original["animation_fade"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedAnimationFade); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["animationFade"] = transformedAnimationFade
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFade(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedXy, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeXy(original["xy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedXy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["xy"] = transformedXy
	}

	transformedStartTimeOffset, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeStartTimeOffset(original["start_time_offset"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStartTimeOffset); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["startTimeOffset"] = transformedStartTimeOffset
	}

	transformedEndTimeOffset, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeEndTimeOffset(original["end_time_offset"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndTimeOffset); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endTimeOffset"] = transformedEndTimeOffset
	}

	transformedFadeType, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeFadeType(original["fade_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFadeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["fadeType"] = transformedFadeType
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeXy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedX, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeXyX(original["x"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedX); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["x"] = transformedX
	}

	transformedY, err := expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeXyY(original["y"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedY); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["y"] = transformedY
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeXyX(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeXyY(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeStartTimeOffset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeEndTimeOffset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigOverlaysAnimationsAnimationFadeFadeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigEncryptions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedId, err := expandTranscoderJobTemplateConfigEncryptionsId(original["id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["id"] = transformedId
		}

		transformedDrmSystems, err := expandTranscoderJobTemplateConfigEncryptionsDrmSystems(original["drm_systems"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDrmSystems); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["drmSystems"] = transformedDrmSystems
		}

		transformedAes128, err := expandTranscoderJobTemplateConfigEncryptionsAes128(original["aes128"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["aes128"] = transformedAes128
		}

		transformedSampleAes, err := expandTranscoderJobTemplateConfigEncryptionsSampleAes(original["sample_aes"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["sampleAes"] = transformedSampleAes
		}

		transformedMpegCenc, err := expandTranscoderJobTemplateConfigEncryptionsMpegCenc(original["mpeg_cenc"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMpegCenc); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["mpegCenc"] = transformedMpegCenc
		}

		transformedSecretManagerKeySource, err := expandTranscoderJobTemplateConfigEncryptionsSecretManagerKeySource(original["secret_manager_key_source"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSecretManagerKeySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["secretManagerKeySource"] = transformedSecretManagerKeySource
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTranscoderJobTemplateConfigEncryptionsId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigEncryptionsDrmSystems(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedWidevine, err := expandTranscoderJobTemplateConfigEncryptionsDrmSystemsWidevine(original["widevine"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["widevine"] = transformedWidevine
	}

	transformedFairplay, err := expandTranscoderJobTemplateConfigEncryptionsDrmSystemsFairplay(original["fairplay"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["fairplay"] = transformedFairplay
	}

	transformedPlayready, err := expandTranscoderJobTemplateConfigEncryptionsDrmSystemsPlayready(original["playready"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["playready"] = transformedPlayready
	}

	transformedClearkey, err := expandTranscoderJobTemplateConfigEncryptionsDrmSystemsClearkey(original["clearkey"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["clearkey"] = transformedClearkey
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsDrmSystemsWidevine(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsDrmSystemsFairplay(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsDrmSystemsPlayready(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsDrmSystemsClearkey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsAes128(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsSampleAes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsMpegCenc(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedScheme, err := expandTranscoderJobTemplateConfigEncryptionsMpegCencScheme(original["scheme"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScheme); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scheme"] = transformedScheme
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsMpegCencScheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateConfigEncryptionsSecretManagerKeySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretVersion, err := expandTranscoderJobTemplateConfigEncryptionsSecretManagerKeySourceSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandTranscoderJobTemplateConfigEncryptionsSecretManagerKeySourceSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTranscoderJobTemplateEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
