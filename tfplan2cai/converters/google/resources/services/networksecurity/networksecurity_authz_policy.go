// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networksecurity/AuthzPolicy.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networksecurity

import (
	"fmt"
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkSecurityAuthzPolicyAssetType string = "networksecurity.googleapis.com/AuthzPolicy"

func ResourceConverterNetworkSecurityAuthzPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: NetworkSecurityAuthzPolicyAssetType,
		Convert:   GetNetworkSecurityAuthzPolicyCaiObject,
	}
}

func GetNetworkSecurityAuthzPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//networksecurity.googleapis.com/projects/{{project}}/locations/{{location}}/authzPolicies/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetNetworkSecurityAuthzPolicyApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: NetworkSecurityAuthzPolicyAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/networksecurity/v1beta1/rest",
				DiscoveryName:        "AuthzPolicy",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetNetworkSecurityAuthzPolicyApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	descriptionProp, err := expandNetworkSecurityAuthzPolicyDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	targetProp, err := expandNetworkSecurityAuthzPolicyTarget(d.Get("target"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("target"); !tpgresource.IsEmptyValue(reflect.ValueOf(targetProp)) && (ok || !reflect.DeepEqual(v, targetProp)) {
		obj["target"] = targetProp
	}
	httpRulesProp, err := expandNetworkSecurityAuthzPolicyHttpRules(d.Get("http_rules"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("http_rules"); !tpgresource.IsEmptyValue(reflect.ValueOf(httpRulesProp)) && (ok || !reflect.DeepEqual(v, httpRulesProp)) {
		obj["httpRules"] = httpRulesProp
	}
	actionProp, err := expandNetworkSecurityAuthzPolicyAction(d.Get("action"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("action"); !tpgresource.IsEmptyValue(reflect.ValueOf(actionProp)) && (ok || !reflect.DeepEqual(v, actionProp)) {
		obj["action"] = actionProp
	}
	customProviderProp, err := expandNetworkSecurityAuthzPolicyCustomProvider(d.Get("custom_provider"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("custom_provider"); !tpgresource.IsEmptyValue(reflect.ValueOf(customProviderProp)) && (ok || !reflect.DeepEqual(v, customProviderProp)) {
		obj["customProvider"] = customProviderProp
	}
	labelsProp, err := expandNetworkSecurityAuthzPolicyEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	nameProp, err := expandNetworkSecurityAuthzPolicyName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	return obj, nil
}

func expandNetworkSecurityAuthzPolicyDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyTarget(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLoadBalancingScheme, err := expandNetworkSecurityAuthzPolicyTargetLoadBalancingScheme(original["load_balancing_scheme"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoadBalancingScheme); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["loadBalancingScheme"] = transformedLoadBalancingScheme
	}

	transformedResources, err := expandNetworkSecurityAuthzPolicyTargetResources(original["resources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["resources"] = transformedResources
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyTargetLoadBalancingScheme(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyTargetResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRules(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFrom, err := expandNetworkSecurityAuthzPolicyHttpRulesFrom(original["from"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFrom); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["from"] = transformedFrom
		}

		transformedTo, err := expandNetworkSecurityAuthzPolicyHttpRulesTo(original["to"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["to"] = transformedTo
		}

		transformedWhen, err := expandNetworkSecurityAuthzPolicyHttpRulesWhen(original["when"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedWhen); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["when"] = transformedWhen
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFrom(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSources, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSources(original["sources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sources"] = transformedSources
	}

	transformedNotSources, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSources(original["not_sources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNotSources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["notSources"] = transformedNotSources
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPrincipals, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipals(original["principals"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrincipals); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["principals"] = transformedPrincipals
		}

		transformedResources, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResources(original["resources"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resources"] = transformedResources
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipals(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsIgnoreCase(original["ignore_case"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ignoreCase"] = transformedIgnoreCase
		}

		transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsExact(original["exact"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exact"] = transformedExact
		}

		transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsPrefix(original["prefix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefix"] = transformedPrefix
		}

		transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsSuffix(original["suffix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suffix"] = transformedSuffix
		}

		transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsContains(original["contains"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["contains"] = transformedContains
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesPrincipalsContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTagValueIdSet, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesTagValueIdSet(original["tag_value_id_set"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTagValueIdSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tagValueIdSet"] = transformedTagValueIdSet
		}

		transformedIamServiceAccount, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccount(original["iam_service_account"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIamServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["iamServiceAccount"] = transformedIamServiceAccount
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesTagValueIdSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIds, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesTagValueIdSetIds(original["ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ids"] = transformedIds
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesTagValueIdSetIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountIgnoreCase(original["ignore_case"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreCase"] = transformedIgnoreCase
	}

	transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountExact(original["exact"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exact"] = transformedExact
	}

	transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountPrefix(original["prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["prefix"] = transformedPrefix
	}

	transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountSuffix(original["suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["suffix"] = transformedSuffix
	}

	transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountContains(original["contains"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contains"] = transformedContains
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromSourcesResourcesIamServiceAccountContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPrincipals, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipals(original["principals"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrincipals); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["principals"] = transformedPrincipals
		}

		transformedResources, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResources(original["resources"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["resources"] = transformedResources
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipals(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsIgnoreCase(original["ignore_case"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ignoreCase"] = transformedIgnoreCase
		}

		transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsExact(original["exact"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exact"] = transformedExact
		}

		transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsPrefix(original["prefix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefix"] = transformedPrefix
		}

		transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsSuffix(original["suffix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suffix"] = transformedSuffix
		}

		transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsContains(original["contains"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["contains"] = transformedContains
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesPrincipalsContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTagValueIdSet, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesTagValueIdSet(original["tag_value_id_set"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTagValueIdSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tagValueIdSet"] = transformedTagValueIdSet
		}

		transformedIamServiceAccount, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccount(original["iam_service_account"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIamServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["iamServiceAccount"] = transformedIamServiceAccount
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesTagValueIdSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIds, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesTagValueIdSetIds(original["ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ids"] = transformedIds
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesTagValueIdSetIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountIgnoreCase(original["ignore_case"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreCase"] = transformedIgnoreCase
	}

	transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountExact(original["exact"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exact"] = transformedExact
	}

	transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountPrefix(original["prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["prefix"] = transformedPrefix
	}

	transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountSuffix(original["suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["suffix"] = transformedSuffix
	}

	transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountContains(original["contains"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contains"] = transformedContains
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesFromNotSourcesResourcesIamServiceAccountContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesTo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOperations, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperations(original["operations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operations"] = transformedOperations
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedHeaderSet, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSet(original["header_set"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHeaderSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["headerSet"] = transformedHeaderSet
		}

		transformedHosts, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHosts(original["hosts"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHosts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hosts"] = transformedHosts
		}

		transformedPaths, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPaths(original["paths"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPaths); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["paths"] = transformedPaths
		}

		transformedMethods, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsMethods(original["methods"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMethods); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["methods"] = transformedMethods
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHeaders, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeaders(original["headers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHeaders); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["headers"] = transformedHeaders
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeaders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedValue, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueIgnoreCase(original["ignore_case"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ignoreCase"] = transformedIgnoreCase
	}

	transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueExact(original["exact"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["exact"] = transformedExact
	}

	transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValuePrefix(original["prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["prefix"] = transformedPrefix
	}

	transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueSuffix(original["suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["suffix"] = transformedSuffix
	}

	transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueContains(original["contains"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contains"] = transformedContains
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValuePrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHeaderSetHeadersValueContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHosts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsIgnoreCase(original["ignore_case"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ignoreCase"] = transformedIgnoreCase
		}

		transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsExact(original["exact"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exact"] = transformedExact
		}

		transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsPrefix(original["prefix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefix"] = transformedPrefix
		}

		transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsSuffix(original["suffix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suffix"] = transformedSuffix
		}

		transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsContains(original["contains"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["contains"] = transformedContains
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsHostsContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPaths(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedIgnoreCase, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsIgnoreCase(original["ignore_case"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIgnoreCase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ignoreCase"] = transformedIgnoreCase
		}

		transformedExact, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsExact(original["exact"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedExact); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["exact"] = transformedExact
		}

		transformedPrefix, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsPrefix(original["prefix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["prefix"] = transformedPrefix
		}

		transformedSuffix, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsSuffix(original["suffix"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suffix"] = transformedSuffix
		}

		transformedContains, err := expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsContains(original["contains"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedContains); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["contains"] = transformedContains
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsIgnoreCase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsExact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsPrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsPathsContains(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesToOperationsMethods(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyHttpRulesWhen(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyAction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyCustomProvider(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCloudIap, err := expandNetworkSecurityAuthzPolicyCustomProviderCloudIap(original["cloud_iap"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["cloudIap"] = transformedCloudIap
	}

	transformedAuthzExtension, err := expandNetworkSecurityAuthzPolicyCustomProviderAuthzExtension(original["authz_extension"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuthzExtension); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["authzExtension"] = transformedAuthzExtension
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyCustomProviderCloudIap(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})

	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	if isEnabled, ok := original["enabled"]; ok {
		if !isEnabled.(bool) {
			return nil, nil
		}
	}
	transformed := make(map[string]interface{})
	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyCustomProviderAuthzExtension(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedResources, err := expandNetworkSecurityAuthzPolicyCustomProviderAuthzExtensionResources(original["resources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResources); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["resources"] = transformedResources
	}

	return transformed, nil
}

func expandNetworkSecurityAuthzPolicyCustomProviderAuthzExtensionResources(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityAuthzPolicyEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkSecurityAuthzPolicyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return fmt.Sprintf("projects/%s/locations/%s/authzPolicies/%s", d.Get("project"), d.Get("location"), v), nil
}
