// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DiscoveryEngineDataStoreAssetType string = "{{location}}-discoveryengine.googleapis.com/DataStore"

func ResourceConverterDiscoveryEngineDataStore() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DiscoveryEngineDataStoreAssetType,
		Convert:   GetDiscoveryEngineDataStoreCaiObject,
	}
}

func GetDiscoveryEngineDataStoreCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-discoveryengine.googleapis.com/projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDiscoveryEngineDataStoreApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DiscoveryEngineDataStoreAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-discoveryengine/v1/rest",
				DiscoveryName:        "DataStore",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDiscoveryEngineDataStoreApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineDataStoreDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	industryVerticalProp, err := expandDiscoveryEngineDataStoreIndustryVertical(d.Get("industry_vertical"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("industry_vertical"); !tpgresource.IsEmptyValue(reflect.ValueOf(industryVerticalProp)) && (ok || !reflect.DeepEqual(v, industryVerticalProp)) {
		obj["industryVertical"] = industryVerticalProp
	}
	solutionTypesProp, err := expandDiscoveryEngineDataStoreSolutionTypes(d.Get("solution_types"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("solution_types"); !tpgresource.IsEmptyValue(reflect.ValueOf(solutionTypesProp)) && (ok || !reflect.DeepEqual(v, solutionTypesProp)) {
		obj["solutionTypes"] = solutionTypesProp
	}
	contentConfigProp, err := expandDiscoveryEngineDataStoreContentConfig(d.Get("content_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("content_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(contentConfigProp)) && (ok || !reflect.DeepEqual(v, contentConfigProp)) {
		obj["contentConfig"] = contentConfigProp
	}

	return obj, nil
}

func expandDiscoveryEngineDataStoreDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataStoreIndustryVertical(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataStoreSolutionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineDataStoreContentConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
