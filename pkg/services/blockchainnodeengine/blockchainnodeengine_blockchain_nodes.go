// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/blockchainnodeengine/BlockchainNodes.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package blockchainnodeengine

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = fmt.Sprintf
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = schema.Noop
	_ = validation.All
	_ = tgcresource.RemoveTerraformAttributionLabel
	_ = tpgresource.GetRegion
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
)

const BlockchainNodeEngineBlockchainNodeAssetType string = "blockchainnodeengine.googleapis.com/BlockchainNode"

const BlockchainNodeEngineBlockchainNodesSchemaName string = "google_blockchain_node_engine_blockchain_nodes"

func ResourceBlockchainNodeEngineBlockchainNodes() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"blockchain_node_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `ID of the requesting object.`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Location of Blockchain Node being created.`,
			},
			"blockchain_type": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ETHEREUM", ""}),
				Description:  `User-provided key-value pairs Possible values: ["ETHEREUM"]`,
			},
			"ethereum_details": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `User-provided key-value pairs`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"api_enable_admin": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: `Enables JSON-RPC access to functions in the admin namespace. Defaults to false.`,
						},
						"api_enable_debug": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: `Enables JSON-RPC access to functions in the debug namespace. Defaults to false.`,
						},
						"consensus_client": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"CONSENSUS_CLIENT_UNSPECIFIED", "LIGHTHOUSE", ""}),
							Description:  `The consensus client Possible values: ["CONSENSUS_CLIENT_UNSPECIFIED", "LIGHTHOUSE"]`,
						},
						"execution_client": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"EXECUTION_CLIENT_UNSPECIFIED", "GETH", "ERIGON", ""}),
							Description:  `The execution client Possible values: ["EXECUTION_CLIENT_UNSPECIFIED", "GETH", "ERIGON"]`,
						},
						"geth_details": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `User-provided key-value pairs`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"garbage_collection_mode": {
										Type:         schema.TypeString,
										Optional:     true,
										ForceNew:     true,
										ValidateFunc: verify.ValidateEnum([]string{"FULL", "ARCHIVE", ""}),
										Description:  `Blockchain garbage collection modes. Only applicable when NodeType is FULL or ARCHIVE. Possible values: ["FULL", "ARCHIVE"]`,
									},
								},
							},
						},
						"network": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"MAINNET", "TESTNET_GOERLI_PRATER", "TESTNET_SEPOLIA", ""}),
							Description:  `The Ethereum environment being accessed. Possible values: ["MAINNET", "TESTNET_GOERLI_PRATER", "TESTNET_SEPOLIA"]`,
						},
						"node_type": {
							Type:         schema.TypeString,
							Optional:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateEnum([]string{"LIGHT", "FULL", "ARCHIVE", ""}),
							Description:  `The type of Ethereum node. Possible values: ["LIGHT", "FULL", "ARCHIVE"]`,
						},
						"validator_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for validator-related parameters on the beacon client, and for any managed validator client.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"mev_relay_urls": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `URLs for MEV-relay services to use for block building. When set, a managed MEV-boost service is configured on the beacon client.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `User-provided key-value pairs


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"connection_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The connection information through which to interact with a blockchain node.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which the blockchain node was first created.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp at which the blockchain node was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
