// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/backupdr/BackupPlan.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/cai2hcl/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package backupdr

import (
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/cai2hcl/converters/utils"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/cai2hcl/models"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/caiasset"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
)

type BackupDRBackupPlanCai2hclConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewBackupDRBackupPlanCai2hclConverter(provider *schema.Provider) models.Cai2hclConverter {
	schema := provider.ResourcesMap[BackupDRBackupPlanSchemaName].Schema

	return &BackupDRBackupPlanCai2hclConverter{
		name:   BackupDRBackupPlanSchemaName,
		schema: schema,
	}
}

// Convert converts asset to HCL resource blocks.
func (c *BackupDRBackupPlanCai2hclConverter) Convert(asset caiasset.Asset) ([]*models.TerraformResourceBlock, error) {
	var blocks []*models.TerraformResourceBlock
	block, err := c.convertResourceData(asset)
	if err != nil {
		return nil, err
	}
	blocks = append(blocks, block)
	return blocks, nil
}

func (c *BackupDRBackupPlanCai2hclConverter) convertResourceData(asset caiasset.Asset) (*models.TerraformResourceBlock, error) {
	if asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	var err error
	res := asset.Resource.Data
	config := transport.NewConfig()
	d := &schema.ResourceData{}

	assetNameParts := strings.Split(asset.Name, "/")
	hclBlockName := assetNameParts[len(assetNameParts)-1]

	hclData := make(map[string]interface{})

	res, hclData, err = resourceBackupDRBackupPlanTgcDecoder(d, config, res, hclData)
	if err != nil {
		return nil, err
	}

	outputFields := map[string]struct{}{"backup_vault_service_account": struct{}{}, "create_time": struct{}{}, "name": struct{}{}, "supported_resource_types": struct{}{}, "update_time": struct{}{}}
	utils.ParseUrlParamValuesFromAssetName(asset.Name, "//backupdr.googleapis.com/projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan_id}}", outputFields, hclData)

	hclData["description"] = flattenBackupDRBackupPlanDescription(res["description"], d, config)
	hclData["backup_vault"] = flattenBackupDRBackupPlanBackupVault(res["backupVault"], d, config)
	hclData["resource_type"] = flattenBackupDRBackupPlanResourceType(res["resourceType"], d, config)
	hclData["backup_rules"] = flattenBackupDRBackupPlanBackupRules(res["backupRules"], d, config)
	hclData["log_retention_days"] = flattenBackupDRBackupPlanLogRetentionDays(res["logRetentionDays"], d, config)

	ctyVal, err := utils.MapToCtyValWithSchema(hclData, c.schema)
	if err != nil {
		return nil, err
	}
	return &models.TerraformResourceBlock{
		Labels: []string{c.name, hclBlockName},
		Value:  ctyVal,
	}, nil
}

func flattenBackupDRBackupPlanDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupVault(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanResourceType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"rule_id":               flattenBackupDRBackupPlanBackupRulesRuleId(original["ruleId"], d, config),
			"backup_retention_days": flattenBackupDRBackupPlanBackupRulesBackupRetentionDays(original["backupRetentionDays"], d, config),
			"standard_schedule":     flattenBackupDRBackupPlanBackupRulesStandardSchedule(original["standardSchedule"], d, config),
		})
	}
	return transformed
}

func flattenBackupDRBackupPlanBackupRulesRuleId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesBackupRetentionDays(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}
	if v == nil {
		return 0
	}

	return v // let terraform core handle it otherwise
}

func flattenBackupDRBackupPlanBackupRulesStandardSchedule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["recurrence_type"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleRecurrenceType(original["recurrenceType"], d, config)
	transformed["hourly_frequency"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleHourlyFrequency(original["hourlyFrequency"], d, config)
	transformed["days_of_week"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleDaysOfWeek(original["daysOfWeek"], d, config)
	transformed["days_of_month"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleDaysOfMonth(original["daysOfMonth"], d, config)
	transformed["week_day_of_month"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleWeekDayOfMonth(original["weekDayOfMonth"], d, config)
	transformed["months"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleMonths(original["months"], d, config)
	transformed["time_zone"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleTimeZone(original["timeZone"], d, config)
	transformed["backup_window"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleBackupWindow(original["backupWindow"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleRecurrenceType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleHourlyFrequency(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleDaysOfWeek(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleDaysOfMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleWeekDayOfMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["week_of_month"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleWeekDayOfMonthWeekOfMonth(original["weekOfMonth"], d, config)
	transformed["day_of_week"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleWeekDayOfMonthDayOfWeek(original["dayOfWeek"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleWeekDayOfMonthWeekOfMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleWeekDayOfMonthDayOfWeek(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleMonths(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleBackupWindow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["start_hour_of_day"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleBackupWindowStartHourOfDay(original["startHourOfDay"], d, config)
	transformed["end_hour_of_day"] =
		flattenBackupDRBackupPlanBackupRulesStandardScheduleBackupWindowEndHourOfDay(original["endHourOfDay"], d, config)
	if tgcresource.AllValuesAreNil(transformed) {
		return nil
	}
	return []interface{}{transformed}
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleBackupWindowStartHourOfDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}
	if v == nil {
		return 0
	}

	return v // let terraform core handle it otherwise
}

func flattenBackupDRBackupPlanBackupRulesStandardScheduleBackupWindowEndHourOfDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenBackupDRBackupPlanLogRetentionDays(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func resourceBackupDRBackupPlanTgcDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}, hclData map[string]interface{}) (map[string]interface{}, map[string]interface{}, error) {
	// startHourOfDay is missing in CAI, but has default value 0 in API object
	if rules, ok := res["backupRules"].([]interface{}); ok {
		for _, raw := range rules {
			if rule, ok := raw.(map[string]interface{}); ok {
				if raw, ok := rule["standardSchedule"]; ok {
					if ss, ok := raw.(map[string]interface{}); ok {
						if raw, ok := ss["backupWindow"]; ok {
							if bw, ok := raw.(map[string]interface{}); ok {
								if _, ok := ss["startHourOfDay"]; !ok {
									bw["startHourOfDay"] = 0
								}
							}
						}
					}
				}
			}
		}
	}

	return res, hclData, nil
}
