// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/storageinsights/DatasetConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package storageinsights

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const StorageInsightsDatasetConfigAssetType string = "storageinsights.googleapis.com/DatasetConfig"

func ResourceConverterStorageInsightsDatasetConfig() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: StorageInsightsDatasetConfigAssetType,
		Convert:   GetStorageInsightsDatasetConfigCaiObject,
	}
}

func GetStorageInsightsDatasetConfigCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//storageinsights.googleapis.com/projects/{{project}}/locations/{{location}}/datasetConfigs/{{dataset_config_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetStorageInsightsDatasetConfigApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: StorageInsightsDatasetConfigAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/storageinsights/v1/rest",
				DiscoveryName:        "DatasetConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetStorageInsightsDatasetConfigApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	organizationNumberProp, err := expandStorageInsightsDatasetConfigOrganizationNumber(d.Get("organization_number"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("organization_number"); !tpgresource.IsEmptyValue(reflect.ValueOf(organizationNumberProp)) && (ok || !reflect.DeepEqual(v, organizationNumberProp)) {
		obj["organizationNumber"] = organizationNumberProp
	}
	includeNewlyCreatedBucketsProp, err := expandStorageInsightsDatasetConfigIncludeNewlyCreatedBuckets(d.Get("include_newly_created_buckets"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("include_newly_created_buckets"); !tpgresource.IsEmptyValue(reflect.ValueOf(includeNewlyCreatedBucketsProp)) && (ok || !reflect.DeepEqual(v, includeNewlyCreatedBucketsProp)) {
		obj["includeNewlyCreatedBuckets"] = includeNewlyCreatedBucketsProp
	}
	retentionPeriodDaysProp, err := expandStorageInsightsDatasetConfigRetentionPeriodDays(d.Get("retention_period_days"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("retention_period_days"); !tpgresource.IsEmptyValue(reflect.ValueOf(retentionPeriodDaysProp)) && (ok || !reflect.DeepEqual(v, retentionPeriodDaysProp)) {
		obj["retentionPeriodDays"] = retentionPeriodDaysProp
	}
	identityProp, err := expandStorageInsightsDatasetConfigIdentity(d.Get("identity"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("identity"); !tpgresource.IsEmptyValue(reflect.ValueOf(identityProp)) && (ok || !reflect.DeepEqual(v, identityProp)) {
		obj["identity"] = identityProp
	}
	descriptionProp, err := expandStorageInsightsDatasetConfigDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	sourceProjectsProp, err := expandStorageInsightsDatasetConfigSourceProjects(d.Get("source_projects"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("source_projects"); !tpgresource.IsEmptyValue(reflect.ValueOf(sourceProjectsProp)) && (ok || !reflect.DeepEqual(v, sourceProjectsProp)) {
		obj["sourceProjects"] = sourceProjectsProp
	}
	sourceFoldersProp, err := expandStorageInsightsDatasetConfigSourceFolders(d.Get("source_folders"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("source_folders"); !tpgresource.IsEmptyValue(reflect.ValueOf(sourceFoldersProp)) && (ok || !reflect.DeepEqual(v, sourceFoldersProp)) {
		obj["sourceFolders"] = sourceFoldersProp
	}
	organizationScopeProp, err := expandStorageInsightsDatasetConfigOrganizationScope(d.Get("organization_scope"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("organization_scope"); !tpgresource.IsEmptyValue(reflect.ValueOf(organizationScopeProp)) && (ok || !reflect.DeepEqual(v, organizationScopeProp)) {
		obj["organizationScope"] = organizationScopeProp
	}
	includeCloudStorageLocationsProp, err := expandStorageInsightsDatasetConfigIncludeCloudStorageLocations(d.Get("include_cloud_storage_locations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("include_cloud_storage_locations"); !tpgresource.IsEmptyValue(reflect.ValueOf(includeCloudStorageLocationsProp)) && (ok || !reflect.DeepEqual(v, includeCloudStorageLocationsProp)) {
		obj["includeCloudStorageLocations"] = includeCloudStorageLocationsProp
	}
	excludeCloudStorageLocationsProp, err := expandStorageInsightsDatasetConfigExcludeCloudStorageLocations(d.Get("exclude_cloud_storage_locations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("exclude_cloud_storage_locations"); !tpgresource.IsEmptyValue(reflect.ValueOf(excludeCloudStorageLocationsProp)) && (ok || !reflect.DeepEqual(v, excludeCloudStorageLocationsProp)) {
		obj["excludeCloudStorageLocations"] = excludeCloudStorageLocationsProp
	}
	includeCloudStorageBucketsProp, err := expandStorageInsightsDatasetConfigIncludeCloudStorageBuckets(d.Get("include_cloud_storage_buckets"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("include_cloud_storage_buckets"); !tpgresource.IsEmptyValue(reflect.ValueOf(includeCloudStorageBucketsProp)) && (ok || !reflect.DeepEqual(v, includeCloudStorageBucketsProp)) {
		obj["includeCloudStorageBuckets"] = includeCloudStorageBucketsProp
	}
	excludeCloudStorageBucketsProp, err := expandStorageInsightsDatasetConfigExcludeCloudStorageBuckets(d.Get("exclude_cloud_storage_buckets"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("exclude_cloud_storage_buckets"); !tpgresource.IsEmptyValue(reflect.ValueOf(excludeCloudStorageBucketsProp)) && (ok || !reflect.DeepEqual(v, excludeCloudStorageBucketsProp)) {
		obj["excludeCloudStorageBuckets"] = excludeCloudStorageBucketsProp
	}

	return obj, nil
}

func expandStorageInsightsDatasetConfigOrganizationNumber(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigIncludeNewlyCreatedBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigRetentionPeriodDays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigIdentity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandStorageInsightsDatasetConfigIdentityName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedType, err := expandStorageInsightsDatasetConfigIdentityType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigIdentityName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigIdentityType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigSourceProjects(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectNumbers, err := expandStorageInsightsDatasetConfigSourceProjectsProjectNumbers(original["project_numbers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectNumbers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectNumbers"] = transformedProjectNumbers
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigSourceProjectsProjectNumbers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigSourceFolders(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFolderNumbers, err := expandStorageInsightsDatasetConfigSourceFoldersFolderNumbers(original["folder_numbers"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFolderNumbers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["folderNumbers"] = transformedFolderNumbers
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigSourceFoldersFolderNumbers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigOrganizationScope(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigIncludeCloudStorageLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocations, err := expandStorageInsightsDatasetConfigIncludeCloudStorageLocationsLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigIncludeCloudStorageLocationsLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigExcludeCloudStorageLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocations, err := expandStorageInsightsDatasetConfigExcludeCloudStorageLocationsLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigExcludeCloudStorageLocationsLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigIncludeCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCloudStorageBuckets, err := expandStorageInsightsDatasetConfigIncludeCloudStorageBucketsCloudStorageBuckets(original["cloud_storage_buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudStorageBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudStorageBuckets"] = transformedCloudStorageBuckets
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigIncludeCloudStorageBucketsCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBucketName, err := expandStorageInsightsDatasetConfigIncludeCloudStorageBucketsCloudStorageBucketsBucketName(original["bucket_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBucketName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bucketName"] = transformedBucketName
		}

		transformedBucketPrefixRegex, err := expandStorageInsightsDatasetConfigIncludeCloudStorageBucketsCloudStorageBucketsBucketPrefixRegex(original["bucket_prefix_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBucketPrefixRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bucketPrefixRegex"] = transformedBucketPrefixRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandStorageInsightsDatasetConfigIncludeCloudStorageBucketsCloudStorageBucketsBucketName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigIncludeCloudStorageBucketsCloudStorageBucketsBucketPrefixRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigExcludeCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCloudStorageBuckets, err := expandStorageInsightsDatasetConfigExcludeCloudStorageBucketsCloudStorageBuckets(original["cloud_storage_buckets"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCloudStorageBuckets); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cloudStorageBuckets"] = transformedCloudStorageBuckets
	}

	return transformed, nil
}

func expandStorageInsightsDatasetConfigExcludeCloudStorageBucketsCloudStorageBuckets(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedBucketName, err := expandStorageInsightsDatasetConfigExcludeCloudStorageBucketsCloudStorageBucketsBucketName(original["bucket_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBucketName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bucketName"] = transformedBucketName
		}

		transformedBucketPrefixRegex, err := expandStorageInsightsDatasetConfigExcludeCloudStorageBucketsCloudStorageBucketsBucketPrefixRegex(original["bucket_prefix_regex"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBucketPrefixRegex); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["bucketPrefixRegex"] = transformedBucketPrefixRegex
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandStorageInsightsDatasetConfigExcludeCloudStorageBucketsCloudStorageBucketsBucketName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandStorageInsightsDatasetConfigExcludeCloudStorageBucketsCloudStorageBucketsBucketPrefixRegex(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
