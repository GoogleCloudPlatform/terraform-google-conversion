// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/compute/SnapshotSettings.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package compute

import (
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ComputeSnapshotSettingsAssetType string = "compute.googleapis.com/SnapshotSettings"

func ResourceConverterComputeSnapshotSettings() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ComputeSnapshotSettingsAssetType,
		Convert:   GetComputeSnapshotSettingsCaiObject,
	}
}

func GetComputeSnapshotSettingsCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//compute.googleapis.com/projects/{{project}}/global/snapshotSettings")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetComputeSnapshotSettingsApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ComputeSnapshotSettingsAssetType,
			Resource: &cai.AssetResource{
				Version:              "beta",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/compute/beta/rest",
				DiscoveryName:        "SnapshotSettings",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetComputeSnapshotSettingsApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	storageLocationProp, err := expandComputeSnapshotSettingsStorageLocation(d.Get("storage_location"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("storage_location"); !tpgresource.IsEmptyValue(reflect.ValueOf(storageLocationProp)) && (ok || !reflect.DeepEqual(v, storageLocationProp)) {
		obj["storageLocation"] = storageLocationProp
	}

	return resourceComputeSnapshotSettingsEncoder(d, config, obj)
}

func resourceComputeSnapshotSettingsEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	if storageLocation, ok := obj["storageLocation"].(map[string]interface{}); ok {
		if _, ok := storageLocation["locations"]; !ok {
			storageLocation["locations"] = nil
		}
	}

	return obj, nil
}

func expandComputeSnapshotSettingsStorageLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPolicy, err := expandComputeSnapshotSettingsStorageLocationPolicy(original["policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["policy"] = transformedPolicy
	}

	transformedLocations, err := expandComputeSnapshotSettingsStorageLocationLocations(original["locations"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocations); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["locations"] = transformedLocations
	}

	return transformed, nil
}

func expandComputeSnapshotSettingsStorageLocationPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandComputeSnapshotSettingsStorageLocationLocations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandComputeSnapshotSettingsStorageLocationLocationsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["name"] = transformedName
		}

		transformedLocation, err := tpgresource.ExpandString(original["location"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedLocation] = transformed
	}
	return m, nil
}

func expandComputeSnapshotSettingsStorageLocationLocationsName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
