// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/alloydb/Instance.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package alloydb

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

const AlloydbInstanceAssetType string = "alloydb.googleapis.com/Instance"

const AlloydbInstanceSchemaName string = "google_alloydb_instance"

func ResourceAlloydbInstance() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"cluster": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
				Description: `Identifies the alloydb cluster. Must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the alloydb instance.`,
			},
			"instance_type": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidateEnum([]string{"PRIMARY", "READ_POOL", "SECONDARY"}),
				Description: `The type of the instance.
If the instance type is READ_POOL, provide the associated PRIMARY/SECONDARY instance in the 'depends_on' meta-data attribute.
If the instance type is SECONDARY, point to the cluster_type of the associated secondary cluster instead of mentioning SECONDARY.
Example: {instance_type = google_alloydb_cluster.<secondary_cluster_name>.cluster_type} instead of {instance_type = SECONDARY}
If the instance type is SECONDARY, the terraform delete instance operation does not delete the secondary instance but abandons it instead.
Use deletion_policy = "FORCE" in the associated secondary cluster and delete the cluster forcefully to delete the secondary cluster as well its associated secondary instance.
Users can undo the delete secondary instance action by importing the deleted secondary instance by calling terraform import. Possible values: ["PRIMARY", "READ_POOL", "SECONDARY"]`,
			},
			"activation_policy": {
				Type:         schema.TypeString,
				Computed:     true,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ACTIVATION_POLICY_UNSPECIFIED", "ALWAYS", "NEVER", ""}),
				Description: `'Specifies whether an instance needs to spin up. Once the instance is
active, the activation policy can be updated to the 'NEVER' to stop the
instance. Likewise, the activation policy can be updated to 'ALWAYS' to
start the instance.
There are restrictions around when an instance can/cannot be activated (for
example, a read pool instance should be stopped before stopping primary
etc.). Please refer to the API documentation for more details.
Possible values are: 'ACTIVATION_POLICY_UNSPECIFIED', 'ALWAYS', 'NEVER'.' Possible values: ["ACTIVATION_POLICY_UNSPECIFIED", "ALWAYS", "NEVER"]`,
			},
			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"availability_type": {
				Type:         schema.TypeString,
				Computed:     true,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"AVAILABILITY_TYPE_UNSPECIFIED", "ZONAL", "REGIONAL", ""}),
				Description: `'Availability type of an Instance. Defaults to REGIONAL for both primary and read instances.
Note that primary and read instances can have different availability types.
Primary instances can be either ZONAL or REGIONAL. Read Pool instances can also be either ZONAL or REGIONAL.
Read pools of size 1 can only have zonal availability. Read pools with a node count of 2 or more
can have regional availability (nodes are present in 2 or more zones in a region).
Possible values are: 'AVAILABILITY_TYPE_UNSPECIFIED', 'ZONAL', 'REGIONAL'.' Possible values: ["AVAILABILITY_TYPE_UNSPECIFIED", "ZONAL", "REGIONAL"]`,
			},
			"client_connection_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Client connection specific configurations.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"require_connectors": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Configuration to enforce connectors only (ex: AuthProxy) connections to the database.`,
						},
						"ssl_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `SSL config option for this instance.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ssl_mode": {
										Type:         schema.TypeString,
										Computed:     true,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"ENCRYPTED_ONLY", "ALLOW_UNENCRYPTED_AND_ENCRYPTED", ""}),
										Description:  `SSL mode. Specifies client-server SSL/TLS connection behavior. Possible values: ["ENCRYPTED_ONLY", "ALLOW_UNENCRYPTED_AND_ENCRYPTED"]`,
									},
								},
							},
						},
					},
				},
			},
			"database_flags": {
				Type:        schema.TypeMap,
				Computed:    true,
				Optional:    true,
				Description: `Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `User-settable and human-readable display name for the Instance.`,
			},
			"gce_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.`,
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `User-defined labels for the alloydb instance.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"machine_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Configurations for the machines that host the underlying database engine.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cpu_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Optional:    true,
							Description: `The number of CPU's in the VM instance.`,
						},
						"machine_type": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `Machine type of the VM instance.
E.g. "n2-highmem-4", "n2-highmem-8", "c4a-highmem-4-lssd".
'cpu_count' must match the number of vCPUs in the machine type.`,
						},
					},
				},
			},
			"network_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Instance level network configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allocated_ip_range_override": {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
							Description: `Name of the allocated IP range for the private IP AlloyDB instance, for example: "google-managed-services-default".
If set, the instance IPs will be created from this allocated range and will override the IP range used by the parent cluster.
The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?.`,
						},
						"authorized_external_networks": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A list of external networks authorized to access this instance. This
field is only allowed to be set when 'enable_public_ip' is set to
true.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cidr_range": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `CIDR range for one authorized network of the instance.`,
									},
								},
							},
							RequiredWith: []string{"network_config.0.enable_public_ip"},
						},
						"enable_outbound_public_ip": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Enabling outbound public ip for the instance.`,
						},
						"enable_public_ip": {
							Type:     schema.TypeBool,
							Optional: true,
							Description: `Enabling public ip for the instance. If a user wishes to disable this,
please also clear the list of the authorized external networks set on
the same instance.`,
						},
					},
				},
			},
			"observability_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Configuration for enhanced query insights.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"assistive_experiences_enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether assistive experiences are enabled for this AlloyDB instance.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Observability feature status for an instance.`,
						},
						"max_query_string_length": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Query string length. The default value is 10240. Any integer between 1024 and 100000 is considered valid.`,
						},
						"preserve_comments": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Preserve comments in the query string.`,
						},
						"query_plans_per_minute": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 200 is considered valid.`,
						},
						"record_application_tags": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Record application tags for an instance. This flag is turned "on" by default.`,
						},
						"track_active_queries": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Track actively running queries. If not set, default value is "off".`,
						},
						"track_wait_event_types": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Record wait event types during query execution for an instance.`,
						},
						"track_wait_events": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Record wait events during query execution for an instance.`,
						},
					},
				},
			},
			"psc_instance_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Configuration for Private Service Connect (PSC) for the instance.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allowed_consumer_projects": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `List of consumer projects that are allowed to create PSC endpoints to service-attachments to this instance.
These should be specified as project numbers only.`,
							Elem: &schema.Schema{
								Type:         schema.TypeString,
								ValidateFunc: verify.ValidateRegexp(`^\d+$`),
							},
						},
						"psc_auto_connections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configurations for setting up PSC service automation.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"consumer_network": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The consumer network for the PSC service automation, example:
"projects/vpc-host-project/global/networks/default".
The consumer network might be hosted a different project than the
consumer project. The API expects the consumer project specified to be
the project ID (and not the project number)`,
									},
									"consumer_project": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The consumer project to which the PSC service automation endpoint will
be created. The API expects the consumer project to be the project ID(
and not the project number).`,
									},
								},
							},
						},
						"psc_interface_configs": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Configurations for setting up PSC interfaces attached to the instance
which are used for outbound connectivity. Currently, AlloyDB supports only 0 or 1 PSC interface.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"network_attachment_resource": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `The network attachment resource created in the consumer project to which the PSC interface will be linked.
This is of the format: "projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}".
The network attachment must be in the same region as the instance.`,
									},
								},
							},
						},
					},
				},
			},
			"query_insights_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Configuration for query insights.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"query_plans_per_minute": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.`,
						},
						"query_string_length": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.`,
						},
						"record_application_tags": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Record application tags for an instance. This flag is turned "on" by default.`,
						},
						"record_client_address": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Record client address for an instance. Client address is PII information. This flag is turned "on" by default.`,
						},
					},
				},
			},
			"read_pool_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Read pool specific config. If the instance type is READ_POOL, this configuration must be provided.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"node_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `Read capacity, i.e. number of nodes in a read pool instance.`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the Instance was created in UTC.`,
			},
			"effective_annotations": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"ip_address": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The IP address for the Instance. This is the connection endpoint for an end-user application.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The name of the instance resource.`,
			},
			"outbound_public_ip_addresses": {
				Type:     schema.TypeList,
				Computed: true,
				Description: `The outbound public IP addresses for the instance. This is available ONLY when
networkConfig.enableOutboundPublicIp is set to true. These IP addresses are used
for outbound connections.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"public_ip_address": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The public IP addresses for the Instance. This is available ONLY when
networkConfig.enablePublicIp is set to true. This is the connection
endpoint for an end-user application.`,
			},
			"reconciling": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The current state of the alloydb instance.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The system-generated UID of the resource.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the Instance was updated in UTC.`,
			},
		},
		UseJSONNumber: true,
	}
}
