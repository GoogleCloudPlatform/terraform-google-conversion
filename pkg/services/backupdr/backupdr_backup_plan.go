// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/backupdr/BackupPlan.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc_next/services/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package backupdr

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/pkg/verify"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = fmt.Sprintf
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = schema.Noop
	_ = validation.All
	_ = tgcresource.RemoveTerraformAttributionLabel
	_ = tpgresource.GetRegion
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
)

const BackupDRBackupPlanAssetType string = "backupdr.googleapis.com/BackupPlan"

const BackupDRBackupPlanSchemaName string = "google_backup_dr_backup_plan"

func ResourceBackupDRBackupPlan() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"backup_rules": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `The backup rules for this 'BackupPlan'. There must be at least one 'BackupRule' message.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"backup_retention_days": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: `Configures the duration for which backup data will be kept. The value should be greater than or equal to minimum enforced retention of the backup vault.`,
						},
						"rule_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The unique ID of this 'BackupRule'. The 'rule_id' is unique per 'BackupPlan'.`,
						},
						"standard_schedule": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `StandardSchedule defines a schedule that runs within the confines of a defined window of days.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"recurrence_type": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: verify.ValidateEnum([]string{"HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"}),
										Description:  `RecurrenceType enumerates the applicable periodicity for the schedule. Possible values: ["HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"]`,
									},
									"time_zone": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The time zone to be used when interpreting the schedule.`,
									},
									"backup_window": {
										Type:     schema.TypeList,
										Optional: true,
										Description: `A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
'NOT_RUN' if they do not start by the end of the window.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"start_hour_of_day": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: `The hour of the day (0-23) when the window starts, for example, if the value of the start hour of the day is 6, that means the backup window starts at 6:00.`,
												},
												"end_hour_of_day": {
													Type:     schema.TypeInt,
													Optional: true,
													Description: `The hour of the day (1-24) when the window ends, for example, if the value of end hour of the day is 10, that means the backup window end time is 10:00.
The end hour of the day should be greater than the start`,
												},
											},
										},
									},
									"days_of_month": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies days of months like 1, 5, or 14 on which jobs will run.`,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
									"days_of_week": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for 'recurrence_type', 'WEEKLY' and is not applicable otherwise. Possible values: ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]`,
										Elem: &schema.Schema{
											Type:         schema.TypeString,
											ValidateFunc: verify.ValidateEnum([]string{"DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"}),
										},
									},
									"hourly_frequency": {
										Type:     schema.TypeInt,
										Optional: true,
										Description: `Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
This is required for 'recurrence_type', 'HOURLY' and is not applicable otherwise.`,
									},
									"months": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies values of months Possible values: ["MONTH_UNSPECIFIED", "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"]`,
										Elem: &schema.Schema{
											Type:         schema.TypeString,
											ValidateFunc: verify.ValidateEnum([]string{"MONTH_UNSPECIFIED", "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"}),
										},
									},
									"week_day_of_month": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"day_of_week": {
													Type:         schema.TypeString,
													Required:     true,
													ValidateFunc: verify.ValidateEnum([]string{"DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"}),
													Description:  `Specifies the day of the week. Possible values: ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]`,
												},
												"week_of_month": {
													Type:         schema.TypeString,
													Required:     true,
													ValidateFunc: verify.ValidateEnum([]string{"WEEK_OF_MONTH_UNSPECIFIED", "FIRST", "SECOND", "THIRD", "FOURTH", "LAST"}),
													Description:  `WeekOfMonth enumerates possible weeks in the month, e.g. the first, third, or last week of the month. Possible values: ["WEEK_OF_MONTH_UNSPECIFIED", "FIRST", "SECOND", "THIRD", "FOURTH", "LAST"]`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"backup_vault": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
				Description:      `Backup vault where the backups gets stored using this Backup plan.`,
			},
			"backup_plan_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the backup plan`,
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location for the backup plan`,
			},
			"resource_type": {
				Type:     schema.TypeString,
				Required: true,
				Description: `The resource type to which the 'BackupPlan' will be applied.
Examples include, "compute.googleapis.com/Instance", "compute.googleapis.com/Disk", "sqladmin.googleapis.com/Instance" and "storage.googleapis.com/Bucket".`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The description allows for additional details about 'BackupPlan' and its use cases to be provided.`,
				Default:     "",
			},
			"log_retention_days": {
				Type:        schema.TypeInt,
				Optional:    true,
				ForceNew:    true,
				Description: `This is only applicable for CloudSql resource. Days for which logs will be stored. This value should be greater than or equal to minimum enforced log retention duration of the backup vault.`,
			},
			"backup_vault_service_account": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `When the 'BackupPlan' was created.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The name of backup plan resource created`,
			},
			"supported_resource_types": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of all resource types to which the 'BackupPlan' can be applied.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `When the 'BackupPlan' was last updated.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}
