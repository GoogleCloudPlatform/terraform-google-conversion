// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package oracledatabase

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const OracleDatabaseAutonomousDatabaseAssetType string = "oracledatabase.googleapis.com/AutonomousDatabase"

func ResourceConverterOracleDatabaseAutonomousDatabase() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: OracleDatabaseAutonomousDatabaseAssetType,
		Convert:   GetOracleDatabaseAutonomousDatabaseCaiObject,
	}
}

func GetOracleDatabaseAutonomousDatabaseCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//oracledatabase.googleapis.com/projects/{{project}}/locations/{{location}}/autonomousDatabases/{{autonomous_database_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetOracleDatabaseAutonomousDatabaseApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: OracleDatabaseAutonomousDatabaseAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/oracledatabase/v1/rest",
				DiscoveryName:        "AutonomousDatabase",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetOracleDatabaseAutonomousDatabaseApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	databaseProp, err := expandOracleDatabaseAutonomousDatabaseDatabase(d.Get("database"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("database"); !tpgresource.IsEmptyValue(reflect.ValueOf(databaseProp)) && (ok || !reflect.DeepEqual(v, databaseProp)) {
		obj["database"] = databaseProp
	}
	displayNameProp, err := expandOracleDatabaseAutonomousDatabaseDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	adminPasswordProp, err := expandOracleDatabaseAutonomousDatabaseAdminPassword(d.Get("admin_password"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("admin_password"); !tpgresource.IsEmptyValue(reflect.ValueOf(adminPasswordProp)) && (ok || !reflect.DeepEqual(v, adminPasswordProp)) {
		obj["adminPassword"] = adminPasswordProp
	}
	propertiesProp, err := expandOracleDatabaseAutonomousDatabaseProperties(d.Get("properties"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("properties"); !tpgresource.IsEmptyValue(reflect.ValueOf(propertiesProp)) && (ok || !reflect.DeepEqual(v, propertiesProp)) {
		obj["properties"] = propertiesProp
	}
	networkProp, err := expandOracleDatabaseAutonomousDatabaseNetwork(d.Get("network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	cidrProp, err := expandOracleDatabaseAutonomousDatabaseCidr(d.Get("cidr"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("cidr"); !tpgresource.IsEmptyValue(reflect.ValueOf(cidrProp)) && (ok || !reflect.DeepEqual(v, cidrProp)) {
		obj["cidr"] = cidrProp
	}
	labelsProp, err := expandOracleDatabaseAutonomousDatabaseEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandOracleDatabaseAutonomousDatabaseDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseAdminPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseProperties(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOcid, err := expandOracleDatabaseAutonomousDatabasePropertiesOcid(original["ocid"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOcid); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ocid"] = transformedOcid
	}

	transformedComputeCount, err := expandOracleDatabaseAutonomousDatabasePropertiesComputeCount(original["compute_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedComputeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["computeCount"] = transformedComputeCount
	}

	transformedDataStorageSizeTb, err := expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeTb(original["data_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeTb"] = transformedDataStorageSizeTb
	}

	transformedDataStorageSizeGb, err := expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeGb(original["data_storage_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataStorageSizeGb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataStorageSizeGb"] = transformedDataStorageSizeGb
	}

	transformedDbWorkload, err := expandOracleDatabaseAutonomousDatabasePropertiesDbWorkload(original["db_workload"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbWorkload); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbWorkload"] = transformedDbWorkload
	}

	transformedDbEdition, err := expandOracleDatabaseAutonomousDatabasePropertiesDbEdition(original["db_edition"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbEdition); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbEdition"] = transformedDbEdition
	}

	transformedCharacterSet, err := expandOracleDatabaseAutonomousDatabasePropertiesCharacterSet(original["character_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["characterSet"] = transformedCharacterSet
	}

	transformedNCharacterSet, err := expandOracleDatabaseAutonomousDatabasePropertiesNCharacterSet(original["n_character_set"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNCharacterSet); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nCharacterSet"] = transformedNCharacterSet
	}

	transformedPrivateEndpointIp, err := expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointIp(original["private_endpoint_ip"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpointIp); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateEndpointIp"] = transformedPrivateEndpointIp
	}

	transformedPrivateEndpointLabel, err := expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointLabel(original["private_endpoint_label"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpointLabel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateEndpointLabel"] = transformedPrivateEndpointLabel
	}

	transformedDbVersion, err := expandOracleDatabaseAutonomousDatabasePropertiesDbVersion(original["db_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDbVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dbVersion"] = transformedDbVersion
	}

	transformedIsAutoScalingEnabled, err := expandOracleDatabaseAutonomousDatabasePropertiesIsAutoScalingEnabled(original["is_auto_scaling_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsAutoScalingEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isAutoScalingEnabled"] = transformedIsAutoScalingEnabled
	}

	transformedIsStorageAutoScalingEnabled, err := expandOracleDatabaseAutonomousDatabasePropertiesIsStorageAutoScalingEnabled(original["is_storage_auto_scaling_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsStorageAutoScalingEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isStorageAutoScalingEnabled"] = transformedIsStorageAutoScalingEnabled
	}

	transformedLicenseType, err := expandOracleDatabaseAutonomousDatabasePropertiesLicenseType(original["license_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLicenseType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["licenseType"] = transformedLicenseType
	}

	transformedCustomerContacts, err := expandOracleDatabaseAutonomousDatabasePropertiesCustomerContacts(original["customer_contacts"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomerContacts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customerContacts"] = transformedCustomerContacts
	}

	transformedMaintenanceScheduleType, err := expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceScheduleType(original["maintenance_schedule_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceScheduleType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceScheduleType"] = transformedMaintenanceScheduleType
	}

	transformedMtlsConnectionRequired, err := expandOracleDatabaseAutonomousDatabasePropertiesMtlsConnectionRequired(original["mtls_connection_required"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMtlsConnectionRequired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mtlsConnectionRequired"] = transformedMtlsConnectionRequired
	}

	transformedBackupRetentionPeriodDays, err := expandOracleDatabaseAutonomousDatabasePropertiesBackupRetentionPeriodDays(original["backup_retention_period_days"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupRetentionPeriodDays); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupRetentionPeriodDays"] = transformedBackupRetentionPeriodDays
	}

	transformedActualUsedDataStorageSizeTb, err := expandOracleDatabaseAutonomousDatabasePropertiesActualUsedDataStorageSizeTb(original["actual_used_data_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedActualUsedDataStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["actualUsedDataStorageSizeTb"] = transformedActualUsedDataStorageSizeTb
	}

	transformedAllocatedStorageSizeTb, err := expandOracleDatabaseAutonomousDatabasePropertiesAllocatedStorageSizeTb(original["allocated_storage_size_tb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllocatedStorageSizeTb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allocatedStorageSizeTb"] = transformedAllocatedStorageSizeTb
	}

	transformedApexDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesApexDetails(original["apex_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApexDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apexDetails"] = transformedApexDetails
	}

	transformedArePrimaryAllowlistedIpsUsed, err := expandOracleDatabaseAutonomousDatabasePropertiesArePrimaryAllowlistedIpsUsed(original["are_primary_allowlisted_ips_used"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedArePrimaryAllowlistedIpsUsed); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["arePrimaryAllowlistedIpsUsed"] = transformedArePrimaryAllowlistedIpsUsed
	}

	transformedLifecycleDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesLifecycleDetails(original["lifecycle_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLifecycleDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lifecycleDetails"] = transformedLifecycleDetails
	}

	transformedState, err := expandOracleDatabaseAutonomousDatabasePropertiesState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedAutonomousContainerDatabaseId, err := expandOracleDatabaseAutonomousDatabasePropertiesAutonomousContainerDatabaseId(original["autonomous_container_database_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutonomousContainerDatabaseId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autonomousContainerDatabaseId"] = transformedAutonomousContainerDatabaseId
	}

	transformedAvailableUpgradeVersions, err := expandOracleDatabaseAutonomousDatabasePropertiesAvailableUpgradeVersions(original["available_upgrade_versions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAvailableUpgradeVersions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["availableUpgradeVersions"] = transformedAvailableUpgradeVersions
	}

	transformedConnectionStrings, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStrings(original["connection_strings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionStrings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionStrings"] = transformedConnectionStrings
	}

	transformedConnectionUrls, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrls(original["connection_urls"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConnectionUrls); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["connectionUrls"] = transformedConnectionUrls
	}

	transformedFailedDataRecoveryDuration, err := expandOracleDatabaseAutonomousDatabasePropertiesFailedDataRecoveryDuration(original["failed_data_recovery_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailedDataRecoveryDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failedDataRecoveryDuration"] = transformedFailedDataRecoveryDuration
	}

	transformedMemoryTableGbs, err := expandOracleDatabaseAutonomousDatabasePropertiesMemoryTableGbs(original["memory_table_gbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemoryTableGbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memoryTableGbs"] = transformedMemoryTableGbs
	}

	transformedIsLocalDataGuardEnabled, err := expandOracleDatabaseAutonomousDatabasePropertiesIsLocalDataGuardEnabled(original["is_local_data_guard_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIsLocalDataGuardEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["isLocalDataGuardEnabled"] = transformedIsLocalDataGuardEnabled
	}

	transformedLocalAdgAutoFailoverMaxDataLossLimit, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalAdgAutoFailoverMaxDataLossLimit(original["local_adg_auto_failover_max_data_loss_limit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalAdgAutoFailoverMaxDataLossLimit); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localAdgAutoFailoverMaxDataLossLimit"] = transformedLocalAdgAutoFailoverMaxDataLossLimit
	}

	transformedLocalStandbyDb, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDb(original["local_standby_db"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalStandbyDb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localStandbyDb"] = transformedLocalStandbyDb
	}

	transformedMemoryPerOracleComputeUnitGbs, err := expandOracleDatabaseAutonomousDatabasePropertiesMemoryPerOracleComputeUnitGbs(original["memory_per_oracle_compute_unit_gbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMemoryPerOracleComputeUnitGbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["memoryPerOracleComputeUnitGbs"] = transformedMemoryPerOracleComputeUnitGbs
	}

	transformedLocalDisasterRecoveryType, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalDisasterRecoveryType(original["local_disaster_recovery_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocalDisasterRecoveryType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["localDisasterRecoveryType"] = transformedLocalDisasterRecoveryType
	}

	transformedDataSafeState, err := expandOracleDatabaseAutonomousDatabasePropertiesDataSafeState(original["data_safe_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataSafeState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataSafeState"] = transformedDataSafeState
	}

	transformedDatabaseManagementState, err := expandOracleDatabaseAutonomousDatabasePropertiesDatabaseManagementState(original["database_management_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseManagementState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseManagementState"] = transformedDatabaseManagementState
	}

	transformedOpenMode, err := expandOracleDatabaseAutonomousDatabasePropertiesOpenMode(original["open_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOpenMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["openMode"] = transformedOpenMode
	}

	transformedOperationsInsightsState, err := expandOracleDatabaseAutonomousDatabasePropertiesOperationsInsightsState(original["operations_insights_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperationsInsightsState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operationsInsightsState"] = transformedOperationsInsightsState
	}

	transformedPeerDbIds, err := expandOracleDatabaseAutonomousDatabasePropertiesPeerDbIds(original["peer_db_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPeerDbIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["peerDbIds"] = transformedPeerDbIds
	}

	transformedPermissionLevel, err := expandOracleDatabaseAutonomousDatabasePropertiesPermissionLevel(original["permission_level"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPermissionLevel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["permissionLevel"] = transformedPermissionLevel
	}

	transformedPrivateEndpoint, err := expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpoint(original["private_endpoint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpoint); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["privateEndpoint"] = transformedPrivateEndpoint
	}

	transformedRefreshableMode, err := expandOracleDatabaseAutonomousDatabasePropertiesRefreshableMode(original["refreshable_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRefreshableMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["refreshableMode"] = transformedRefreshableMode
	}

	transformedRefreshableState, err := expandOracleDatabaseAutonomousDatabasePropertiesRefreshableState(original["refreshable_state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRefreshableState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["refreshableState"] = transformedRefreshableState
	}

	transformedRole, err := expandOracleDatabaseAutonomousDatabasePropertiesRole(original["role"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRole); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["role"] = transformedRole
	}

	transformedScheduledOperationDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetails(original["scheduled_operation_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedScheduledOperationDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["scheduledOperationDetails"] = transformedScheduledOperationDetails
	}

	transformedSqlWebDeveloperUrl, err := expandOracleDatabaseAutonomousDatabasePropertiesSqlWebDeveloperUrl(original["sql_web_developer_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSqlWebDeveloperUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sqlWebDeveloperUrl"] = transformedSqlWebDeveloperUrl
	}

	transformedSupportedCloneRegions, err := expandOracleDatabaseAutonomousDatabasePropertiesSupportedCloneRegions(original["supported_clone_regions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSupportedCloneRegions); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["supportedCloneRegions"] = transformedSupportedCloneRegions
	}

	transformedUsedDataStorageSizeTbs, err := expandOracleDatabaseAutonomousDatabasePropertiesUsedDataStorageSizeTbs(original["used_data_storage_size_tbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUsedDataStorageSizeTbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["usedDataStorageSizeTbs"] = transformedUsedDataStorageSizeTbs
	}

	transformedOciUrl, err := expandOracleDatabaseAutonomousDatabasePropertiesOciUrl(original["oci_url"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOciUrl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ociUrl"] = transformedOciUrl
	}

	transformedTotalAutoBackupStorageSizeGbs, err := expandOracleDatabaseAutonomousDatabasePropertiesTotalAutoBackupStorageSizeGbs(original["total_auto_backup_storage_size_gbs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTotalAutoBackupStorageSizeGbs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["totalAutoBackupStorageSizeGbs"] = transformedTotalAutoBackupStorageSizeGbs
	}

	transformedNextLongTermBackupTime, err := expandOracleDatabaseAutonomousDatabasePropertiesNextLongTermBackupTime(original["next_long_term_backup_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNextLongTermBackupTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nextLongTermBackupTime"] = transformedNextLongTermBackupTime
	}

	transformedMaintenanceBeginTime, err := expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceBeginTime(original["maintenance_begin_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceBeginTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceBeginTime"] = transformedMaintenanceBeginTime
	}

	transformedMaintenanceEndTime, err := expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceEndTime(original["maintenance_end_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaintenanceEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maintenanceEndTime"] = transformedMaintenanceEndTime
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOcid(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesComputeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDataStorageSizeGb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDbWorkload(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDbEdition(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesCharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesNCharacterSet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointIp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpointLabel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDbVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesIsAutoScalingEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesIsStorageAutoScalingEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLicenseType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesCustomerContacts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedEmail, err := expandOracleDatabaseAutonomousDatabasePropertiesCustomerContactsEmail(original["email"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEmail); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["email"] = transformedEmail
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesCustomerContactsEmail(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceScheduleType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMtlsConnectionRequired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesBackupRetentionPeriodDays(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesActualUsedDataStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesAllocatedStorageSizeTb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesApexDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApexVersion, err := expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsApexVersion(original["apex_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApexVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apexVersion"] = transformedApexVersion
	}

	transformedOrdsVersion, err := expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsOrdsVersion(original["ords_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrdsVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ordsVersion"] = transformedOrdsVersion
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsApexVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesApexDetailsOrdsVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesArePrimaryAllowlistedIpsUsed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLifecycleDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesAutonomousContainerDatabaseId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesAvailableUpgradeVersions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStrings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllConnectionStrings, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStrings(original["all_connection_strings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllConnectionStrings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allConnectionStrings"] = transformedAllConnectionStrings
	}

	transformedDedicated, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsDedicated(original["dedicated"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDedicated); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dedicated"] = transformedDedicated
	}

	transformedHigh, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsHigh(original["high"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHigh); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["high"] = transformedHigh
	}

	transformedLow, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsLow(original["low"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["low"] = transformedLow
	}

	transformedMedium, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsMedium(original["medium"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMedium); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["medium"] = transformedMedium
	}

	transformedProfiles, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfiles(original["profiles"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProfiles); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["profiles"] = transformedProfiles
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStrings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHigh, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsHigh(original["high"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHigh); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["high"] = transformedHigh
	}

	transformedLow, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsLow(original["low"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLow); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["low"] = transformedLow
	}

	transformedMedium, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsMedium(original["medium"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMedium); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["medium"] = transformedMedium
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsHigh(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsLow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsMedium(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsDedicated(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsHigh(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsLow(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsMedium(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfiles(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedConsumerGroup, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesConsumerGroup(original["consumer_group"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConsumerGroup); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["consumerGroup"] = transformedConsumerGroup
		}

		transformedDisplayName, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesDisplayName(original["display_name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["displayName"] = transformedDisplayName
		}

		transformedHostFormat, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesHostFormat(original["host_format"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedHostFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["hostFormat"] = transformedHostFormat
		}

		transformedIsRegional, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesIsRegional(original["is_regional"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIsRegional); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["isRegional"] = transformedIsRegional
		}

		transformedProtocol, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesProtocol(original["protocol"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedProtocol); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["protocol"] = transformedProtocol
		}

		transformedSessionMode, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSessionMode(original["session_mode"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSessionMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["sessionMode"] = transformedSessionMode
		}

		transformedSyntaxFormat, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSyntaxFormat(original["syntax_format"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSyntaxFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["syntaxFormat"] = transformedSyntaxFormat
		}

		transformedTlsAuthentication, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesTlsAuthentication(original["tls_authentication"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTlsAuthentication); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["tlsAuthentication"] = transformedTlsAuthentication
		}

		transformedValue, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesConsumerGroup(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesHostFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesIsRegional(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesProtocol(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSessionMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesSyntaxFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesTlsAuthentication(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrls(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedApexUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsApexUri(original["apex_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApexUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["apexUri"] = transformedApexUri
	}

	transformedDatabaseTransformsUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsDatabaseTransformsUri(original["database_transforms_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseTransformsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseTransformsUri"] = transformedDatabaseTransformsUri
	}

	transformedGraphStudioUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsGraphStudioUri(original["graph_studio_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGraphStudioUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["graphStudioUri"] = transformedGraphStudioUri
	}

	transformedMachineLearningNotebookUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningNotebookUri(original["machine_learning_notebook_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineLearningNotebookUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineLearningNotebookUri"] = transformedMachineLearningNotebookUri
	}

	transformedMachineLearningUserManagementUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningUserManagementUri(original["machine_learning_user_management_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineLearningUserManagementUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["machineLearningUserManagementUri"] = transformedMachineLearningUserManagementUri
	}

	transformedMongoDbUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMongoDbUri(original["mongo_db_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMongoDbUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mongoDbUri"] = transformedMongoDbUri
	}

	transformedOrdsUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOrdsUri(original["ords_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrdsUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ordsUri"] = transformedOrdsUri
	}

	transformedSqlDevWebUri, err := expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsSqlDevWebUri(original["sql_dev_web_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSqlDevWebUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sqlDevWebUri"] = transformedSqlDevWebUri
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsApexUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsDatabaseTransformsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsGraphStudioUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningNotebookUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMachineLearningUserManagementUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsMongoDbUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOrdsUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesConnectionUrlsSqlDevWebUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesFailedDataRecoveryDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMemoryTableGbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesIsLocalDataGuardEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalAdgAutoFailoverMaxDataLossLimit(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLagTimeDuration, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLagTimeDuration(original["lag_time_duration"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLagTimeDuration); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lagTimeDuration"] = transformedLagTimeDuration
	}

	transformedLifecycleDetails, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLifecycleDetails(original["lifecycle_details"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLifecycleDetails); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lifecycleDetails"] = transformedLifecycleDetails
	}

	transformedState, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedDataGuardRoleChangedTime, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDataGuardRoleChangedTime(original["data_guard_role_changed_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDataGuardRoleChangedTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dataGuardRoleChangedTime"] = transformedDataGuardRoleChangedTime
	}

	transformedDisasterRecoveryRoleChangedTime, err := expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDisasterRecoveryRoleChangedTime(original["disaster_recovery_role_changed_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisasterRecoveryRoleChangedTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disasterRecoveryRoleChangedTime"] = transformedDisasterRecoveryRoleChangedTime
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLagTimeDuration(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbLifecycleDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDataGuardRoleChangedTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbDisasterRecoveryRoleChangedTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMemoryPerOracleComputeUnitGbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesLocalDisasterRecoveryType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDataSafeState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesDatabaseManagementState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOpenMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOperationsInsightsState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPeerDbIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPermissionLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesPrivateEndpoint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesRefreshableMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesRefreshableState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesRole(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetails(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDayOfWeek, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsDayOfWeek(original["day_of_week"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDayOfWeek); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["dayOfWeek"] = transformedDayOfWeek
		}

		transformedStartTime, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTime(original["start_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["startTime"] = transformedStartTime
		}

		transformedStopTime, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTime(original["stop_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedStopTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["stopTime"] = transformedStopTime
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsDayOfWeek(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHours, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeHours(original["hours"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHours); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hours"] = transformedHours
	}

	transformedMinutes, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeMinutes(original["minutes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinutes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minutes"] = transformedMinutes
	}

	transformedSeconds, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeSeconds(original["seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["seconds"] = transformedSeconds
	}

	transformedNanos, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeNanos(original["nanos"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNanos); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nanos"] = transformedNanos
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeHours(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeMinutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeNanos(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedHours, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeHours(original["hours"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHours); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["hours"] = transformedHours
	}

	transformedMinutes, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeMinutes(original["minutes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinutes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minutes"] = transformedMinutes
	}

	transformedSeconds, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeSeconds(original["seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSeconds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["seconds"] = transformedSeconds
	}

	transformedNanos, err := expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeNanos(original["nanos"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNanos); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nanos"] = transformedNanos
	}

	return transformed, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeHours(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeMinutes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeSeconds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeNanos(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesSqlWebDeveloperUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesSupportedCloneRegions(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesUsedDataStorageSizeTbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesOciUrl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesTotalAutoBackupStorageSizeGbs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesNextLongTermBackupTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceBeginTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabasePropertiesMaintenanceEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseCidr(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandOracleDatabaseAutonomousDatabaseEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
