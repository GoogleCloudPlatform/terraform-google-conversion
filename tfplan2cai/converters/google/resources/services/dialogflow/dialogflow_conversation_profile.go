// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/dialogflow/ConversationProfile.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package dialogflow

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DialogflowConversationProfileAssetType string = "dialogflow.googleapis.com/ConversationProfile"

func ResourceConverterDialogflowConversationProfile() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DialogflowConversationProfileAssetType,
		Convert:   GetDialogflowConversationProfileCaiObject,
	}
}

func GetDialogflowConversationProfileCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//dialogflow.googleapis.com/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDialogflowConversationProfileApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DialogflowConversationProfileAssetType,
			Resource: &cai.AssetResource{
				Version:              "v2",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/dialogflow/v2/rest",
				DiscoveryName:        "ConversationProfile",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDialogflowConversationProfileApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowConversationProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	automatedAgentConfigProp, err := expandDialogflowConversationProfileAutomatedAgentConfig(d.Get("automated_agent_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("automated_agent_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(automatedAgentConfigProp)) && (ok || !reflect.DeepEqual(v, automatedAgentConfigProp)) {
		obj["automatedAgentConfig"] = automatedAgentConfigProp
	}
	humanAgentAssistantConfigProp, err := expandDialogflowConversationProfileHumanAgentAssistantConfig(d.Get("human_agent_assistant_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("human_agent_assistant_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(humanAgentAssistantConfigProp)) && (ok || !reflect.DeepEqual(v, humanAgentAssistantConfigProp)) {
		obj["humanAgentAssistantConfig"] = humanAgentAssistantConfigProp
	}
	humanAgentHandoffConfigProp, err := expandDialogflowConversationProfileHumanAgentHandoffConfig(d.Get("human_agent_handoff_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("human_agent_handoff_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(humanAgentHandoffConfigProp)) && (ok || !reflect.DeepEqual(v, humanAgentHandoffConfigProp)) {
		obj["humanAgentHandoffConfig"] = humanAgentHandoffConfigProp
	}
	notificationConfigProp, err := expandDialogflowConversationProfileNotificationConfig(d.Get("notification_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("notification_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(notificationConfigProp)) && (ok || !reflect.DeepEqual(v, notificationConfigProp)) {
		obj["notificationConfig"] = notificationConfigProp
	}
	loggingConfigProp, err := expandDialogflowConversationProfileLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("logging_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(loggingConfigProp)) && (ok || !reflect.DeepEqual(v, loggingConfigProp)) {
		obj["loggingConfig"] = loggingConfigProp
	}
	newMessageEventNotificationConfigProp, err := expandDialogflowConversationProfileNewMessageEventNotificationConfig(d.Get("new_message_event_notification_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("new_message_event_notification_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(newMessageEventNotificationConfigProp)) && (ok || !reflect.DeepEqual(v, newMessageEventNotificationConfigProp)) {
		obj["newMessageEventNotificationConfig"] = newMessageEventNotificationConfigProp
	}
	sttConfigProp, err := expandDialogflowConversationProfileSttConfig(d.Get("stt_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("stt_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(sttConfigProp)) && (ok || !reflect.DeepEqual(v, sttConfigProp)) {
		obj["sttConfig"] = sttConfigProp
	}
	languageCodeProp, err := expandDialogflowConversationProfileLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("language_code"); !tpgresource.IsEmptyValue(reflect.ValueOf(languageCodeProp)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	timeZoneProp, err := expandDialogflowConversationProfileTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("time_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(timeZoneProp)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	securitySettingsProp, err := expandDialogflowConversationProfileSecuritySettings(d.Get("security_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("security_settings"); !tpgresource.IsEmptyValue(reflect.ValueOf(securitySettingsProp)) && (ok || !reflect.DeepEqual(v, securitySettingsProp)) {
		obj["securitySettings"] = securitySettingsProp
	}
	ttsConfigProp, err := expandDialogflowConversationProfileTtsConfig(d.Get("tts_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("tts_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(ttsConfigProp)) && (ok || !reflect.DeepEqual(v, ttsConfigProp)) {
		obj["ttsConfig"] = ttsConfigProp
	}

	return obj, nil
}

func expandDialogflowConversationProfileDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileAutomatedAgentConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedSessionTtl, err := expandDialogflowConversationProfileAutomatedAgentConfigSessionTtl(original["session_ttl"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSessionTtl); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sessionTtl"] = transformedSessionTtl
	}

	return transformed, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfigAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfigSessionTtl(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNotificationConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(original["notification_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNotificationConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["notificationConfig"] = transformedNotificationConfig
	}

	transformedHumanAgentSuggestionConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(original["human_agent_suggestion_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSuggestionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["humanAgentSuggestionConfig"] = transformedHumanAgentSuggestionConfig
	}

	transformedEndUserSuggestionConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(original["end_user_suggestion_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndUserSuggestionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endUserSuggestionConfig"] = transformedEndUserSuggestionConfig
	}

	transformedMessageAnalysisConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(original["message_analysis_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageAnalysisConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageAnalysisConfig"] = transformedMessageAnalysisConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureConfigs, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(original["feature_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureConfigs"] = transformedFeatureConfigs
	}

	transformedGroupSuggestionResponses, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(original["group_suggestion_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupSuggestionResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["groupSuggestionResponses"] = transformedGroupSuggestionResponses
	}

	transformedGenerators, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGenerators(original["generators"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerators); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generators"] = transformedGenerators
	}

	transformedDisableHighLatencyFeaturesSyncDelivery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(original["disable_high_latency_features_sync_delivery"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableHighLatencyFeaturesSyncDelivery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableHighLatencyFeaturesSyncDelivery"] = transformedDisableHighLatencyFeaturesSyncDelivery
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSuggestionFeature, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestion_feature"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionFeature); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionFeature"] = transformedSuggestionFeature
		}

		transformedEnableEventBasedSuggestion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enable_event_based_suggestion"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableEventBasedSuggestion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableEventBasedSuggestion"] = transformedEnableEventBasedSuggestion
		}

		transformedDisableAgentQueryLogging, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsDisableAgentQueryLogging(original["disable_agent_query_logging"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisableAgentQueryLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["disableAgentQueryLogging"] = transformedDisableAgentQueryLogging
		}

		transformedEnableQuerySuggestionWhenNoAnswer, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(original["enable_query_suggestion_when_no_answer"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionWhenNoAnswer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionWhenNoAnswer"] = transformedEnableQuerySuggestionWhenNoAnswer
		}

		transformedEnableConversationAugmentedQuery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(original["enable_conversation_augmented_query"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableConversationAugmentedQuery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableConversationAugmentedQuery"] = transformedEnableConversationAugmentedQuery
		}

		transformedEnableQuerySuggestionOnly, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(original["enable_query_suggestion_only"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionOnly"] = transformedEnableQuerySuggestionOnly
		}

		transformedSuggestionTriggerSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestion_trigger_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionTriggerSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionTriggerSettings"] = transformedSuggestionTriggerSettings
		}

		transformedQueryConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(original["query_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryConfig"] = transformedQueryConfig
		}

		transformedConversationModelConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(original["conversation_model_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationModelConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationModelConfig"] = transformedConversationModelConfig
		}

		transformedConversationProcessConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversation_process_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationProcessConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationProcessConfig"] = transformedConversationProcessConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsDisableAgentQueryLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNoSmallTalk, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(original["no_small_talk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSmallTalk); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noSmallTalk"] = transformedNoSmallTalk
	}

	transformedOnlyEndUser, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["only_end_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOnlyEndUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["onlyEndUser"] = transformedOnlyEndUser
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxResults, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["max_results"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxResults); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxResults"] = transformedMaxResults
	}

	transformedConfidenceThreshold, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidence_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceThreshold"] = transformedConfidenceThreshold
	}

	transformedContextFilterSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["context_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contextFilterSettings"] = transformedContextFilterSettings
	}

	transformedSections, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSections(original["sections"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSections); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sections"] = transformedSections
	}

	transformedDialogflowQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflow_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDialogflowQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dialogflowQuerySource"] = transformedDialogflowQuerySource
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDropHandoffMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["drop_handoff_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropHandoffMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropHandoffMessages"] = transformedDropHandoffMessages
	}

	transformedDropVirtualAgentMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["drop_virtual_agent_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropVirtualAgentMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropVirtualAgentMessages"] = transformedDropVirtualAgentMessages
	}

	transformedDropIvrMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["drop_ivr_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropIvrMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropIvrMessages"] = transformedDropIvrMessages
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSections(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSectionTypes, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(original["section_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSectionTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sectionTypes"] = transformedSectionTypes
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedHumanAgentSideConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(original["human_agent_side_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSideConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["humanAgentSideConfig"] = transformedHumanAgentSideConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedBaselineModelVersion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(original["baseline_model_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBaselineModelVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["baselineModelVersion"] = transformedBaselineModelVersion
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecentSentencesCount, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recent_sentences_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecentSentencesCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recentSentencesCount"] = transformedRecentSentencesCount
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGenerators(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureConfigs, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(original["feature_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureConfigs); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureConfigs"] = transformedFeatureConfigs
	}

	transformedGroupSuggestionResponses, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(original["group_suggestion_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupSuggestionResponses); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["groupSuggestionResponses"] = transformedGroupSuggestionResponses
	}

	transformedGenerators, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGenerators(original["generators"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerators); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["generators"] = transformedGenerators
	}

	transformedDisableHighLatencyFeaturesSyncDelivery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(original["disable_high_latency_features_sync_delivery"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisableHighLatencyFeaturesSyncDelivery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["disableHighLatencyFeaturesSyncDelivery"] = transformedDisableHighLatencyFeaturesSyncDelivery
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSuggestionFeature, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestion_feature"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionFeature); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionFeature"] = transformedSuggestionFeature
		}

		transformedEnableEventBasedSuggestion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enable_event_based_suggestion"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableEventBasedSuggestion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableEventBasedSuggestion"] = transformedEnableEventBasedSuggestion
		}

		transformedDisableAgentQueryLogging, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsDisableAgentQueryLogging(original["disable_agent_query_logging"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedDisableAgentQueryLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["disableAgentQueryLogging"] = transformedDisableAgentQueryLogging
		}

		transformedEnableQuerySuggestionWhenNoAnswer, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(original["enable_query_suggestion_when_no_answer"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionWhenNoAnswer); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionWhenNoAnswer"] = transformedEnableQuerySuggestionWhenNoAnswer
		}

		transformedEnableConversationAugmentedQuery, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(original["enable_conversation_augmented_query"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableConversationAugmentedQuery); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableConversationAugmentedQuery"] = transformedEnableConversationAugmentedQuery
		}

		transformedEnableQuerySuggestionOnly, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(original["enable_query_suggestion_only"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableQuerySuggestionOnly); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["enableQuerySuggestionOnly"] = transformedEnableQuerySuggestionOnly
		}

		transformedSuggestionTriggerSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestion_trigger_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionTriggerSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["suggestionTriggerSettings"] = transformedSuggestionTriggerSettings
		}

		transformedQueryConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(original["query_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryConfig"] = transformedQueryConfig
		}

		transformedConversationModelConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(original["conversation_model_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationModelConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationModelConfig"] = transformedConversationModelConfig
		}

		transformedConversationProcessConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversation_process_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationProcessConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["conversationProcessConfig"] = transformedConversationProcessConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsDisableAgentQueryLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionWhenNoAnswer(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableConversationAugmentedQuery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableQuerySuggestionOnly(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNoSmallTalk, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(original["no_small_talk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSmallTalk); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["noSmallTalk"] = transformedNoSmallTalk
	}

	transformedOnlyEndUser, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["only_end_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOnlyEndUser); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["onlyEndUser"] = transformedOnlyEndUser
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmallTalk(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxResults, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["max_results"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxResults); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxResults"] = transformedMaxResults
	}

	transformedConfidenceThreshold, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidence_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceThreshold); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["confidenceThreshold"] = transformedConfidenceThreshold
	}

	transformedContextFilterSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["context_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextFilterSettings); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["contextFilterSettings"] = transformedContextFilterSettings
	}

	transformedSections, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSections(original["sections"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSections); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sections"] = transformedSections
	}

	transformedKnowledgeBaseQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledge_base_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBaseQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["knowledgeBaseQuerySource"] = transformedKnowledgeBaseQuerySource
	}

	transformedDocumentQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["document_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocumentQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["documentQuerySource"] = transformedDocumentQuerySource
	}

	transformedDialogflowQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflow_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDialogflowQuerySource); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dialogflowQuerySource"] = transformedDialogflowQuerySource
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDropHandoffMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["drop_handoff_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropHandoffMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropHandoffMessages"] = transformedDropHandoffMessages
	}

	transformedDropVirtualAgentMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["drop_virtual_agent_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropVirtualAgentMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropVirtualAgentMessages"] = transformedDropVirtualAgentMessages
	}

	transformedDropIvrMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["drop_ivr_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropIvrMessages); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["dropIvrMessages"] = transformedDropIvrMessages
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSections(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSectionTypes, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(original["section_types"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSectionTypes); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sectionTypes"] = transformedSectionTypes
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigSectionsSectionTypes(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKnowledgeBases, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledge_bases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["knowledgeBases"] = transformedKnowledgeBases
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDocuments, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocuments); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["documents"] = transformedDocuments
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	transformedHumanAgentSideConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(original["human_agent_side_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSideConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["humanAgentSideConfig"] = transformedHumanAgentSideConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceHumanAgentSideConfigAgent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedBaselineModelVersion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(original["baseline_model_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBaselineModelVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["baselineModelVersion"] = transformedBaselineModelVersion
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigBaselineModelVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecentSentencesCount, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recent_sentences_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecentSentencesCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["recentSentencesCount"] = transformedRecentSentencesCount
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGenerators(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigDisableHighLatencyFeaturesSyncDelivery(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableEntityExtraction, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(original["enable_entity_extraction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableEntityExtraction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableEntityExtraction"] = transformedEnableEntityExtraction
	}

	transformedEnableSentimentAnalysis, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(original["enable_sentiment_analysis"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableSentimentAnalysis); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableSentimentAnalysis"] = transformedEnableSentimentAnalysis
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLivePersonConfig, err := expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(original["live_person_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLivePersonConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["livePersonConfig"] = transformedLivePersonConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAccountNumber, err := expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(original["account_number"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccountNumber); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["accountNumber"] = transformedAccountNumber
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNotificationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileNotificationConfigTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNotificationConfigMessageFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileLoggingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableStackdriverLogging, err := expandDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(original["enable_stackdriver_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableStackdriverLogging); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableStackdriverLogging"] = transformedEnableStackdriverLogging
	}

	return transformed, nil
}

func expandDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileNewMessageEventNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfigTopic(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSpeechModelVariant, err := expandDialogflowConversationProfileSttConfigSpeechModelVariant(original["speech_model_variant"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeechModelVariant); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["speechModelVariant"] = transformedSpeechModelVariant
	}

	transformedModel, err := expandDialogflowConversationProfileSttConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedAudioEncoding, err := expandDialogflowConversationProfileSttConfigAudioEncoding(original["audio_encoding"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAudioEncoding); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["audioEncoding"] = transformedAudioEncoding
	}

	transformedSampleRateHertz, err := expandDialogflowConversationProfileSttConfigSampleRateHertz(original["sample_rate_hertz"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSampleRateHertz); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sampleRateHertz"] = transformedSampleRateHertz
	}

	transformedLanguageCode, err := expandDialogflowConversationProfileSttConfigLanguageCode(original["language_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLanguageCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["languageCode"] = transformedLanguageCode
	}

	transformedEnableWordInfo, err := expandDialogflowConversationProfileSttConfigEnableWordInfo(original["enable_word_info"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableWordInfo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enableWordInfo"] = transformedEnableWordInfo
	}

	transformedUseTimeoutBasedEndpointing, err := expandDialogflowConversationProfileSttConfigUseTimeoutBasedEndpointing(original["use_timeout_based_endpointing"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUseTimeoutBasedEndpointing); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["useTimeoutBasedEndpointing"] = transformedUseTimeoutBasedEndpointing
	}

	return transformed, nil
}

func expandDialogflowConversationProfileSttConfigSpeechModelVariant(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigModel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigAudioEncoding(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigSampleRateHertz(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigEnableWordInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfigUseTimeoutBasedEndpointing(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileLanguageCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSecuritySettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSpeakingRate, err := expandDialogflowConversationProfileTtsConfigSpeakingRate(original["speaking_rate"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeakingRate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["speakingRate"] = transformedSpeakingRate
	}

	transformedPitch, err := expandDialogflowConversationProfileTtsConfigPitch(original["pitch"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPitch); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pitch"] = transformedPitch
	}

	transformedVolumeGainDb, err := expandDialogflowConversationProfileTtsConfigVolumeGainDb(original["volume_gain_db"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeGainDb); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeGainDb"] = transformedVolumeGainDb
	}

	transformedEffectsProfileId, err := expandDialogflowConversationProfileTtsConfigEffectsProfileId(original["effects_profile_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEffectsProfileId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["effectsProfileId"] = transformedEffectsProfileId
	}

	transformedVoice, err := expandDialogflowConversationProfileTtsConfigVoice(original["voice"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVoice); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["voice"] = transformedVoice
	}

	return transformed, nil
}

func expandDialogflowConversationProfileTtsConfigSpeakingRate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigPitch(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigVolumeGainDb(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigEffectsProfileId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigVoice(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDialogflowConversationProfileTtsConfigVoiceName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedSsmlGender, err := expandDialogflowConversationProfileTtsConfigVoiceSsmlGender(original["ssml_gender"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSsmlGender); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ssmlGender"] = transformedSsmlGender
	}

	return transformed, nil
}

func expandDialogflowConversationProfileTtsConfigVoiceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTtsConfigVoiceSsmlGender(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
