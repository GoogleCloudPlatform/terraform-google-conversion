// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package certificatemanager_test

import (
	"testing"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/test"
)

func TestAccCertificateManagerCertificate_certificateManagerGoogleManagedCertificateDnsExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerGoogleManagedCertificateIssuanceConfigExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerSelfManagedCertificateExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerSelfManagedCertificateRegionalExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerGoogleManagedCertificateIssuanceConfigAllRegionsExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerGoogleManagedCertificateDnsAllRegionsExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerGoogleManagedRegionalCertificateDnsAuthExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
func TestAccCertificateManagerCertificate_certificateManagerClientAuthCertificateExample(t *testing.T) {
	t.Skip("Need to figure out to get the desired cai asset state.")
	t.Parallel()

	test.BidirectionalConversion(
		t,
		[]string{
			"count",
			"depends_on",
			"for_each",
			"lifecycle",
			"location",
			"name",
			"provider",
			"self_managed.certificate_pem",
			"self_managed.pem_private_key",
			"self_managed.private_key_pem",
		},
		[]string{},
	)
}
