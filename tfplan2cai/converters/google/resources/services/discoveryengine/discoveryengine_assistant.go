// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/discoveryengine/Assistant.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package discoveryengine

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v7/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.StdEncoding
	_ = fmt.Sprintf
	_ = json.Marshal
	_ = log.Print
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = structure.ExpandJsonFromString
	_ = validation.All
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ProjectRegex
	_ = googleapi.Error{}
)

const DiscoveryEngineAssistantAssetType string = "{{location}}-discoveryengine.googleapis.com/Assistant"

func ResourceConverterDiscoveryEngineAssistant() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: DiscoveryEngineAssistantAssetType,
		Convert:   GetDiscoveryEngineAssistantCaiObject,
	}
}

func GetDiscoveryEngineAssistantCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{location}}-discoveryengine.googleapis.com/projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/engines/{{engine_id}}/assistants/{{assistant_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetDiscoveryEngineAssistantApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: DiscoveryEngineAssistantAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-discoveryengine/v1/rest",
				DiscoveryName:        "Assistant",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetDiscoveryEngineAssistantApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandDiscoveryEngineAssistantDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandDiscoveryEngineAssistantDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	generationConfigProp, err := expandDiscoveryEngineAssistantGenerationConfig(d.Get("generation_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("generation_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(generationConfigProp)) && (ok || !reflect.DeepEqual(v, generationConfigProp)) {
		obj["generationConfig"] = generationConfigProp
	}
	customerPolicyProp, err := expandDiscoveryEngineAssistantCustomerPolicy(d.Get("customer_policy"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("customer_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(customerPolicyProp)) && (ok || !reflect.DeepEqual(v, customerPolicyProp)) {
		obj["customerPolicy"] = customerPolicyProp
	}
	webGroundingTypeProp, err := expandDiscoveryEngineAssistantWebGroundingType(d.Get("web_grounding_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("web_grounding_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(webGroundingTypeProp)) && (ok || !reflect.DeepEqual(v, webGroundingTypeProp)) {
		obj["webGroundingType"] = webGroundingTypeProp
	}

	return obj, nil
}

func expandDiscoveryEngineAssistantDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantGenerationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSystemInstruction, err := expandDiscoveryEngineAssistantGenerationConfigSystemInstruction(original["system_instruction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSystemInstruction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["systemInstruction"] = transformedSystemInstruction
	}

	transformedDefaultLanguage, err := expandDiscoveryEngineAssistantGenerationConfigDefaultLanguage(original["default_language"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultLanguage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultLanguage"] = transformedDefaultLanguage
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantGenerationConfigSystemInstruction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdditionalSystemInstruction, err := expandDiscoveryEngineAssistantGenerationConfigSystemInstructionAdditionalSystemInstruction(original["additional_system_instruction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdditionalSystemInstruction); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["additionalSystemInstruction"] = transformedAdditionalSystemInstruction
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantGenerationConfigSystemInstructionAdditionalSystemInstruction(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantGenerationConfigDefaultLanguage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBannedPhrases, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrases(original["banned_phrases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBannedPhrases); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["bannedPhrases"] = transformedBannedPhrases
	}

	transformedModelArmorConfig, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfig(original["model_armor_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModelArmorConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["modelArmorConfig"] = transformedModelArmorConfig
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrases(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedPhrase, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesPhrase(original["phrase"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPhrase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["phrase"] = transformedPhrase
		}

		transformedMatchType, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesMatchType(original["match_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMatchType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["matchType"] = transformedMatchType
		}

		transformedIgnoreDiacritics, err := expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesIgnoreDiacritics(original["ignore_diacritics"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedIgnoreDiacritics); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ignoreDiacritics"] = transformedIgnoreDiacritics
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesPhrase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesMatchType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyBannedPhrasesIgnoreDiacritics(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUserPromptTemplate, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigUserPromptTemplate(original["user_prompt_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUserPromptTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["userPromptTemplate"] = transformedUserPromptTemplate
	}

	transformedResponseTemplate, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigResponseTemplate(original["response_template"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedResponseTemplate); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["responseTemplate"] = transformedResponseTemplate
	}

	transformedFailureMode, err := expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigFailureMode(original["failure_mode"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailureMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failureMode"] = transformedFailureMode
	}

	return transformed, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigUserPromptTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigResponseTemplate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantCustomerPolicyModelArmorConfigFailureMode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDiscoveryEngineAssistantWebGroundingType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
