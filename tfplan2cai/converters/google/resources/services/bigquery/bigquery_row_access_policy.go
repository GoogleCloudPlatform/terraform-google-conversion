// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/bigquery/RowAccessPolicy.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/tgc/resource_converter.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package bigquery

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const BigQueryRowAccessPolicyAssetType string = "bigquery.googleapis.com/RowAccessPolicy"

func ResourceConverterBigQueryRowAccessPolicy() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: BigQueryRowAccessPolicyAssetType,
		Convert:   GetBigQueryRowAccessPolicyCaiObject,
	}
}

func GetBigQueryRowAccessPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//bigquery.googleapis.com/projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}/rowAccessPolicies/{{policy_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetBigQueryRowAccessPolicyApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: BigQueryRowAccessPolicyAssetType,
			Resource: &cai.AssetResource{
				Version:              "v2",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/bigquery/v2/rest",
				DiscoveryName:        "RowAccessPolicy",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetBigQueryRowAccessPolicyApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	rowAccessPolicyReferenceProp, err := expandBigQueryRowAccessPolicyRowAccessPolicyReference(nil, d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("row_access_policy_reference"); !tpgresource.IsEmptyValue(reflect.ValueOf(rowAccessPolicyReferenceProp)) && (ok || !reflect.DeepEqual(v, rowAccessPolicyReferenceProp)) {
		obj["rowAccessPolicyReference"] = rowAccessPolicyReferenceProp
	}
	filterPredicateProp, err := expandBigQueryRowAccessPolicyFilterPredicate(d.Get("filter_predicate"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("filter_predicate"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterPredicateProp)) && (ok || !reflect.DeepEqual(v, filterPredicateProp)) {
		obj["filterPredicate"] = filterPredicateProp
	}
	granteesProp, err := expandBigQueryRowAccessPolicyGrantees(d.Get("grantees"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("grantees"); !tpgresource.IsEmptyValue(reflect.ValueOf(granteesProp)) && (ok || !reflect.DeepEqual(v, granteesProp)) {
		obj["grantees"] = granteesProp
	}

	return obj, nil
}

func expandBigQueryRowAccessPolicyRowAccessPolicyReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	transformed := make(map[string]interface{})

	project, _ := tpgresource.GetProject(d, config)
	transformed["projectId"] = project
	transformed["datasetId"] = d.Get("dataset_id")
	transformed["tableId"] = d.Get("table_id")
	transformed["policyId"] = d.Get("policy_id")

	return transformed, nil
}

func expandBigQueryRowAccessPolicyFilterPredicate(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigQueryRowAccessPolicyGrantees(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
